
ScaleDriverNew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bf  00800100  00800100  00000ed8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b64  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054d  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058b  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000419  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ce  00000000  00000000  00002d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_1>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_14>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_18>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_20>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4e 41       	sbci	r20, 0x1E	; 30
  6a:	4e 49       	sbci	r20, 0x9E	; 158

0000006b <pstr_inity>:
  6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
  70:	49 4e 46                                            INF

00000073 <pwr_m10>:
  73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
  83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
  8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
  9b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_clear_bss>:
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
  b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
  ba:	af 3b       	cpi	r26, 0xBF	; 191
  bc:	b2 07       	cpc	r27, r18
  be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
  c0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  c4:	0c 94 30 07 	jmp	0xe60	; 0xe60 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <BL_GetMessage>:
uint16_t PWMvalue = 0;



void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	c1 e2       	ldi	r28, 0x21	; 33
  d6:	d1 e0       	ldi	r29, 0x01	; 1
  d8:	09 e2       	ldi	r16, 0x29	; 41
  da:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i=0; i<8; i++)
	{
		BluetoothMessage[i] = BL_GetChar();
  dc:	0e 94 41 01 	call	0x282	; 0x282 <BL_GetChar>
  e0:	89 93       	st	Y+, r24


void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
	
	for (int i=0; i<8; i++)
  e2:	c0 17       	cp	r28, r16
  e4:	d1 07       	cpc	r29, r17
  e6:	d1 f7       	brne	.-12     	; 0xdc <BL_GetMessage+0x10>
	{
		BluetoothMessage[i] = BL_GetChar();
	}
	BL_FlushRxBuf();  // flush our buffer and start from the beginning
  e8:	0e 94 3a 01 	call	0x274	; 0x274 <BL_FlushRxBuf>

}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <BL_DefComd>:


void BL_DefComd()
{
	
	BL_GetMessage(); //pulling up buffer's data one by one
  f6:	0e 94 66 00 	call	0xcc	; 0xcc <BL_GetMessage>
	if ((BluetoothMessage[0] == '-')|(BluetoothMessage[0] == '+'))
  fa:	90 91 21 01 	lds	r25, 0x0121
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	9b 32       	cpi	r25, 0x2B	; 43
 102:	09 f0       	breq	.+2      	; 0x106 <BL_DefComd+0x10>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	81 11       	cpse	r24, r1
 108:	06 c0       	rjmp	.+12     	; 0x116 <BL_DefComd+0x20>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	9d 32       	cpi	r25, 0x2D	; 45
 10e:	09 f0       	breq	.+2      	; 0x112 <BL_DefComd+0x1c>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	88 23       	and	r24, r24
 114:	41 f0       	breq	.+16     	; 0x126 <BL_DefComd+0x30>
	{
		PWMvalue = atoi(BluetoothMessage+1); //convert our string into float integer
 116:	82 e2       	ldi	r24, 0x22	; 34
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 a3 04 	call	0x946	; 0x946 <atoi>
 11e:	90 93 01 01 	sts	0x0101, r25
 122:	80 93 00 01 	sts	0x0100, r24
 126:	08 95       	ret

00000128 <__vector_18>:
uint8_t rxBufHead = 0;
uint8_t rxCount = 0;// Receive variables
uint8_t BLmesIsComplete;

ISR (USART_RX_vect)   // receive interrupt routine
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	if(rxCount < SIZE_BUF)
 138:	80 91 02 01 	lds	r24, 0x0102
 13c:	80 32       	cpi	r24, 0x20	; 32
 13e:	28 f5       	brcc	.+74     	; 0x18a <__vector_18+0x62>
	{
		BLrxBuf[rxBufTail] = UDR0;
 140:	80 91 c6 00 	lds	r24, 0x00C6
 144:	e0 91 04 01 	lds	r30, 0x0104
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e5 5d       	subi	r30, 0xD5	; 213
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	80 83       	st	Z, r24
		
		
				
		if(BLrxBuf[rxBufTail] == 0x26)// if '&'
 150:	86 32       	cpi	r24, 0x26	; 38
 152:	29 f4       	brne	.+10     	; 0x15e <__vector_18+0x36>
		//if(rxBufTail>1)
		{	
			PORTB |= (1<< PORTB5);
 154:	2d 9a       	sbi	0x05, 5	; 5
			BLmesIsComplete = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 6b 01 	sts	0x016B, r24
 15c:	07 c0       	rjmp	.+14     	; 0x16c <__vector_18+0x44>
		}
		
		else if (BLrxBuf[rxBufTail] == 'd')
 15e:	84 36       	cpi	r24, 0x64	; 100
 160:	21 f4       	brne	.+8      	; 0x16a <__vector_18+0x42>
		{
			DebugAsk = 1;	
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 05 01 	sts	0x0105, r24
 168:	01 c0       	rjmp	.+2      	; 0x16c <__vector_18+0x44>
		}
				
		else
		{
			PORTB &= ~(1 << PORTB5);
 16a:	2d 98       	cbi	0x05, 5	; 5
		}
		
		rxBufTail++;
 16c:	80 91 04 01 	lds	r24, 0x0104
 170:	8f 5f       	subi	r24, 0xFF	; 255
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 172:	80 32       	cpi	r24, 0x20	; 32
 174:	19 f0       	breq	.+6      	; 0x17c <__vector_18+0x54>
		else
		{
			PORTB &= ~(1 << PORTB5);
		}
		
		rxBufTail++;
 176:	80 93 04 01 	sts	0x0104, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <__vector_18+0x58>
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 17c:	10 92 04 01 	sts	0x0104, r1
		rxCount++;
 180:	80 91 02 01 	lds	r24, 0x0102
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 02 01 	sts	0x0102, r24
		
	}
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_20>:

ISR (USART_TX_vect)   // transmit interrupt routine
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	if(txCount > 0)
 1aa:	80 91 06 01 	lds	r24, 0x0106
 1ae:	88 23       	and	r24, r24
 1b0:	b9 f0       	breq	.+46     	; 0x1e0 <__vector_20+0x46>
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
 1b2:	e0 91 07 01 	lds	r30, 0x0107
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e5 5b       	subi	r30, 0xB5	; 181
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
 1be:	80 93 c6 00 	sts	0x00C6, r24
		txCount--;
 1c2:	80 91 06 01 	lds	r24, 0x0106
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	80 93 06 01 	sts	0x0106, r24
		txBufHead++;
 1cc:	80 91 07 01 	lds	r24, 0x0107
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 1d2:	80 32       	cpi	r24, 0x20	; 32
 1d4:	19 f0       	breq	.+6      	; 0x1dc <__vector_20+0x42>
{
	if(txCount > 0)
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
		txCount--;
		txBufHead++;
 1d6:	80 93 07 01 	sts	0x0107, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__vector_20+0x46>
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 1dc:	10 92 07 01 	sts	0x0107, r1
		
	}
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <BL_Init>:

void BL_Init(uint16_t ubrr) // initialize UART
{
	
	//set baud rate = 9600bps
	UBRR0H = (uint8_t)(ubrr>>8);
 1f0:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)ubrr;
 1f4:	80 93 c4 00 	sts	0x00C4, r24
	
	//set 1 stop bit, no parity bit and 8 bit character size
	UCSR0C = 0x06;  // (1<<UCSZ01)|(1<<UCSZ00)
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	80 93 c2 00 	sts	0x00C2, r24
	
	//enable transmission and reception 0x78
	UCSR0B |= (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1fe:	e1 ec       	ldi	r30, 0xC1	; 193
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	88 6d       	ori	r24, 0xD8	; 216
 206:	80 83       	st	Z, r24
	sei();
 208:	78 94       	sei
 20a:	08 95       	ret

0000020c <BL_PutChar>:
}

void BL_PutChar(char sym)// write next symbol into ring buffer
{
	if (((UCSR0A & (1<<UDRE0)) != 0) && (txCount == 0)) UDR0 = sym; // if udr is empty and it's first byte from
 20c:	90 91 c0 00 	lds	r25, 0x00C0
 210:	95 ff       	sbrs	r25, 5
 212:	07 c0       	rjmp	.+14     	; 0x222 <BL_PutChar+0x16>
 214:	90 91 06 01 	lds	r25, 0x0106
 218:	91 11       	cpse	r25, r1
 21a:	03 c0       	rjmp	.+6      	; 0x222 <BL_PutChar+0x16>
 21c:	80 93 c6 00 	sts	0x00C6, r24
 220:	08 95       	ret
																	// ring buffer we write it directly into udr
    else
	{
		
		if (txCount < SIZE_BUF)
 222:	90 91 06 01 	lds	r25, 0x0106
 226:	90 32       	cpi	r25, 0x20	; 32
 228:	90 f4       	brcc	.+36     	; 0x24e <BL_PutChar+0x42>
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
 22a:	20 91 08 01 	lds	r18, 0x0108
 22e:	e2 2f       	mov	r30, r18
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	e5 5b       	subi	r30, 0xB5	; 181
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	80 83       	st	Z, r24
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	90 93 06 01 	sts	0x0106, r25
			txBufTail++; // increase our pointer
 23e:	2f 5f       	subi	r18, 0xFF	; 255
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 240:	20 32       	cpi	r18, 0x20	; 32
 242:	19 f0       	breq	.+6      	; 0x24a <BL_PutChar+0x3e>
		if (txCount < SIZE_BUF)
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
			txBufTail++; // increase our pointer
 244:	20 93 08 01 	sts	0x0108, r18
 248:	08 95       	ret
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 24a:	10 92 08 01 	sts	0x0108, r1
 24e:	08 95       	ret

00000250 <BL_SendStr>:
		}
	}
}

void BL_SendStr(char *data)// send string start from the first member with address pointed by *data
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ec 01       	movw	r28, r24
	char sym;
	while(*data) // while data isn't '\0' or while data consist any data
 256:	88 81       	ld	r24, Y
 258:	88 23       	and	r24, r24
 25a:	31 f0       	breq	.+12     	; 0x268 <BL_SendStr+0x18>
 25c:	21 96       	adiw	r28, 0x01	; 1
	{
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
 25e:	0e 94 06 01 	call	0x20c	; 0x20c <BL_PutChar>
}

void BL_SendStr(char *data)// send string start from the first member with address pointed by *data
{
	char sym;
	while(*data) // while data isn't '\0' or while data consist any data
 262:	89 91       	ld	r24, Y+
 264:	81 11       	cpse	r24, r1
 266:	fb cf       	rjmp	.-10     	; 0x25e <BL_SendStr+0xe>
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
	}
	if (*data == '\0')
	{
		BL_PutChar(',');
 268:	8c e2       	ldi	r24, 0x2C	; 44
 26a:	0e 94 06 01 	call	0x20c	; 0x20c <BL_PutChar>
	}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <BL_FlushRxBuf>:

void BL_FlushRxBuf(void)  // flush our ring buffer after getting all of the array's member in out CurrentValue variable
{
	rxBufTail = 0;
 274:	10 92 04 01 	sts	0x0104, r1
	rxBufHead = 0;
 278:	10 92 03 01 	sts	0x0103, r1
	rxCount = 0;
 27c:	10 92 02 01 	sts	0x0102, r1
 280:	08 95       	ret

00000282 <BL_GetChar>:
}

uint8_t BL_GetChar(void) // take one symbol from buffer using the Head pointer
{
	uint8_t sym;
	if(rxCount > 0)
 282:	80 91 02 01 	lds	r24, 0x0102
 286:	88 23       	and	r24, r24
 288:	a1 f0       	breq	.+40     	; 0x2b2 <BL_GetChar+0x30>
	{
		sym	= BLrxBuf[rxBufHead];
 28a:	90 91 03 01 	lds	r25, 0x0103
 28e:	e9 2f       	mov	r30, r25
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	e5 5d       	subi	r30, 0xD5	; 213
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	20 81       	ld	r18, Z
		rxCount --;
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	80 93 02 01 	sts	0x0102, r24
		rxBufHead++;
 29e:	9f 5f       	subi	r25, 0xFF	; 255
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 2a0:	90 32       	cpi	r25, 0x20	; 32
 2a2:	21 f0       	breq	.+8      	; 0x2ac <BL_GetChar+0x2a>
	uint8_t sym;
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
 2a4:	90 93 03 01 	sts	0x0103, r25
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
		return sym;
 2a8:	82 2f       	mov	r24, r18
 2aa:	08 95       	ret
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 2ac:	10 92 03 01 	sts	0x0103, r1
		return sym;
 2b0:	82 2f       	mov	r24, r18
	}
	return 0;
}
 2b2:	08 95       	ret

000002b4 <shift_and_mul_utoa16>:
char *StrScaleDetectptr;
char *StrPWMValueptr;
char *StrOCRptr;

char* shift_and_mul_utoa16(uint16_t n, char *buffer)
{
 2b4:	dc 01       	movw	r26, r24
 2b6:	fb 01       	movw	r30, r22
	uint8_t d4, d3, d2, d1, q, d0;

	d1 = (n>>4)  & 0xF;
 2b8:	9c 01       	movw	r18, r24
 2ba:	32 95       	swap	r19
 2bc:	22 95       	swap	r18
 2be:	2f 70       	andi	r18, 0x0F	; 15
 2c0:	23 27       	eor	r18, r19
 2c2:	3f 70       	andi	r19, 0x0F	; 15
 2c4:	23 27       	eor	r18, r19
 2c6:	62 2f       	mov	r22, r18
 2c8:	6f 70       	andi	r22, 0x0F	; 15
	d2 = (n>>8)  & 0xF;
 2ca:	9b 2f       	mov	r25, r27
 2cc:	9f 70       	andi	r25, 0x0F	; 15
	d3 = (n>>12) & 0xF;
 2ce:	9d 01       	movw	r18, r26
 2d0:	23 2f       	mov	r18, r19
 2d2:	33 27       	eor	r19, r19
 2d4:	22 95       	swap	r18
 2d6:	2f 70       	andi	r18, 0x0F	; 15

	d0 = 6*(d3 + d2 + d1) + (n & 0xF);
 2d8:	a9 01       	movw	r20, r18
 2da:	49 0f       	add	r20, r25
 2dc:	51 1d       	adc	r21, r1
 2de:	46 0f       	add	r20, r22
 2e0:	51 1d       	adc	r21, r1
 2e2:	84 2f       	mov	r24, r20
 2e4:	88 0f       	add	r24, r24
 2e6:	48 0f       	add	r20, r24
 2e8:	44 0f       	add	r20, r20
 2ea:	af 70       	andi	r26, 0x0F	; 15
 2ec:	4a 0f       	add	r20, r26
	q = (d0 * 0xCD) >> 11;
 2ee:	5d ec       	ldi	r21, 0xCD	; 205
 2f0:	54 9f       	mul	r21, r20
 2f2:	d0 01       	movw	r26, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8b 2f       	mov	r24, r27
 2f8:	85 95       	asr	r24
 2fa:	85 95       	asr	r24
 2fc:	85 95       	asr	r24
	d0 = d0 - 10*q;

	d1 = q + 9*d3 + 5*d2 + d1;
 2fe:	32 2f       	mov	r19, r18
 300:	33 0f       	add	r19, r19
 302:	33 0f       	add	r19, r19
 304:	33 0f       	add	r19, r19
 306:	32 0f       	add	r19, r18
 308:	63 0f       	add	r22, r19
 30a:	39 2f       	mov	r19, r25
 30c:	33 0f       	add	r19, r19
 30e:	33 0f       	add	r19, r19
 310:	39 0f       	add	r19, r25
 312:	63 0f       	add	r22, r19
 314:	36 2f       	mov	r19, r22
 316:	38 0f       	add	r19, r24
	q = (d1 * 0xCD) >> 11;
 318:	53 9f       	mul	r21, r19
 31a:	b0 01       	movw	r22, r0
 31c:	11 24       	eor	r1, r1
 31e:	57 2f       	mov	r21, r23
 320:	55 95       	asr	r21
 322:	55 95       	asr	r21
 324:	55 95       	asr	r21
	d1 = d1 - 10*q;

	d2 = q + 2*d2;
 326:	99 0f       	add	r25, r25
 328:	95 0f       	add	r25, r21
	q = (d2 * 0x1A) >> 8;
 32a:	6a e1       	ldi	r22, 0x1A	; 26
 32c:	69 9f       	mul	r22, r25
 32e:	d0 01       	movw	r26, r0
 330:	11 24       	eor	r1, r1
	d2 = d2 - 10*q;

	d3 = q + 4*d3;
 332:	22 0f       	add	r18, r18
 334:	22 0f       	add	r18, r18
 336:	2b 0f       	add	r18, r27
	d4 = (d3 * 0x1A) >> 8;
 338:	62 9f       	mul	r22, r18
 33a:	b0 01       	movw	r22, r0
 33c:	11 24       	eor	r1, r1
	d3 = d3 - 10*d4;

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
 33e:	a0 e3       	ldi	r26, 0x30	; 48
 340:	a7 0f       	add	r26, r23
 342:	a0 83       	st	Z, r26
 344:	20 5d       	subi	r18, 0xD0	; 208
	q = (d2 * 0x1A) >> 8;
	d2 = d2 - 10*q;

	d3 = q + 4*d3;
	d4 = (d3 * 0x1A) >> 8;
	d3 = d3 - 10*d4;
 346:	77 0f       	add	r23, r23
 348:	67 2f       	mov	r22, r23
 34a:	66 0f       	add	r22, r22
 34c:	66 0f       	add	r22, r22
 34e:	67 0f       	add	r22, r23

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
 350:	26 1b       	sub	r18, r22
 352:	21 83       	std	Z+1, r18	; 0x01
 354:	90 5d       	subi	r25, 0xD0	; 208
	q = (d1 * 0xCD) >> 11;
	d1 = d1 - 10*q;

	d2 = q + 2*d2;
	q = (d2 * 0x1A) >> 8;
	d2 = d2 - 10*q;
 356:	6b 2f       	mov	r22, r27
 358:	66 0f       	add	r22, r22
 35a:	26 2f       	mov	r18, r22
 35c:	22 0f       	add	r18, r18
 35e:	22 0f       	add	r18, r18
 360:	26 0f       	add	r18, r22
	d3 = d3 - 10*d4;

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
	*ptr++ = ( d2 + '0' );
 362:	92 1b       	sub	r25, r18
 364:	92 83       	std	Z+2, r25	; 0x02
 366:	30 5d       	subi	r19, 0xD0	; 208
	q = (d0 * 0xCD) >> 11;
	d0 = d0 - 10*q;

	d1 = q + 9*d3 + 5*d2 + d1;
	q = (d1 * 0xCD) >> 11;
	d1 = d1 - 10*q;
 368:	95 2f       	mov	r25, r21
 36a:	99 0f       	add	r25, r25
 36c:	29 2f       	mov	r18, r25
 36e:	22 0f       	add	r18, r18
 370:	22 0f       	add	r18, r18
 372:	92 0f       	add	r25, r18

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
	*ptr++ = ( d2 + '0' );
	*ptr++ = ( d1 + '0' );
 374:	39 1b       	sub	r19, r25
 376:	33 83       	std	Z+3, r19	; 0x03
 378:	40 5d       	subi	r20, 0xD0	; 208
	d2 = (n>>8)  & 0xF;
	d3 = (n>>12) & 0xF;

	d0 = 6*(d3 + d2 + d1) + (n & 0xF);
	q = (d0 * 0xCD) >> 11;
	d0 = d0 - 10*q;
 37a:	88 0f       	add	r24, r24
 37c:	98 2f       	mov	r25, r24
 37e:	99 0f       	add	r25, r25
 380:	99 0f       	add	r25, r25
 382:	89 0f       	add	r24, r25
	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
	*ptr++ = ( d2 + '0' );
	*ptr++ = ( d1 + '0' );
	*ptr++ = ( d0 + '0' );
 384:	48 1b       	sub	r20, r24
 386:	44 83       	std	Z+4, r20	; 0x04
	*ptr = 0;
 388:	15 82       	std	Z+5, r1	; 0x05

	while(buffer[0] == '0') ++buffer;
 38a:	a0 33       	cpi	r26, 0x30	; 48
 38c:	49 f4       	brne	.+18     	; 0x3a0 <shift_and_mul_utoa16+0xec>
 38e:	9f 01       	movw	r18, r30
 390:	2f 5f       	subi	r18, 0xFF	; 255
 392:	3f 4f       	sbci	r19, 0xFF	; 255
 394:	f9 01       	movw	r30, r18
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	80 81       	ld	r24, Z
 39c:	80 33       	cpi	r24, 0x30	; 48
 39e:	d1 f3       	breq	.-12     	; 0x394 <shift_and_mul_utoa16+0xe0>
	return buffer;
}
 3a0:	cf 01       	movw	r24, r30
 3a2:	08 95       	ret

000003a4 <main>:

int main(void)
{
	SW_RX_Init(); 
 3a4:	0e 94 2d 03 	call	0x65a	; 0x65a <SW_RX_Init>
	BL_Init(MYUBRR);
 3a8:	87 e6       	ldi	r24, 0x67	; 103
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <BL_Init>
	PWM_Init();
 3b0:	0e 94 b9 02 	call	0x572	; 0x572 <PWM_Init>
			}
		
		if(DebugAsk)
			{
				StrScaleDetectptr = shift_and_mul_utoa16 (ScaleValueDetect, StrScaleValueDetect) - 1;
				*StrScaleDetectptr = 's';
 3b4:	0f 2e       	mov	r0, r31
 3b6:	f3 e7       	ldi	r31, 0x73	; 115
 3b8:	bf 2e       	mov	r11, r31
 3ba:	f0 2d       	mov	r31, r0
				BL_SendStr(StrScaleDetectptr);
				
				StrPWMValueptr = shift_and_mul_utoa16 (PWMvalue, StrPWMValue) - 1;
				*StrPWMValueptr = 'p';
 3bc:	00 e7       	ldi	r16, 0x70	; 112
				BL_SendStr(StrPWMValueptr);
				
				StrOCRptr = shift_and_mul_utoa16 (OCR2A, StrOCR) - 1;
 3be:	c3 eb       	ldi	r28, 0xB3	; 179
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
				*StrOCRptr = 'o';
 3c2:	1f e6       	ldi	r17, 0x6F	; 111
	BL_Init(MYUBRR);
	PWM_Init();
		
    while (1) 
    {
		if(SWrxDataPending)
 3c4:	80 91 b1 01 	lds	r24, 0x01B1
 3c8:	81 11       	cpse	r24, r1
			{
				SW_RX_Fill_Buffer();
 3ca:	0e 94 47 03 	call	0x68e	; 0x68e <SW_RX_Fill_Buffer>
			}
		if(SWmesIsComplete)
 3ce:	80 91 b2 01 	lds	r24, 0x01B2
 3d2:	88 23       	and	r24, r24
 3d4:	79 f1       	breq	.+94     	; 0x434 <main+0x90>
			{

			SW_GetMessage();
 3d6:	0e 94 8e 03 	call	0x71c	; 0x71c <SW_GetMessage>
			ScaleValue = atof(SWscaleValueForBL+1);
 3da:	84 eb       	ldi	r24, 0xB4	; 180
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 9f 04 	call	0x93e	; 0x93e <atof>
 3e2:	6b 01       	movw	r12, r22
 3e4:	7c 01       	movw	r14, r24
 3e6:	60 93 95 01 	sts	0x0195, r22
 3ea:	70 93 96 01 	sts	0x0196, r23
 3ee:	80 93 97 01 	sts	0x0197, r24
 3f2:	90 93 98 01 	sts	0x0198, r25
			
			//OCR2A = ScaleValue;
			if ((ScaleValue > 0) && !(ScaleValue == ScaleValueChange))
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a9 01       	movw	r20, r18
 3fc:	0e 94 9a 04 	call	0x934	; 0x934 <__gesf2>
 400:	18 16       	cp	r1, r24
 402:	b4 f4       	brge	.+44     	; 0x430 <main+0x8c>
 404:	20 91 6c 01 	lds	r18, 0x016C
 408:	30 91 6d 01 	lds	r19, 0x016D
 40c:	40 91 6e 01 	lds	r20, 0x016E
 410:	50 91 6f 01 	lds	r21, 0x016F
 414:	c7 01       	movw	r24, r14
 416:	b6 01       	movw	r22, r12
 418:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__cmpsf2>
 41c:	88 23       	and	r24, r24
 41e:	41 f0       	breq	.+16     	; 0x430 <main+0x8c>
			{
				ScaleValueChange = ScaleValue;
 420:	c0 92 6c 01 	sts	0x016C, r12
 424:	d0 92 6d 01 	sts	0x016D, r13
 428:	e0 92 6e 01 	sts	0x016E, r14
 42c:	f0 92 6f 01 	sts	0x016F, r15
				//BL_SendStr (SWscaleValueForBL);
			}
			SWmesIsComplete = 0;		
 430:	10 92 b2 01 	sts	0x01B2, r1
			
			}
				
			
						
		if (BLmesIsComplete) 
 434:	80 91 6b 01 	lds	r24, 0x016B
 438:	88 23       	and	r24, r24
 43a:	21 f0       	breq	.+8      	; 0x444 <main+0xa0>
			{
			//BL_SendStr (BluetoothMessage);
						
			BL_DefComd(); // defining gotten message from bluetooth (smartphone)
 43c:	0e 94 7b 00 	call	0xf6	; 0xf6 <BL_DefComd>
			BLmesIsComplete = 0;  // reset flag "complete message from smartphone"
 440:	10 92 6b 01 	sts	0x016B, r1
			}
		
		if(DebugAsk)
 444:	80 91 05 01 	lds	r24, 0x0105
 448:	88 23       	and	r24, r24
 44a:	09 f4       	brne	.+2      	; 0x44e <main+0xaa>
 44c:	3f c0       	rjmp	.+126    	; 0x4cc <main+0x128>
			{
				StrScaleDetectptr = shift_and_mul_utoa16 (ScaleValueDetect, StrScaleValueDetect) - 1;
 44e:	60 e7       	ldi	r22, 0x70	; 112
 450:	71 e0       	ldi	r23, 0x01	; 1
 452:	80 91 93 01 	lds	r24, 0x0193
 456:	90 91 94 01 	lds	r25, 0x0194
 45a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <shift_and_mul_utoa16>
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	90 93 92 01 	sts	0x0192, r25
 464:	80 93 91 01 	sts	0x0191, r24
				*StrScaleDetectptr = 's';
 468:	fc 01       	movw	r30, r24
 46a:	b0 82       	st	Z, r11
				BL_SendStr(StrScaleDetectptr);
 46c:	80 91 91 01 	lds	r24, 0x0191
 470:	90 91 92 01 	lds	r25, 0x0192
 474:	0e 94 28 01 	call	0x250	; 0x250 <BL_SendStr>
				
				StrPWMValueptr = shift_and_mul_utoa16 (PWMvalue, StrPWMValue) - 1;
 478:	69 e9       	ldi	r22, 0x99	; 153
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	80 91 00 01 	lds	r24, 0x0100
 480:	90 91 01 01 	lds	r25, 0x0101
 484:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <shift_and_mul_utoa16>
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	90 93 88 01 	sts	0x0188, r25
 48e:	80 93 87 01 	sts	0x0187, r24
				*StrPWMValueptr = 'p';
 492:	fc 01       	movw	r30, r24
 494:	00 83       	st	Z, r16
				BL_SendStr(StrPWMValueptr);
 496:	80 91 87 01 	lds	r24, 0x0187
 49a:	90 91 88 01 	lds	r25, 0x0188
 49e:	0e 94 28 01 	call	0x250	; 0x250 <BL_SendStr>
				
				StrOCRptr = shift_and_mul_utoa16 (OCR2A, StrOCR) - 1;
 4a2:	88 81       	ld	r24, Y
 4a4:	69 e8       	ldi	r22, 0x89	; 137
 4a6:	71 e0       	ldi	r23, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <shift_and_mul_utoa16>
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	90 93 90 01 	sts	0x0190, r25
 4b4:	80 93 8f 01 	sts	0x018F, r24
				*StrOCRptr = 'o';
 4b8:	fc 01       	movw	r30, r24
 4ba:	10 83       	st	Z, r17
				BL_SendStr(StrOCRptr);
 4bc:	80 91 8f 01 	lds	r24, 0x018F
 4c0:	90 91 90 01 	lds	r25, 0x0190
 4c4:	0e 94 28 01 	call	0x250	; 0x250 <BL_SendStr>

				DebugAsk = 0;
 4c8:	10 92 05 01 	sts	0x0105, r1
			}
				
		if (PWMvalue && (ScaleValue > 20))
 4cc:	80 91 00 01 	lds	r24, 0x0100
 4d0:	90 91 01 01 	lds	r25, 0x0101
 4d4:	89 2b       	or	r24, r25
 4d6:	01 f1       	breq	.+64     	; 0x518 <main+0x174>
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	40 ea       	ldi	r20, 0xA0	; 160
 4de:	51 e4       	ldi	r21, 0x41	; 65
 4e0:	60 91 95 01 	lds	r22, 0x0195
 4e4:	70 91 96 01 	lds	r23, 0x0196
 4e8:	80 91 97 01 	lds	r24, 0x0197
 4ec:	90 91 98 01 	lds	r25, 0x0198
 4f0:	0e 94 9a 04 	call	0x934	; 0x934 <__gesf2>
 4f4:	18 16       	cp	r1, r24
 4f6:	84 f4       	brge	.+32     	; 0x518 <main+0x174>
				{
					PWM_PinValue();   // write gotten correction value from smartphone to OCR2A for change OC2A pin PWM
 4f8:	0e 94 c4 02 	call	0x588	; 0x588 <PWM_PinValue>
					ScaleValueDetect = ScaleValue; 
 4fc:	60 91 95 01 	lds	r22, 0x0195
 500:	70 91 96 01 	lds	r23, 0x0196
 504:	80 91 97 01 	lds	r24, 0x0197
 508:	90 91 98 01 	lds	r25, 0x0198
 50c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fixsfsi>
 510:	70 93 94 01 	sts	0x0194, r23
 514:	60 93 93 01 	sts	0x0193, r22
					//PWMChanged = 0;
				}	
				
		if((ScaleValue < (ScaleValueDetect - 2)) && (ScaleValue > 5))
 518:	c0 90 95 01 	lds	r12, 0x0195
 51c:	d0 90 96 01 	lds	r13, 0x0196
 520:	e0 90 97 01 	lds	r14, 0x0197
 524:	f0 90 98 01 	lds	r15, 0x0198
 528:	80 91 93 01 	lds	r24, 0x0193
 52c:	90 91 94 01 	lds	r25, 0x0194
 530:	bc 01       	movw	r22, r24
 532:	62 50       	subi	r22, 0x02	; 2
 534:	71 09       	sbc	r23, r1
 536:	07 2e       	mov	r0, r23
 538:	00 0c       	add	r0, r0
 53a:	88 0b       	sbc	r24, r24
 53c:	99 0b       	sbc	r25, r25
 53e:	0e 94 12 04 	call	0x824	; 0x824 <__floatsisf>
 542:	a7 01       	movw	r20, r14
 544:	96 01       	movw	r18, r12
 546:	0e 94 9a 04 	call	0x934	; 0x934 <__gesf2>
 54a:	18 16       	cp	r1, r24
 54c:	0c f0       	brlt	.+2      	; 0x550 <main+0x1ac>
 54e:	3a cf       	rjmp	.-396    	; 0x3c4 <main+0x20>
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	40 ea       	ldi	r20, 0xA0	; 160
 556:	50 e4       	ldi	r21, 0x40	; 64
 558:	c7 01       	movw	r24, r14
 55a:	b6 01       	movw	r22, r12
 55c:	0e 94 9a 04 	call	0x934	; 0x934 <__gesf2>
 560:	18 16       	cp	r1, r24
 562:	0c f0       	brlt	.+2      	; 0x566 <main+0x1c2>
 564:	2f cf       	rjmp	.-418    	; 0x3c4 <main+0x20>
		{
			OCR2A = 0;
 566:	18 82       	st	Y, r1
			ScaleValueDetect = 0;
 568:	10 92 94 01 	sts	0x0194, r1
 56c:	10 92 93 01 	sts	0x0193, r1
 570:	29 cf       	rjmp	.-430    	; 0x3c4 <main+0x20>

00000572 <PWM_Init>:
#include "BLdefComd.h"


void PWM_Init()
{
	DDRB = (1 << PORTB3)|(1 << PORTB5);// set up pin portb3 like output 
 572:	88 e2       	ldi	r24, 0x28	; 40
 574:	84 b9       	out	0x04, r24	; 4
	TCCR2A = (1 << WGM21)|(1 << WGM20)|(1<< COM2A1);
 576:	83 e8       	ldi	r24, 0x83	; 131
 578:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1<<CS20);
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 0x00;
 582:	10 92 b3 00 	sts	0x00B3, r1
 586:	08 95       	ret

00000588 <PWM_PinValue>:
}


void PWM_PinValue()
{
	OCR2A = PWMvalue;		
 588:	80 91 00 01 	lds	r24, 0x0100
 58c:	80 93 b3 00 	sts	0x00B3, r24
 590:	08 95       	ret

00000592 <__vector_1>:
	SWrxBufTail = 0;
	
}

ISR (INT0_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	8f 93       	push	r24
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
	SWnumBit = 0;
 5a2:	10 92 09 01 	sts	0x0109, r1
	DISABLE_EXTERNAL0_INTERRUPT ();		// disable interrupt during the data bits
 5a6:	e8 98       	cbi	0x1d, 0	; 29
	
	DISABLE_TIMER_INTERRUPT();			//disable timer to change its registers
 5a8:	ee e6       	ldi	r30, 0x6E	; 110
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	8d 7f       	andi	r24, 0xFD	; 253
 5b0:	80 83       	st	Z, r24
	TCCR0B &= ~( 1 << CS01 );			//reset prescaler counter
 5b2:	85 b5       	in	r24, 0x25	; 37
 5b4:	8d 7f       	andi	r24, 0xFD	; 253
 5b6:	85 bd       	out	0x25, r24	; 37
	
	TCNT0 = INTERRUPT_EXEC_CYCL;		// Clear counter register. Include time to run interrupt rutine
 5b8:	89 e0       	ldi	r24, 0x09	; 9
 5ba:	86 bd       	out	0x26, r24	; 38
	
	TCCR0B |= ( 1 << CS01 );			// Start prescaler clock
 5bc:	85 b5       	in	r24, 0x25	; 37
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = TICKSFIRST;			// Count one and half period into the future
 5c2:	87 e6       	ldi	r24, 0x67	; 103
 5c4:	87 bd       	out	0x27, r24	; 39
	
	SW_RX_Bit_Count = 0;				// Clear received bit counter.
 5c6:	10 92 1f 01 	sts	0x011F, r1
	
	
	ENABLE_TIMER_INTERRUPT();			// Enable timer0 interrupt on again
 5ca:	80 81       	ld	r24, Z
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	80 83       	st	Z, r24
	CLEAR_TIMER_INTERRUPT();			// Clear interrupt bits
 5d0:	a9 9a       	sbi	0x15, 1	; 21
}
 5d2:	ff 91       	pop	r31
 5d4:	ef 91       	pop	r30
 5d6:	8f 91       	pop	r24
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	8f 93       	push	r24
 5ee:	ef 93       	push	r30
 5f0:	ff 93       	push	r31
	if(!SWnumBit)
 5f2:	80 91 09 01 	lds	r24, 0x0109
 5f6:	81 11       	cpse	r24, r1
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <__vector_14+0x24>
	{
		SWnumBit = 1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 09 01 	sts	0x0109, r24
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 600:	80 ed       	ldi	r24, 0xD0	; 208
 602:	87 bd       	out	0x27, r24	; 39
 604:	22 c0       	rjmp	.+68     	; 0x64a <__vector_14+0x68>
	}
	else
	{
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 606:	80 ed       	ldi	r24, 0xD0	; 208
 608:	87 bd       	out	0x27, r24	; 39
		// Receiving lsb first
		if( SW_RX_Bit_Count < 8 )
 60a:	80 91 1f 01 	lds	r24, 0x011F
 60e:	88 30       	cpi	r24, 0x08	; 8
 610:	90 f4       	brcc	.+36     	; 0x636 <__vector_14+0x54>
		{
			SW_RX_Bit_Count++;
 612:	80 91 1f 01 	lds	r24, 0x011F
 616:	8f 5f       	subi	r24, 0xFF	; 255
 618:	80 93 1f 01 	sts	0x011F, r24
			SW_RX_Data = (SW_RX_Data>>1); // Shift due to receiving lsb first
 61c:	80 91 20 01 	lds	r24, 0x0120
 620:	86 95       	lsr	r24
 622:	80 93 20 01 	sts	0x0120, r24
			if ( GET_RX_PIN() != 0 )
 626:	4a 9b       	sbis	0x09, 2	; 9
 628:	10 c0       	rjmp	.+32     	; 0x64a <__vector_14+0x68>
			{
				SW_RX_Data |= 0x80;		  // If a logical 1 is read, let the data mirror this
 62a:	80 91 20 01 	lds	r24, 0x0120
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	80 93 20 01 	sts	0x0120, r24
 634:	0a c0       	rjmp	.+20     	; 0x64a <__vector_14+0x68>
			}
		}
		else
		{
			SWrxDataPending = 1;		// Enter data pending when one byte is received
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	80 93 b1 01 	sts	0x01B1, r24
			DISABLE_TIMER_INTERRUPT();	// Disable this interrupt
 63c:	ee e6       	ldi	r30, 0x6E	; 110
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	8d 7f       	andi	r24, 0xFD	; 253
 644:	80 83       	st	Z, r24
			EIFR |= (1 << INTF0);	// Reset flag not to enter the ISR one extra time
 646:	e0 9a       	sbi	0x1c, 0	; 28
			ENABLE_EXTERNAL0_INTERRUPT(); // Enable interrupt to receive more bytes.
 648:	e8 9a       	sbi	0x1d, 0	; 29
		}
	 }
}
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	8f 91       	pop	r24
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <SW_RX_Init>:

void SW_RX_Init(void)
{
	//PORT
	PORTD |= ( 1<<SW_RX_PIN);	// RX_PIN is input, tri-stated
 65a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// Timer0
	DISABLE_TIMER_INTERRUPT();
 65c:	ee e6       	ldi	r30, 0x6E	; 110
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	8d 7f       	andi	r24, 0xFD	; 253
 664:	80 83       	st	Z, r24
	TCCR0A = 0x00;		// Reset control register
 666:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;		// Reset presclaler
 668:	15 bc       	out	0x25, r1	; 37
	TCCR0A |= (1 << WGM01);  //Timer in CTC mode
 66a:	84 b5       	in	r24, 0x24	; 36
 66c:	82 60       	ori	r24, 0x02	; 2
 66e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);	 //divide by 8 prescaler
 670:	85 b5       	in	r24, 0x25	; 37
 672:	82 60       	ori	r24, 0x02	; 2
 674:	85 bd       	out	0x25, r24	; 37
	
	//External interrupt
	EIFR= 0x00;				//Init
 676:	1c ba       	out	0x1c, r1	; 28
	EICRA |= ( 1<<ISC01 );	//Interrupt sense control: falling edge
 678:	e9 e6       	ldi	r30, 0x69	; 105
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	82 60       	ori	r24, 0x02	; 2
 680:	80 83       	st	Z, r24
	ENABLE_EXTERNAL0_INTERRUPT();  // Turn external interrupt on
 682:	e8 9a       	sbi	0x1d, 0	; 29
	
	CLEAR_TIMER_INTERRUPT();
 684:	a9 9a       	sbi	0x15, 1	; 21
	//Internal State Variable
	SWrxDataPending = 0;
 686:	10 92 b1 01 	sts	0x01B1, r1
	sei();
 68a:	78 94       	sei
 68c:	08 95       	ret

0000068e <SW_RX_Fill_Buffer>:
	
}

void SW_RX_Fill_Buffer(void)
{
		if(SWrxCount < SW_SIZE_BUF)
 68e:	80 91 0a 01 	lds	r24, 0x010A
 692:	82 31       	cpi	r24, 0x12	; 18
 694:	28 f5       	brcc	.+74     	; 0x6e0 <SW_RX_Fill_Buffer+0x52>
		{
			SWrxBuf[SWrxBufTail] = SW_RX_Data;
 696:	e0 91 0c 01 	lds	r30, 0x010C
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 91 20 01 	lds	r24, 0x0120
 6a0:	e3 5f       	subi	r30, 0xF3	; 243
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	80 83       	st	Z, r24
			SWrxDataPending = 0;
 6a6:	10 92 b1 01 	sts	0x01B1, r1
			if (SWrxBuf[SWrxBufTail] == 0x0A)
 6aa:	e0 91 0c 01 	lds	r30, 0x010C
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	e3 5f       	subi	r30, 0xF3	; 243
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	80 81       	ld	r24, Z
 6b6:	8a 30       	cpi	r24, 0x0A	; 10
 6b8:	19 f4       	brne	.+6      	; 0x6c0 <SW_RX_Fill_Buffer+0x32>
			{
				SWmesIsComplete = 1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	80 93 b2 01 	sts	0x01B2, r24
			}
			SWrxBufTail++;
 6c0:	80 91 0c 01 	lds	r24, 0x010C
 6c4:	8f 5f       	subi	r24, 0xFF	; 255
 6c6:	80 93 0c 01 	sts	0x010C, r24
			if(SWrxBufTail == SW_SIZE_BUF) SWrxBufTail = 0;
 6ca:	80 91 0c 01 	lds	r24, 0x010C
 6ce:	82 31       	cpi	r24, 0x12	; 18
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <SW_RX_Fill_Buffer+0x48>
 6d2:	10 92 0c 01 	sts	0x010C, r1
			SWrxCount++;
 6d6:	80 91 0a 01 	lds	r24, 0x010A
 6da:	8f 5f       	subi	r24, 0xFF	; 255
 6dc:	80 93 0a 01 	sts	0x010A, r24
 6e0:	08 95       	ret

000006e2 <SW_GetChar>:
}

char SW_GetChar(void)
{
	char SWsym;
	if (SWrxCount > 0)
 6e2:	80 91 0a 01 	lds	r24, 0x010A
 6e6:	88 23       	and	r24, r24
 6e8:	b9 f0       	breq	.+46     	; 0x718 <SW_GetChar+0x36>
	{
		SWsym = SWrxBuf[SWrxBufHead];
 6ea:	e0 91 0b 01 	lds	r30, 0x010B
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	e3 5f       	subi	r30, 0xF3	; 243
 6f2:	fe 4f       	sbci	r31, 0xFE	; 254
 6f4:	80 81       	ld	r24, Z
		SWrxCount--;
 6f6:	90 91 0a 01 	lds	r25, 0x010A
 6fa:	91 50       	subi	r25, 0x01	; 1
 6fc:	90 93 0a 01 	sts	0x010A, r25
		SWrxBufHead++;
 700:	90 91 0b 01 	lds	r25, 0x010B
 704:	9f 5f       	subi	r25, 0xFF	; 255
 706:	90 93 0b 01 	sts	0x010B, r25
		if(SWrxBufHead == SW_SIZE_BUF) SWrxBufHead = 0;
 70a:	90 91 0b 01 	lds	r25, 0x010B
 70e:	92 31       	cpi	r25, 0x12	; 18
 710:	21 f4       	brne	.+8      	; 0x71a <SW_GetChar+0x38>
 712:	10 92 0b 01 	sts	0x010B, r1
 716:	08 95       	ret
		return SWsym;
	}
	else
	{
		return 0;
 718:	80 e0       	ldi	r24, 0x00	; 0
	}

}
 71a:	08 95       	ret

0000071c <SW_GetMessage>:

void SW_GetMessage(void)
{
 71c:	cf 92       	push	r12
 71e:	df 92       	push	r13
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	11 e0       	ldi	r17, 0x01	; 1
 72e:	c0 e0       	ldi	r28, 0x00	; 0
 730:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 732:	dd 24       	eor	r13, r13
 734:	d3 94       	inc	r13
	{
		char SWvalue = SW_GetChar();
		SWrxMessage[i] = SWvalue;
		SWscaleValueForBL[0] = 'v';
 736:	0f 2e       	mov	r0, r31
 738:	f3 eb       	ldi	r31, 0xB3	; 179
 73a:	ef 2e       	mov	r14, r31
 73c:	f1 e0       	ldi	r31, 0x01	; 1
 73e:	ff 2e       	mov	r15, r31
 740:	f0 2d       	mov	r31, r0
 742:	06 e7       	ldi	r16, 0x76	; 118
				SWscaleValueForBL[j] = SWvalue;
				j++;
			}
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
 744:	0f 2e       	mov	r0, r31
 746:	fd e0       	ldi	r31, 0x0D	; 13
 748:	cf 2e       	mov	r12, r31
 74a:	f0 2d       	mov	r31, r0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <SW_GetMessage+0x36>
 74e:	21 96       	adiw	r28, 0x01	; 1
 750:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
	{
		char SWvalue = SW_GetChar();
 752:	0e 94 71 03 	call	0x6e2	; 0x6e2 <SW_GetChar>
		SWrxMessage[i] = SWvalue;
 756:	fe 01       	movw	r30, r28
 758:	e1 56       	subi	r30, 0x61	; 97
 75a:	fe 4f       	sbci	r31, 0xFE	; 254
 75c:	80 83       	st	Z, r24
		SWscaleValueForBL[0] = 'v';
 75e:	f7 01       	movw	r30, r14
 760:	00 83       	st	Z, r16
 762:	9c 2f       	mov	r25, r28
 764:	2c 2f       	mov	r18, r28
 766:	27 50       	subi	r18, 0x07	; 7
		if ( (i>6) && (i<14) && (!(SWrxMessage[i] == ' ')))
 768:	27 30       	cpi	r18, 0x07	; 7
 76a:	60 f4       	brcc	.+24     	; 0x784 <SW_GetMessage+0x68>
 76c:	fe 01       	movw	r30, r28
 76e:	e1 56       	subi	r30, 0x61	; 97
 770:	fe 4f       	sbci	r31, 0xFE	; 254
 772:	20 81       	ld	r18, Z
 774:	20 32       	cpi	r18, 0x20	; 32
 776:	31 f0       	breq	.+12     	; 0x784 <SW_GetMessage+0x68>
			{
				SWscaleValueForBL[j] = SWvalue;
 778:	ed 2d       	mov	r30, r13
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	ed 54       	subi	r30, 0x4D	; 77
 77e:	fe 4f       	sbci	r31, 0xFE	; 254
 780:	80 83       	st	Z, r24
				j++;
 782:	d3 94       	inc	r13
			}
		if (i==14)
 784:	9e 30       	cpi	r25, 0x0E	; 14
 786:	31 f4       	brne	.+12     	; 0x794 <SW_GetMessage+0x78>
		{
			SWscaleValueForBL[j] = 0x0D;
 788:	ed 2d       	mov	r30, r13
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	ed 54       	subi	r30, 0x4D	; 77
 78e:	fe 4f       	sbci	r31, 0xFE	; 254
 790:	c0 82       	st	Z, r12
 792:	dd cf       	rjmp	.-70     	; 0x74e <SW_GetMessage+0x32>

void SW_GetMessage(void)
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 794:	12 31       	cpi	r17, 0x12	; 18
 796:	d8 f2       	brcs	.-74     	; 0x74e <SW_GetMessage+0x32>
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
		}
	}
}
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	ff 90       	pop	r15
 7a2:	ef 90       	pop	r14
 7a4:	df 90       	pop	r13
 7a6:	cf 90       	pop	r12
 7a8:	08 95       	ret

000007aa <__cmpsf2>:
 7aa:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_cmp>
 7ae:	08 f4       	brcc	.+2      	; 0x7b2 <__cmpsf2+0x8>
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	08 95       	ret

000007b4 <__fixsfsi>:
 7b4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fixunssfsi>
 7b8:	68 94       	set
 7ba:	b1 11       	cpse	r27, r1
 7bc:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_szero>
 7c0:	08 95       	ret

000007c2 <__fixunssfsi>:
 7c2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_splitA>
 7c6:	88 f0       	brcs	.+34     	; 0x7ea <__fixunssfsi+0x28>
 7c8:	9f 57       	subi	r25, 0x7F	; 127
 7ca:	98 f0       	brcs	.+38     	; 0x7f2 <__fixunssfsi+0x30>
 7cc:	b9 2f       	mov	r27, r25
 7ce:	99 27       	eor	r25, r25
 7d0:	b7 51       	subi	r27, 0x17	; 23
 7d2:	b0 f0       	brcs	.+44     	; 0x800 <__fixunssfsi+0x3e>
 7d4:	e1 f0       	breq	.+56     	; 0x80e <__fixunssfsi+0x4c>
 7d6:	66 0f       	add	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	1a f0       	brmi	.+6      	; 0x7e6 <__fixunssfsi+0x24>
 7e0:	ba 95       	dec	r27
 7e2:	c9 f7       	brne	.-14     	; 0x7d6 <__fixunssfsi+0x14>
 7e4:	14 c0       	rjmp	.+40     	; 0x80e <__fixunssfsi+0x4c>
 7e6:	b1 30       	cpi	r27, 0x01	; 1
 7e8:	91 f0       	breq	.+36     	; 0x80e <__fixunssfsi+0x4c>
 7ea:	0e 94 93 04 	call	0x926	; 0x926 <__fp_zero>
 7ee:	b1 e0       	ldi	r27, 0x01	; 1
 7f0:	08 95       	ret
 7f2:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_zero>
 7f6:	67 2f       	mov	r22, r23
 7f8:	78 2f       	mov	r23, r24
 7fa:	88 27       	eor	r24, r24
 7fc:	b8 5f       	subi	r27, 0xF8	; 248
 7fe:	39 f0       	breq	.+14     	; 0x80e <__fixunssfsi+0x4c>
 800:	b9 3f       	cpi	r27, 0xF9	; 249
 802:	cc f3       	brlt	.-14     	; 0x7f6 <__fixunssfsi+0x34>
 804:	86 95       	lsr	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b3 95       	inc	r27
 80c:	d9 f7       	brne	.-10     	; 0x804 <__fixunssfsi+0x42>
 80e:	3e f4       	brtc	.+14     	; 0x81e <__fixunssfsi+0x5c>
 810:	90 95       	com	r25
 812:	80 95       	com	r24
 814:	70 95       	com	r23
 816:	61 95       	neg	r22
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	08 95       	ret

00000820 <__floatunsisf>:
 820:	e8 94       	clt
 822:	09 c0       	rjmp	.+18     	; 0x836 <__floatsisf+0x12>

00000824 <__floatsisf>:
 824:	97 fb       	bst	r25, 7
 826:	3e f4       	brtc	.+14     	; 0x836 <__floatsisf+0x12>
 828:	90 95       	com	r25
 82a:	80 95       	com	r24
 82c:	70 95       	com	r23
 82e:	61 95       	neg	r22
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	99 23       	and	r25, r25
 838:	a9 f0       	breq	.+42     	; 0x864 <__floatsisf+0x40>
 83a:	f9 2f       	mov	r31, r25
 83c:	96 e9       	ldi	r25, 0x96	; 150
 83e:	bb 27       	eor	r27, r27
 840:	93 95       	inc	r25
 842:	f6 95       	lsr	r31
 844:	87 95       	ror	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	b7 95       	ror	r27
 84c:	f1 11       	cpse	r31, r1
 84e:	f8 cf       	rjmp	.-16     	; 0x840 <__floatsisf+0x1c>
 850:	fa f4       	brpl	.+62     	; 0x890 <__floatsisf+0x6c>
 852:	bb 0f       	add	r27, r27
 854:	11 f4       	brne	.+4      	; 0x85a <__floatsisf+0x36>
 856:	60 ff       	sbrs	r22, 0
 858:	1b c0       	rjmp	.+54     	; 0x890 <__floatsisf+0x6c>
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	16 c0       	rjmp	.+44     	; 0x890 <__floatsisf+0x6c>
 864:	88 23       	and	r24, r24
 866:	11 f0       	breq	.+4      	; 0x86c <__floatsisf+0x48>
 868:	96 e9       	ldi	r25, 0x96	; 150
 86a:	11 c0       	rjmp	.+34     	; 0x88e <__floatsisf+0x6a>
 86c:	77 23       	and	r23, r23
 86e:	21 f0       	breq	.+8      	; 0x878 <__floatsisf+0x54>
 870:	9e e8       	ldi	r25, 0x8E	; 142
 872:	87 2f       	mov	r24, r23
 874:	76 2f       	mov	r23, r22
 876:	05 c0       	rjmp	.+10     	; 0x882 <__floatsisf+0x5e>
 878:	66 23       	and	r22, r22
 87a:	71 f0       	breq	.+28     	; 0x898 <__floatsisf+0x74>
 87c:	96 e8       	ldi	r25, 0x86	; 134
 87e:	86 2f       	mov	r24, r22
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	2a f0       	brmi	.+10     	; 0x890 <__floatsisf+0x6c>
 886:	9a 95       	dec	r25
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	da f7       	brpl	.-10     	; 0x886 <__floatsisf+0x62>
 890:	88 0f       	add	r24, r24
 892:	96 95       	lsr	r25
 894:	87 95       	ror	r24
 896:	97 f9       	bld	r25, 7
 898:	08 95       	ret

0000089a <__fp_cmp>:
 89a:	99 0f       	add	r25, r25
 89c:	00 08       	sbc	r0, r0
 89e:	55 0f       	add	r21, r21
 8a0:	aa 0b       	sbc	r26, r26
 8a2:	e0 e8       	ldi	r30, 0x80	; 128
 8a4:	fe ef       	ldi	r31, 0xFE	; 254
 8a6:	16 16       	cp	r1, r22
 8a8:	17 06       	cpc	r1, r23
 8aa:	e8 07       	cpc	r30, r24
 8ac:	f9 07       	cpc	r31, r25
 8ae:	c0 f0       	brcs	.+48     	; 0x8e0 <__fp_cmp+0x46>
 8b0:	12 16       	cp	r1, r18
 8b2:	13 06       	cpc	r1, r19
 8b4:	e4 07       	cpc	r30, r20
 8b6:	f5 07       	cpc	r31, r21
 8b8:	98 f0       	brcs	.+38     	; 0x8e0 <__fp_cmp+0x46>
 8ba:	62 1b       	sub	r22, r18
 8bc:	73 0b       	sbc	r23, r19
 8be:	84 0b       	sbc	r24, r20
 8c0:	95 0b       	sbc	r25, r21
 8c2:	39 f4       	brne	.+14     	; 0x8d2 <__fp_cmp+0x38>
 8c4:	0a 26       	eor	r0, r26
 8c6:	61 f0       	breq	.+24     	; 0x8e0 <__fp_cmp+0x46>
 8c8:	23 2b       	or	r18, r19
 8ca:	24 2b       	or	r18, r20
 8cc:	25 2b       	or	r18, r21
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <__fp_cmp+0x3e>
 8d0:	08 95       	ret
 8d2:	0a 26       	eor	r0, r26
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <__fp_cmp+0x3e>
 8d6:	a1 40       	sbci	r26, 0x01	; 1
 8d8:	a6 95       	lsr	r26
 8da:	8f ef       	ldi	r24, 0xFF	; 255
 8dc:	81 1d       	adc	r24, r1
 8de:	81 1d       	adc	r24, r1
 8e0:	08 95       	ret

000008e2 <__fp_split3>:
 8e2:	57 fd       	sbrc	r21, 7
 8e4:	90 58       	subi	r25, 0x80	; 128
 8e6:	44 0f       	add	r20, r20
 8e8:	55 1f       	adc	r21, r21
 8ea:	59 f0       	breq	.+22     	; 0x902 <__stack+0x3>
 8ec:	5f 3f       	cpi	r21, 0xFF	; 255
 8ee:	71 f0       	breq	.+28     	; 0x90c <__stack+0xd>
 8f0:	47 95       	ror	r20

000008f2 <__fp_splitA>:
 8f2:	88 0f       	add	r24, r24
 8f4:	97 fb       	bst	r25, 7
 8f6:	99 1f       	adc	r25, r25
 8f8:	61 f0       	breq	.+24     	; 0x912 <__stack+0x13>
 8fa:	9f 3f       	cpi	r25, 0xFF	; 255
 8fc:	79 f0       	breq	.+30     	; 0x91c <__stack+0x1d>
 8fe:	87 95       	ror	r24
 900:	08 95       	ret
 902:	12 16       	cp	r1, r18
 904:	13 06       	cpc	r1, r19
 906:	14 06       	cpc	r1, r20
 908:	55 1f       	adc	r21, r21
 90a:	f2 cf       	rjmp	.-28     	; 0x8f0 <__fp_split3+0xe>
 90c:	46 95       	lsr	r20
 90e:	f1 df       	rcall	.-30     	; 0x8f2 <__fp_splitA>
 910:	08 c0       	rjmp	.+16     	; 0x922 <__stack+0x23>
 912:	16 16       	cp	r1, r22
 914:	17 06       	cpc	r1, r23
 916:	18 06       	cpc	r1, r24
 918:	99 1f       	adc	r25, r25
 91a:	f1 cf       	rjmp	.-30     	; 0x8fe <__fp_splitA+0xc>
 91c:	86 95       	lsr	r24
 91e:	71 05       	cpc	r23, r1
 920:	61 05       	cpc	r22, r1
 922:	08 94       	sec
 924:	08 95       	ret

00000926 <__fp_zero>:
 926:	e8 94       	clt

00000928 <__fp_szero>:
 928:	bb 27       	eor	r27, r27
 92a:	66 27       	eor	r22, r22
 92c:	77 27       	eor	r23, r23
 92e:	cb 01       	movw	r24, r22
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret

00000934 <__gesf2>:
 934:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_cmp>
 938:	08 f4       	brcc	.+2      	; 0x93c <__gesf2+0x8>
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	08 95       	ret

0000093e <atof>:
 93e:	66 27       	eor	r22, r22
 940:	77 27       	eor	r23, r23
 942:	0c 94 c9 04 	jmp	0x992	; 0x992 <strtod>

00000946 <atoi>:
 946:	fc 01       	movw	r30, r24
 948:	88 27       	eor	r24, r24
 94a:	99 27       	eor	r25, r25
 94c:	e8 94       	clt
 94e:	21 91       	ld	r18, Z+
 950:	20 32       	cpi	r18, 0x20	; 32
 952:	e9 f3       	breq	.-6      	; 0x94e <atoi+0x8>
 954:	29 30       	cpi	r18, 0x09	; 9
 956:	10 f0       	brcs	.+4      	; 0x95c <atoi+0x16>
 958:	2e 30       	cpi	r18, 0x0E	; 14
 95a:	c8 f3       	brcs	.-14     	; 0x94e <atoi+0x8>
 95c:	2b 32       	cpi	r18, 0x2B	; 43
 95e:	41 f0       	breq	.+16     	; 0x970 <atoi+0x2a>
 960:	2d 32       	cpi	r18, 0x2D	; 45
 962:	39 f4       	brne	.+14     	; 0x972 <atoi+0x2c>
 964:	68 94       	set
 966:	04 c0       	rjmp	.+8      	; 0x970 <atoi+0x2a>
 968:	0e 94 c1 04 	call	0x982	; 0x982 <__mulhi_const_10>
 96c:	82 0f       	add	r24, r18
 96e:	91 1d       	adc	r25, r1
 970:	21 91       	ld	r18, Z+
 972:	20 53       	subi	r18, 0x30	; 48
 974:	2a 30       	cpi	r18, 0x0A	; 10
 976:	c0 f3       	brcs	.-16     	; 0x968 <atoi+0x22>
 978:	1e f4       	brtc	.+6      	; 0x980 <atoi+0x3a>
 97a:	90 95       	com	r25
 97c:	81 95       	neg	r24
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__mulhi_const_10>:
 982:	7a e0       	ldi	r23, 0x0A	; 10
 984:	97 9f       	mul	r25, r23
 986:	90 2d       	mov	r25, r0
 988:	87 9f       	mul	r24, r23
 98a:	80 2d       	mov	r24, r0
 98c:	91 0d       	add	r25, r1
 98e:	11 24       	eor	r1, r1
 990:	08 95       	ret

00000992 <strtod>:
 992:	a0 e0       	ldi	r26, 0x00	; 0
 994:	b0 e0       	ldi	r27, 0x00	; 0
 996:	ef ec       	ldi	r30, 0xCF	; 207
 998:	f4 e0       	ldi	r31, 0x04	; 4
 99a:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__prologue_saves__+0x8>
 99e:	ec 01       	movw	r28, r24
 9a0:	7b 01       	movw	r14, r22
 9a2:	61 15       	cp	r22, r1
 9a4:	71 05       	cpc	r23, r1
 9a6:	19 f0       	breq	.+6      	; 0x9ae <strtod+0x1c>
 9a8:	db 01       	movw	r26, r22
 9aa:	8d 93       	st	X+, r24
 9ac:	9c 93       	st	X, r25
 9ae:	8e 01       	movw	r16, r28
 9b0:	0f 5f       	subi	r16, 0xFF	; 255
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	78 80       	ld	r7, Y
 9b6:	87 2d       	mov	r24, r7
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 26 06 	call	0xc4c	; 0xc4c <isspace>
 9be:	89 2b       	or	r24, r25
 9c0:	11 f0       	breq	.+4      	; 0x9c6 <strtod+0x34>
 9c2:	e8 01       	movw	r28, r16
 9c4:	f4 cf       	rjmp	.-24     	; 0x9ae <strtod+0x1c>
 9c6:	bd e2       	ldi	r27, 0x2D	; 45
 9c8:	7b 12       	cpse	r7, r27
 9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <strtod+0x44>
 9cc:	0f 5f       	subi	r16, 0xFF	; 255
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	79 80       	ldd	r7, Y+1	; 0x01
 9d2:	c1 e0       	ldi	r28, 0x01	; 1
 9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <strtod+0x54>
 9d6:	eb e2       	ldi	r30, 0x2B	; 43
 9d8:	7e 12       	cpse	r7, r30
 9da:	04 c0       	rjmp	.+8      	; 0x9e4 <strtod+0x52>
 9dc:	8e 01       	movw	r16, r28
 9de:	0e 5f       	subi	r16, 0xFE	; 254
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	79 80       	ldd	r7, Y+1	; 0x01
 9e4:	c0 e0       	ldi	r28, 0x00	; 0
 9e6:	68 01       	movw	r12, r16
 9e8:	f1 e0       	ldi	r31, 0x01	; 1
 9ea:	cf 1a       	sub	r12, r31
 9ec:	d1 08       	sbc	r13, r1
 9ee:	43 e0       	ldi	r20, 0x03	; 3
 9f0:	50 e0       	ldi	r21, 0x00	; 0
 9f2:	60 e7       	ldi	r22, 0x70	; 112
 9f4:	70 e0       	ldi	r23, 0x00	; 0
 9f6:	c6 01       	movw	r24, r12
 9f8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <strncasecmp_P>
 9fc:	89 2b       	or	r24, r25
 9fe:	f1 f4       	brne	.+60     	; 0xa3c <strtod+0xaa>
 a00:	68 01       	movw	r12, r16
 a02:	22 e0       	ldi	r18, 0x02	; 2
 a04:	c2 0e       	add	r12, r18
 a06:	d1 1c       	adc	r13, r1
 a08:	45 e0       	ldi	r20, 0x05	; 5
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	6b e6       	ldi	r22, 0x6B	; 107
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	c6 01       	movw	r24, r12
 a12:	0e 94 2f 06 	call	0xc5e	; 0xc5e <strncasecmp_P>
 a16:	89 2b       	or	r24, r25
 a18:	21 f4       	brne	.+8      	; 0xa22 <strtod+0x90>
 a1a:	68 01       	movw	r12, r16
 a1c:	87 e0       	ldi	r24, 0x07	; 7
 a1e:	c8 0e       	add	r12, r24
 a20:	d1 1c       	adc	r13, r1
 a22:	e1 14       	cp	r14, r1
 a24:	f1 04       	cpc	r15, r1
 a26:	19 f0       	breq	.+6      	; 0xa2e <strtod+0x9c>
 a28:	d7 01       	movw	r26, r14
 a2a:	cd 92       	st	X+, r12
 a2c:	dc 92       	st	X, r13
 a2e:	c1 11       	cpse	r28, r1
 a30:	ff c0       	rjmp	.+510    	; 0xc30 <strtod+0x29e>
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	80 e8       	ldi	r24, 0x80	; 128
 a38:	9f e7       	ldi	r25, 0x7F	; 127
 a3a:	03 c1       	rjmp	.+518    	; 0xc42 <strtod+0x2b0>
 a3c:	43 e0       	ldi	r20, 0x03	; 3
 a3e:	50 e0       	ldi	r21, 0x00	; 0
 a40:	68 e6       	ldi	r22, 0x68	; 104
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	c6 01       	movw	r24, r12
 a46:	0e 94 2f 06 	call	0xc5e	; 0xc5e <strncasecmp_P>
 a4a:	89 2b       	or	r24, r25
 a4c:	51 f4       	brne	.+20     	; 0xa62 <strtod+0xd0>
 a4e:	e1 14       	cp	r14, r1
 a50:	f1 04       	cpc	r15, r1
 a52:	09 f4       	brne	.+2      	; 0xa56 <strtod+0xc4>
 a54:	f2 c0       	rjmp	.+484    	; 0xc3a <strtod+0x2a8>
 a56:	0e 5f       	subi	r16, 0xFE	; 254
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	f7 01       	movw	r30, r14
 a5c:	11 83       	std	Z+1, r17	; 0x01
 a5e:	00 83       	st	Z, r16
 a60:	ec c0       	rjmp	.+472    	; 0xc3a <strtod+0x2a8>
 a62:	68 01       	movw	r12, r16
 a64:	60 e0       	ldi	r22, 0x00	; 0
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	cb 01       	movw	r24, r22
 a6a:	00 e0       	ldi	r16, 0x00	; 0
 a6c:	10 e0       	ldi	r17, 0x00	; 0
 a6e:	f6 01       	movw	r30, r12
 a70:	d0 ed       	ldi	r29, 0xD0	; 208
 a72:	d7 0d       	add	r29, r7
 a74:	da 30       	cpi	r29, 0x0A	; 10
 a76:	58 f5       	brcc	.+86     	; 0xace <strtod+0x13c>
 a78:	2c 2f       	mov	r18, r28
 a7a:	22 60       	ori	r18, 0x02	; 2
 a7c:	62 2e       	mov	r6, r18
 a7e:	2c 2f       	mov	r18, r28
 a80:	28 70       	andi	r18, 0x08	; 8
 a82:	c2 ff       	sbrs	r28, 2
 a84:	05 c0       	rjmp	.+10     	; 0xa90 <strtod+0xfe>
 a86:	21 11       	cpse	r18, r1
 a88:	28 c0       	rjmp	.+80     	; 0xada <strtod+0x148>
 a8a:	0f 5f       	subi	r16, 0xFF	; 255
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	25 c0       	rjmp	.+74     	; 0xada <strtod+0x148>
 a90:	22 23       	and	r18, r18
 a92:	11 f0       	breq	.+4      	; 0xa98 <strtod+0x106>
 a94:	01 50       	subi	r16, 0x01	; 1
 a96:	11 09       	sbc	r17, r1
 a98:	a5 e0       	ldi	r26, 0x05	; 5
 a9a:	b0 e0       	ldi	r27, 0x00	; 0
 a9c:	9b 01       	movw	r18, r22
 a9e:	ac 01       	movw	r20, r24
 aa0:	0e 94 df 06 	call	0xdbe	; 0xdbe <__muluhisi3>
 aa4:	4b 01       	movw	r8, r22
 aa6:	5c 01       	movw	r10, r24
 aa8:	88 0c       	add	r8, r8
 aaa:	99 1c       	adc	r9, r9
 aac:	aa 1c       	adc	r10, r10
 aae:	bb 1c       	adc	r11, r11
 ab0:	c5 01       	movw	r24, r10
 ab2:	b4 01       	movw	r22, r8
 ab4:	6d 0f       	add	r22, r29
 ab6:	71 1d       	adc	r23, r1
 ab8:	81 1d       	adc	r24, r1
 aba:	91 1d       	adc	r25, r1
 abc:	68 39       	cpi	r22, 0x98	; 152
 abe:	a9 e9       	ldi	r26, 0x99	; 153
 ac0:	7a 07       	cpc	r23, r26
 ac2:	8a 07       	cpc	r24, r26
 ac4:	a9 e1       	ldi	r26, 0x19	; 25
 ac6:	9a 07       	cpc	r25, r26
 ac8:	40 f0       	brcs	.+16     	; 0xada <strtod+0x148>
 aca:	c6 60       	ori	r28, 0x06	; 6
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <strtod+0x146>
 ace:	de 3f       	cpi	r29, 0xFE	; 254
 ad0:	51 f4       	brne	.+20     	; 0xae6 <strtod+0x154>
 ad2:	c3 fd       	sbrc	r28, 3
 ad4:	44 c0       	rjmp	.+136    	; 0xb5e <strtod+0x1cc>
 ad6:	c8 60       	ori	r28, 0x08	; 8
 ad8:	6c 2e       	mov	r6, r28
 ada:	bf ef       	ldi	r27, 0xFF	; 255
 adc:	cb 1a       	sub	r12, r27
 ade:	db 0a       	sbc	r13, r27
 ae0:	70 80       	ld	r7, Z
 ae2:	c6 2d       	mov	r28, r6
 ae4:	c4 cf       	rjmp	.-120    	; 0xa6e <strtod+0xdc>
 ae6:	2d 2f       	mov	r18, r29
 ae8:	2f 7d       	andi	r18, 0xDF	; 223
 aea:	25 31       	cpi	r18, 0x15	; 21
 aec:	c1 f5       	brne	.+112    	; 0xb5e <strtod+0x1cc>
 aee:	40 81       	ld	r20, Z
 af0:	4d 32       	cpi	r20, 0x2D	; 45
 af2:	11 f4       	brne	.+4      	; 0xaf8 <strtod+0x166>
 af4:	c0 61       	ori	r28, 0x10	; 16
 af6:	06 c0       	rjmp	.+12     	; 0xb04 <strtod+0x172>
 af8:	4b 32       	cpi	r20, 0x2B	; 43
 afa:	21 f0       	breq	.+8      	; 0xb04 <strtod+0x172>
 afc:	31 96       	adiw	r30, 0x01	; 1
 afe:	21 e0       	ldi	r18, 0x01	; 1
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <strtod+0x17e>
 b04:	32 96       	adiw	r30, 0x02	; 2
 b06:	d6 01       	movw	r26, r12
 b08:	11 96       	adiw	r26, 0x01	; 1
 b0a:	4c 91       	ld	r20, X
 b0c:	22 e0       	ldi	r18, 0x02	; 2
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	a0 ed       	ldi	r26, 0xD0	; 208
 b12:	a4 0f       	add	r26, r20
 b14:	aa 30       	cpi	r26, 0x0A	; 10
 b16:	18 f0       	brcs	.+6      	; 0xb1e <strtod+0x18c>
 b18:	e2 1b       	sub	r30, r18
 b1a:	f3 0b       	sbc	r31, r19
 b1c:	20 c0       	rjmp	.+64     	; 0xb5e <strtod+0x1cc>
 b1e:	40 e0       	ldi	r20, 0x00	; 0
 b20:	50 e0       	ldi	r21, 0x00	; 0
 b22:	40 38       	cpi	r20, 0x80	; 128
 b24:	bc e0       	ldi	r27, 0x0C	; 12
 b26:	5b 07       	cpc	r21, r27
 b28:	5c f4       	brge	.+22     	; 0xb40 <strtod+0x1ae>
 b2a:	9a 01       	movw	r18, r20
 b2c:	22 0f       	add	r18, r18
 b2e:	33 1f       	adc	r19, r19
 b30:	22 0f       	add	r18, r18
 b32:	33 1f       	adc	r19, r19
 b34:	42 0f       	add	r20, r18
 b36:	53 1f       	adc	r21, r19
 b38:	44 0f       	add	r20, r20
 b3a:	55 1f       	adc	r21, r21
 b3c:	4a 0f       	add	r20, r26
 b3e:	51 1d       	adc	r21, r1
 b40:	31 96       	adiw	r30, 0x01	; 1
 b42:	df 01       	movw	r26, r30
 b44:	11 97       	sbiw	r26, 0x01	; 1
 b46:	2c 91       	ld	r18, X
 b48:	a0 ed       	ldi	r26, 0xD0	; 208
 b4a:	a2 0f       	add	r26, r18
 b4c:	aa 30       	cpi	r26, 0x0A	; 10
 b4e:	48 f3       	brcs	.-46     	; 0xb22 <strtod+0x190>
 b50:	c4 ff       	sbrs	r28, 4
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <strtod+0x1c8>
 b54:	51 95       	neg	r21
 b56:	41 95       	neg	r20
 b58:	51 09       	sbc	r21, r1
 b5a:	04 0f       	add	r16, r20
 b5c:	15 1f       	adc	r17, r21
 b5e:	c1 ff       	sbrs	r28, 1
 b60:	07 c0       	rjmp	.+14     	; 0xb70 <strtod+0x1de>
 b62:	e1 14       	cp	r14, r1
 b64:	f1 04       	cpc	r15, r1
 b66:	21 f0       	breq	.+8      	; 0xb70 <strtod+0x1de>
 b68:	31 97       	sbiw	r30, 0x01	; 1
 b6a:	d7 01       	movw	r26, r14
 b6c:	ed 93       	st	X+, r30
 b6e:	fc 93       	st	X, r31
 b70:	0e 94 10 04 	call	0x820	; 0x820 <__floatunsisf>
 b74:	c3 70       	andi	r28, 0x03	; 3
 b76:	c3 30       	cpi	r28, 0x03	; 3
 b78:	19 f0       	breq	.+6      	; 0xb80 <strtod+0x1ee>
 b7a:	6b 01       	movw	r12, r22
 b7c:	7c 01       	movw	r14, r24
 b7e:	06 c0       	rjmp	.+12     	; 0xb8c <strtod+0x1fa>
 b80:	6b 01       	movw	r12, r22
 b82:	7c 01       	movw	r14, r24
 b84:	f7 fa       	bst	r15, 7
 b86:	f0 94       	com	r15
 b88:	f7 f8       	bld	r15, 7
 b8a:	f0 94       	com	r15
 b8c:	20 e0       	ldi	r18, 0x00	; 0
 b8e:	30 e0       	ldi	r19, 0x00	; 0
 b90:	a9 01       	movw	r20, r18
 b92:	c7 01       	movw	r24, r14
 b94:	b6 01       	movw	r22, r12
 b96:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__cmpsf2>
 b9a:	88 23       	and	r24, r24
 b9c:	09 f4       	brne	.+2      	; 0xba0 <strtod+0x20e>
 b9e:	45 c0       	rjmp	.+138    	; 0xc2a <strtod+0x298>
 ba0:	17 ff       	sbrs	r17, 7
 ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <strtod+0x21e>
 ba4:	11 95       	neg	r17
 ba6:	01 95       	neg	r16
 ba8:	11 09       	sbc	r17, r1
 baa:	c7 e8       	ldi	r28, 0x87	; 135
 bac:	d0 e0       	ldi	r29, 0x00	; 0
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <strtod+0x222>
 bb0:	cf e9       	ldi	r28, 0x9F	; 159
 bb2:	d0 e0       	ldi	r29, 0x00	; 0
 bb4:	5e 01       	movw	r10, r28
 bb6:	b8 e1       	ldi	r27, 0x18	; 24
 bb8:	ab 1a       	sub	r10, r27
 bba:	b1 08       	sbc	r11, r1
 bbc:	46 01       	movw	r8, r12
 bbe:	be 2d       	mov	r27, r14
 bc0:	af 2d       	mov	r26, r15
 bc2:	90 e2       	ldi	r25, 0x20	; 32
 bc4:	e9 2e       	mov	r14, r25
 bc6:	f1 2c       	mov	r15, r1
 bc8:	0e 15       	cp	r16, r14
 bca:	1f 05       	cpc	r17, r15
 bcc:	84 f0       	brlt	.+32     	; 0xbee <strtod+0x25c>
 bce:	fe 01       	movw	r30, r28
 bd0:	25 91       	lpm	r18, Z+
 bd2:	35 91       	lpm	r19, Z+
 bd4:	45 91       	lpm	r20, Z+
 bd6:	54 91       	lpm	r21, Z
 bd8:	b4 01       	movw	r22, r8
 bda:	8b 2f       	mov	r24, r27
 bdc:	9a 2f       	mov	r25, r26
 bde:	0e 94 47 06 	call	0xc8e	; 0xc8e <__mulsf3>
 be2:	4b 01       	movw	r8, r22
 be4:	b8 2f       	mov	r27, r24
 be6:	a9 2f       	mov	r26, r25
 be8:	0e 19       	sub	r16, r14
 bea:	1f 09       	sbc	r17, r15
 bec:	ed cf       	rjmp	.-38     	; 0xbc8 <strtod+0x236>
 bee:	24 97       	sbiw	r28, 0x04	; 4
 bf0:	f5 94       	asr	r15
 bf2:	e7 94       	ror	r14
 bf4:	ca 15       	cp	r28, r10
 bf6:	db 05       	cpc	r29, r11
 bf8:	39 f7       	brne	.-50     	; 0xbc8 <strtod+0x236>
 bfa:	64 01       	movw	r12, r8
 bfc:	eb 2e       	mov	r14, r27
 bfe:	fa 2e       	mov	r15, r26
 c00:	8e 2d       	mov	r24, r14
 c02:	88 0f       	add	r24, r24
 c04:	8f 2d       	mov	r24, r15
 c06:	88 1f       	adc	r24, r24
 c08:	8f 3f       	cpi	r24, 0xFF	; 255
 c0a:	49 f0       	breq	.+18     	; 0xc1e <strtod+0x28c>
 c0c:	20 e0       	ldi	r18, 0x00	; 0
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	a9 01       	movw	r20, r18
 c12:	c7 01       	movw	r24, r14
 c14:	b6 01       	movw	r22, r12
 c16:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__cmpsf2>
 c1a:	81 11       	cpse	r24, r1
 c1c:	06 c0       	rjmp	.+12     	; 0xc2a <strtod+0x298>
 c1e:	82 e2       	ldi	r24, 0x22	; 34
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	90 93 be 01 	sts	0x01BE, r25
 c26:	80 93 bd 01 	sts	0x01BD, r24
 c2a:	c7 01       	movw	r24, r14
 c2c:	b6 01       	movw	r22, r12
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <strtod+0x2b0>
 c30:	60 e0       	ldi	r22, 0x00	; 0
 c32:	70 e0       	ldi	r23, 0x00	; 0
 c34:	80 e8       	ldi	r24, 0x80	; 128
 c36:	9f ef       	ldi	r25, 0xFF	; 255
 c38:	04 c0       	rjmp	.+8      	; 0xc42 <strtod+0x2b0>
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	70 e0       	ldi	r23, 0x00	; 0
 c3e:	80 ec       	ldi	r24, 0xC0	; 192
 c40:	9f e7       	ldi	r25, 0x7F	; 127
 c42:	cd b7       	in	r28, 0x3d	; 61
 c44:	de b7       	in	r29, 0x3e	; 62
 c46:	ee e0       	ldi	r30, 0x0E	; 14
 c48:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__epilogue_restores__+0x8>

00000c4c <isspace>:
 c4c:	91 11       	cpse	r25, r1
 c4e:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__ctype_isfalse>
 c52:	80 32       	cpi	r24, 0x20	; 32
 c54:	19 f0       	breq	.+6      	; 0xc5c <isspace+0x10>
 c56:	89 50       	subi	r24, 0x09	; 9
 c58:	85 50       	subi	r24, 0x05	; 5
 c5a:	c8 f7       	brcc	.-14     	; 0xc4e <isspace+0x2>
 c5c:	08 95       	ret

00000c5e <strncasecmp_P>:
 c5e:	fb 01       	movw	r30, r22
 c60:	dc 01       	movw	r26, r24
 c62:	41 50       	subi	r20, 0x01	; 1
 c64:	50 40       	sbci	r21, 0x00	; 0
 c66:	88 f0       	brcs	.+34     	; 0xc8a <strncasecmp_P+0x2c>
 c68:	8d 91       	ld	r24, X+
 c6a:	81 34       	cpi	r24, 0x41	; 65
 c6c:	1c f0       	brlt	.+6      	; 0xc74 <strncasecmp_P+0x16>
 c6e:	8b 35       	cpi	r24, 0x5B	; 91
 c70:	0c f4       	brge	.+2      	; 0xc74 <strncasecmp_P+0x16>
 c72:	80 5e       	subi	r24, 0xE0	; 224
 c74:	65 91       	lpm	r22, Z+
 c76:	61 34       	cpi	r22, 0x41	; 65
 c78:	1c f0       	brlt	.+6      	; 0xc80 <strncasecmp_P+0x22>
 c7a:	6b 35       	cpi	r22, 0x5B	; 91
 c7c:	0c f4       	brge	.+2      	; 0xc80 <strncasecmp_P+0x22>
 c7e:	60 5e       	subi	r22, 0xE0	; 224
 c80:	86 1b       	sub	r24, r22
 c82:	61 11       	cpse	r22, r1
 c84:	71 f3       	breq	.-36     	; 0xc62 <strncasecmp_P+0x4>
 c86:	99 0b       	sbc	r25, r25
 c88:	08 95       	ret
 c8a:	88 1b       	sub	r24, r24
 c8c:	fc cf       	rjmp	.-8      	; 0xc86 <strncasecmp_P+0x28>

00000c8e <__mulsf3>:
 c8e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulsf3x>
 c92:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__fp_round>
 c96:	0e 94 c0 06 	call	0xd80	; 0xd80 <__fp_pscA>
 c9a:	38 f0       	brcs	.+14     	; 0xcaa <__mulsf3+0x1c>
 c9c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__fp_pscB>
 ca0:	20 f0       	brcs	.+8      	; 0xcaa <__mulsf3+0x1c>
 ca2:	95 23       	and	r25, r21
 ca4:	11 f0       	breq	.+4      	; 0xcaa <__mulsf3+0x1c>
 ca6:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_inf>
 caa:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__fp_nan>
 cae:	11 24       	eor	r1, r1
 cb0:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_szero>

00000cb4 <__mulsf3x>:
 cb4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_split3>
 cb8:	70 f3       	brcs	.-36     	; 0xc96 <__mulsf3+0x8>

00000cba <__mulsf3_pse>:
 cba:	95 9f       	mul	r25, r21
 cbc:	c1 f3       	breq	.-16     	; 0xcae <__mulsf3+0x20>
 cbe:	95 0f       	add	r25, r21
 cc0:	50 e0       	ldi	r21, 0x00	; 0
 cc2:	55 1f       	adc	r21, r21
 cc4:	62 9f       	mul	r22, r18
 cc6:	f0 01       	movw	r30, r0
 cc8:	72 9f       	mul	r23, r18
 cca:	bb 27       	eor	r27, r27
 ccc:	f0 0d       	add	r31, r0
 cce:	b1 1d       	adc	r27, r1
 cd0:	63 9f       	mul	r22, r19
 cd2:	aa 27       	eor	r26, r26
 cd4:	f0 0d       	add	r31, r0
 cd6:	b1 1d       	adc	r27, r1
 cd8:	aa 1f       	adc	r26, r26
 cda:	64 9f       	mul	r22, r20
 cdc:	66 27       	eor	r22, r22
 cde:	b0 0d       	add	r27, r0
 ce0:	a1 1d       	adc	r26, r1
 ce2:	66 1f       	adc	r22, r22
 ce4:	82 9f       	mul	r24, r18
 ce6:	22 27       	eor	r18, r18
 ce8:	b0 0d       	add	r27, r0
 cea:	a1 1d       	adc	r26, r1
 cec:	62 1f       	adc	r22, r18
 cee:	73 9f       	mul	r23, r19
 cf0:	b0 0d       	add	r27, r0
 cf2:	a1 1d       	adc	r26, r1
 cf4:	62 1f       	adc	r22, r18
 cf6:	83 9f       	mul	r24, r19
 cf8:	a0 0d       	add	r26, r0
 cfa:	61 1d       	adc	r22, r1
 cfc:	22 1f       	adc	r18, r18
 cfe:	74 9f       	mul	r23, r20
 d00:	33 27       	eor	r19, r19
 d02:	a0 0d       	add	r26, r0
 d04:	61 1d       	adc	r22, r1
 d06:	23 1f       	adc	r18, r19
 d08:	84 9f       	mul	r24, r20
 d0a:	60 0d       	add	r22, r0
 d0c:	21 1d       	adc	r18, r1
 d0e:	82 2f       	mov	r24, r18
 d10:	76 2f       	mov	r23, r22
 d12:	6a 2f       	mov	r22, r26
 d14:	11 24       	eor	r1, r1
 d16:	9f 57       	subi	r25, 0x7F	; 127
 d18:	50 40       	sbci	r21, 0x00	; 0
 d1a:	9a f0       	brmi	.+38     	; 0xd42 <__mulsf3_pse+0x88>
 d1c:	f1 f0       	breq	.+60     	; 0xd5a <__mulsf3_pse+0xa0>
 d1e:	88 23       	and	r24, r24
 d20:	4a f0       	brmi	.+18     	; 0xd34 <__mulsf3_pse+0x7a>
 d22:	ee 0f       	add	r30, r30
 d24:	ff 1f       	adc	r31, r31
 d26:	bb 1f       	adc	r27, r27
 d28:	66 1f       	adc	r22, r22
 d2a:	77 1f       	adc	r23, r23
 d2c:	88 1f       	adc	r24, r24
 d2e:	91 50       	subi	r25, 0x01	; 1
 d30:	50 40       	sbci	r21, 0x00	; 0
 d32:	a9 f7       	brne	.-22     	; 0xd1e <__mulsf3_pse+0x64>
 d34:	9e 3f       	cpi	r25, 0xFE	; 254
 d36:	51 05       	cpc	r21, r1
 d38:	80 f0       	brcs	.+32     	; 0xd5a <__mulsf3_pse+0xa0>
 d3a:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_inf>
 d3e:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_szero>
 d42:	5f 3f       	cpi	r21, 0xFF	; 255
 d44:	e4 f3       	brlt	.-8      	; 0xd3e <__mulsf3_pse+0x84>
 d46:	98 3e       	cpi	r25, 0xE8	; 232
 d48:	d4 f3       	brlt	.-12     	; 0xd3e <__mulsf3_pse+0x84>
 d4a:	86 95       	lsr	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	b7 95       	ror	r27
 d52:	f7 95       	ror	r31
 d54:	e7 95       	ror	r30
 d56:	9f 5f       	subi	r25, 0xFF	; 255
 d58:	c1 f7       	brne	.-16     	; 0xd4a <__mulsf3_pse+0x90>
 d5a:	fe 2b       	or	r31, r30
 d5c:	88 0f       	add	r24, r24
 d5e:	91 1d       	adc	r25, r1
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret

00000d68 <__ctype_isfalse>:
 d68:	99 27       	eor	r25, r25
 d6a:	88 27       	eor	r24, r24

00000d6c <__ctype_istrue>:
 d6c:	08 95       	ret

00000d6e <__fp_inf>:
 d6e:	97 f9       	bld	r25, 7
 d70:	9f 67       	ori	r25, 0x7F	; 127
 d72:	80 e8       	ldi	r24, 0x80	; 128
 d74:	70 e0       	ldi	r23, 0x00	; 0
 d76:	60 e0       	ldi	r22, 0x00	; 0
 d78:	08 95       	ret

00000d7a <__fp_nan>:
 d7a:	9f ef       	ldi	r25, 0xFF	; 255
 d7c:	80 ec       	ldi	r24, 0xC0	; 192
 d7e:	08 95       	ret

00000d80 <__fp_pscA>:
 d80:	00 24       	eor	r0, r0
 d82:	0a 94       	dec	r0
 d84:	16 16       	cp	r1, r22
 d86:	17 06       	cpc	r1, r23
 d88:	18 06       	cpc	r1, r24
 d8a:	09 06       	cpc	r0, r25
 d8c:	08 95       	ret

00000d8e <__fp_pscB>:
 d8e:	00 24       	eor	r0, r0
 d90:	0a 94       	dec	r0
 d92:	12 16       	cp	r1, r18
 d94:	13 06       	cpc	r1, r19
 d96:	14 06       	cpc	r1, r20
 d98:	05 06       	cpc	r0, r21
 d9a:	08 95       	ret

00000d9c <__fp_round>:
 d9c:	09 2e       	mov	r0, r25
 d9e:	03 94       	inc	r0
 da0:	00 0c       	add	r0, r0
 da2:	11 f4       	brne	.+4      	; 0xda8 <__fp_round+0xc>
 da4:	88 23       	and	r24, r24
 da6:	52 f0       	brmi	.+20     	; 0xdbc <__fp_round+0x20>
 da8:	bb 0f       	add	r27, r27
 daa:	40 f4       	brcc	.+16     	; 0xdbc <__fp_round+0x20>
 dac:	bf 2b       	or	r27, r31
 dae:	11 f4       	brne	.+4      	; 0xdb4 <__fp_round+0x18>
 db0:	60 ff       	sbrs	r22, 0
 db2:	04 c0       	rjmp	.+8      	; 0xdbc <__fp_round+0x20>
 db4:	6f 5f       	subi	r22, 0xFF	; 255
 db6:	7f 4f       	sbci	r23, 0xFF	; 255
 db8:	8f 4f       	sbci	r24, 0xFF	; 255
 dba:	9f 4f       	sbci	r25, 0xFF	; 255
 dbc:	08 95       	ret

00000dbe <__muluhisi3>:
 dbe:	0e 94 21 07 	call	0xe42	; 0xe42 <__umulhisi3>
 dc2:	a5 9f       	mul	r26, r21
 dc4:	90 0d       	add	r25, r0
 dc6:	b4 9f       	mul	r27, r20
 dc8:	90 0d       	add	r25, r0
 dca:	a4 9f       	mul	r26, r20
 dcc:	80 0d       	add	r24, r0
 dce:	91 1d       	adc	r25, r1
 dd0:	11 24       	eor	r1, r1
 dd2:	08 95       	ret

00000dd4 <__prologue_saves__>:
 dd4:	2f 92       	push	r2
 dd6:	3f 92       	push	r3
 dd8:	4f 92       	push	r4
 dda:	5f 92       	push	r5
 ddc:	6f 92       	push	r6
 dde:	7f 92       	push	r7
 de0:	8f 92       	push	r8
 de2:	9f 92       	push	r9
 de4:	af 92       	push	r10
 de6:	bf 92       	push	r11
 de8:	cf 92       	push	r12
 dea:	df 92       	push	r13
 dec:	ef 92       	push	r14
 dee:	ff 92       	push	r15
 df0:	0f 93       	push	r16
 df2:	1f 93       	push	r17
 df4:	cf 93       	push	r28
 df6:	df 93       	push	r29
 df8:	cd b7       	in	r28, 0x3d	; 61
 dfa:	de b7       	in	r29, 0x3e	; 62
 dfc:	ca 1b       	sub	r28, r26
 dfe:	db 0b       	sbc	r29, r27
 e00:	0f b6       	in	r0, 0x3f	; 63
 e02:	f8 94       	cli
 e04:	de bf       	out	0x3e, r29	; 62
 e06:	0f be       	out	0x3f, r0	; 63
 e08:	cd bf       	out	0x3d, r28	; 61
 e0a:	09 94       	ijmp

00000e0c <__epilogue_restores__>:
 e0c:	2a 88       	ldd	r2, Y+18	; 0x12
 e0e:	39 88       	ldd	r3, Y+17	; 0x11
 e10:	48 88       	ldd	r4, Y+16	; 0x10
 e12:	5f 84       	ldd	r5, Y+15	; 0x0f
 e14:	6e 84       	ldd	r6, Y+14	; 0x0e
 e16:	7d 84       	ldd	r7, Y+13	; 0x0d
 e18:	8c 84       	ldd	r8, Y+12	; 0x0c
 e1a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e1c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e1e:	b9 84       	ldd	r11, Y+9	; 0x09
 e20:	c8 84       	ldd	r12, Y+8	; 0x08
 e22:	df 80       	ldd	r13, Y+7	; 0x07
 e24:	ee 80       	ldd	r14, Y+6	; 0x06
 e26:	fd 80       	ldd	r15, Y+5	; 0x05
 e28:	0c 81       	ldd	r16, Y+4	; 0x04
 e2a:	1b 81       	ldd	r17, Y+3	; 0x03
 e2c:	aa 81       	ldd	r26, Y+2	; 0x02
 e2e:	b9 81       	ldd	r27, Y+1	; 0x01
 e30:	ce 0f       	add	r28, r30
 e32:	d1 1d       	adc	r29, r1
 e34:	0f b6       	in	r0, 0x3f	; 63
 e36:	f8 94       	cli
 e38:	de bf       	out	0x3e, r29	; 62
 e3a:	0f be       	out	0x3f, r0	; 63
 e3c:	cd bf       	out	0x3d, r28	; 61
 e3e:	ed 01       	movw	r28, r26
 e40:	08 95       	ret

00000e42 <__umulhisi3>:
 e42:	a2 9f       	mul	r26, r18
 e44:	b0 01       	movw	r22, r0
 e46:	b3 9f       	mul	r27, r19
 e48:	c0 01       	movw	r24, r0
 e4a:	a3 9f       	mul	r26, r19
 e4c:	70 0d       	add	r23, r0
 e4e:	81 1d       	adc	r24, r1
 e50:	11 24       	eor	r1, r1
 e52:	91 1d       	adc	r25, r1
 e54:	b2 9f       	mul	r27, r18
 e56:	70 0d       	add	r23, r0
 e58:	81 1d       	adc	r24, r1
 e5a:	11 24       	eor	r1, r1
 e5c:	91 1d       	adc	r25, r1
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
