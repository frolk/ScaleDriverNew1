
ScaleDriverNew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a4  00800100  00800100  00000db8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9d  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057c  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000549  00000000  00000000  00001f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cf  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002ea9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_1>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_14>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_18>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_20>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4e 41       	sbci	r20, 0x1E	; 30
  6a:	4e 49       	sbci	r20, 0x9E	; 158

0000006b <pstr_inity>:
  6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
  70:	49 4e 46                                            INF

00000073 <pwr_m10>:
  73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
  83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
  8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
  9b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_clear_bss>:
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
  b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
  ba:	a4 3a       	cpi	r26, 0xA4	; 164
  bc:	b2 07       	cpc	r27, r18
  be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
  c0:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  c4:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <BL_GetMessage>:
uint16_t PWMvalue = 0;



void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	c1 e2       	ldi	r28, 0x21	; 33
  d6:	d1 e0       	ldi	r29, 0x01	; 1
  d8:	09 e2       	ldi	r16, 0x29	; 41
  da:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i=0; i<8; i++)
	{
		BluetoothMessage[i] = BL_GetChar();
  dc:	0e 94 3e 01 	call	0x27c	; 0x27c <BL_GetChar>
  e0:	89 93       	st	Y+, r24


void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
	
	for (int i=0; i<8; i++)
  e2:	c0 17       	cp	r28, r16
  e4:	d1 07       	cpc	r29, r17
  e6:	d1 f7       	brne	.-12     	; 0xdc <BL_GetMessage+0x10>
	{
		BluetoothMessage[i] = BL_GetChar();
	}
	BL_FlushRxBuf();  // flush our buffer and start from the beginning
  e8:	0e 94 37 01 	call	0x26e	; 0x26e <BL_FlushRxBuf>

}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <BL_DefComd>:


void BL_DefComd()
{
	
	BL_GetMessage(); //pulling up buffer's data one by one
  f6:	0e 94 66 00 	call	0xcc	; 0xcc <BL_GetMessage>
	if ((BluetoothMessage[0] == '-')|(BluetoothMessage[0] == '+'))
  fa:	90 91 21 01 	lds	r25, 0x0121
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	9b 32       	cpi	r25, 0x2B	; 43
 102:	09 f0       	breq	.+2      	; 0x106 <BL_DefComd+0x10>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	81 11       	cpse	r24, r1
 108:	06 c0       	rjmp	.+12     	; 0x116 <BL_DefComd+0x20>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	9d 32       	cpi	r25, 0x2D	; 45
 10e:	09 f0       	breq	.+2      	; 0x112 <BL_DefComd+0x1c>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	88 23       	and	r24, r24
 114:	41 f0       	breq	.+16     	; 0x126 <BL_DefComd+0x30>
	{
		PWMvalue = atoi(BluetoothMessage+1); //convert our string into float integer
 116:	82 e2       	ldi	r24, 0x22	; 34
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <atoi>
 11e:	90 93 01 01 	sts	0x0101, r25
 122:	80 93 00 01 	sts	0x0100, r24
 126:	08 95       	ret

00000128 <__vector_18>:
uint8_t rxBufHead = 0;
uint8_t rxCount = 0;// Receive variables
uint8_t BLmesIsComplete;

ISR (USART_RX_vect)   // receive interrupt routine
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	if(rxCount < SIZE_BUF)
 138:	80 91 02 01 	lds	r24, 0x0102
 13c:	80 32       	cpi	r24, 0x20	; 32
 13e:	28 f5       	brcc	.+74     	; 0x18a <__vector_18+0x62>
	{
		BLrxBuf[rxBufTail] = UDR0;
 140:	80 91 c6 00 	lds	r24, 0x00C6
 144:	e0 91 04 01 	lds	r30, 0x0104
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e5 5d       	subi	r30, 0xD5	; 213
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	80 83       	st	Z, r24
		
		
				
		if(BLrxBuf[rxBufTail] == 0x26)// if '&'
 150:	86 32       	cpi	r24, 0x26	; 38
 152:	29 f4       	brne	.+10     	; 0x15e <__vector_18+0x36>
		//if(rxBufTail>1)
		{	
			PORTB |= (1<< PORTB5);
 154:	2d 9a       	sbi	0x05, 5	; 5
			BLmesIsComplete = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 6b 01 	sts	0x016B, r24
 15c:	07 c0       	rjmp	.+14     	; 0x16c <__vector_18+0x44>
		}
		
		else if (BLrxBuf[rxBufTail] == 'd')
 15e:	84 36       	cpi	r24, 0x64	; 100
 160:	21 f4       	brne	.+8      	; 0x16a <__vector_18+0x42>
		{
			DebugAsk = 1;	
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 05 01 	sts	0x0105, r24
 168:	01 c0       	rjmp	.+2      	; 0x16c <__vector_18+0x44>
		}
				
		else
		{
			PORTB &= ~(1 << PORTB5);
 16a:	2d 98       	cbi	0x05, 5	; 5
		}
		
		rxBufTail++;
 16c:	80 91 04 01 	lds	r24, 0x0104
 170:	8f 5f       	subi	r24, 0xFF	; 255
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 172:	80 32       	cpi	r24, 0x20	; 32
 174:	19 f0       	breq	.+6      	; 0x17c <__vector_18+0x54>
		else
		{
			PORTB &= ~(1 << PORTB5);
		}
		
		rxBufTail++;
 176:	80 93 04 01 	sts	0x0104, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <__vector_18+0x58>
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 17c:	10 92 04 01 	sts	0x0104, r1
		rxCount++;
 180:	80 91 02 01 	lds	r24, 0x0102
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 02 01 	sts	0x0102, r24
		
	}
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_20>:

ISR (USART_TX_vect)   // transmit interrupt routine
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	if(txCount > 0)
 1aa:	80 91 06 01 	lds	r24, 0x0106
 1ae:	88 23       	and	r24, r24
 1b0:	b9 f0       	breq	.+46     	; 0x1e0 <__vector_20+0x46>
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
 1b2:	e0 91 07 01 	lds	r30, 0x0107
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e5 5b       	subi	r30, 0xB5	; 181
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
 1be:	80 93 c6 00 	sts	0x00C6, r24
		txCount--;
 1c2:	80 91 06 01 	lds	r24, 0x0106
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	80 93 06 01 	sts	0x0106, r24
		txBufHead++;
 1cc:	80 91 07 01 	lds	r24, 0x0107
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 1d2:	80 32       	cpi	r24, 0x20	; 32
 1d4:	19 f0       	breq	.+6      	; 0x1dc <__vector_20+0x42>
{
	if(txCount > 0)
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
		txCount--;
		txBufHead++;
 1d6:	80 93 07 01 	sts	0x0107, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__vector_20+0x46>
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 1dc:	10 92 07 01 	sts	0x0107, r1
		
	}
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <BL_Init>:

void BL_Init(uint16_t ubrr) // initialize UART
{
	
	//set baud rate = 9600bps
	UBRR0H = (uint8_t)(ubrr>>8);
 1f0:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)ubrr;
 1f4:	80 93 c4 00 	sts	0x00C4, r24
	
	//set 1 stop bit, no parity bit and 8 bit character size
	UCSR0C = 0x06;  // (1<<UCSZ01)|(1<<UCSZ00)
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	80 93 c2 00 	sts	0x00C2, r24
	
	//enable transmission and reception 0x78
	UCSR0B |= (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1fe:	e1 ec       	ldi	r30, 0xC1	; 193
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	88 6d       	ori	r24, 0xD8	; 216
 206:	80 83       	st	Z, r24
	sei();
 208:	78 94       	sei
 20a:	08 95       	ret

0000020c <BL_PutChar>:
}

void BL_PutChar(uint8_t sym)// write next symbol into ring buffer
{
	if (((UCSR0A & (1<<UDRE0)) != 0) && (txCount == 0)) UDR0 = sym; // if udr is empty and it's first byte from
 20c:	90 91 c0 00 	lds	r25, 0x00C0
 210:	95 ff       	sbrs	r25, 5
 212:	07 c0       	rjmp	.+14     	; 0x222 <BL_PutChar+0x16>
 214:	90 91 06 01 	lds	r25, 0x0106
 218:	91 11       	cpse	r25, r1
 21a:	03 c0       	rjmp	.+6      	; 0x222 <BL_PutChar+0x16>
 21c:	80 93 c6 00 	sts	0x00C6, r24
 220:	08 95       	ret
																	// ring buffer we write it directly into udr
    else
	{
		
		if (txCount < SIZE_BUF)
 222:	90 91 06 01 	lds	r25, 0x0106
 226:	90 32       	cpi	r25, 0x20	; 32
 228:	90 f4       	brcc	.+36     	; 0x24e <BL_PutChar+0x42>
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
 22a:	20 91 08 01 	lds	r18, 0x0108
 22e:	e2 2f       	mov	r30, r18
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	e5 5b       	subi	r30, 0xB5	; 181
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	80 83       	st	Z, r24
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	90 93 06 01 	sts	0x0106, r25
			txBufTail++; // increase our pointer
 23e:	2f 5f       	subi	r18, 0xFF	; 255
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 240:	20 32       	cpi	r18, 0x20	; 32
 242:	19 f0       	breq	.+6      	; 0x24a <BL_PutChar+0x3e>
		if (txCount < SIZE_BUF)
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
			txBufTail++; // increase our pointer
 244:	20 93 08 01 	sts	0x0108, r18
 248:	08 95       	ret
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 24a:	10 92 08 01 	sts	0x0108, r1
 24e:	08 95       	ret

00000250 <BL_SendStr>:
		}
	}
}

void BL_SendStr(uint8_t *data)// send string start from the first member with address pointed by *data
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ec 01       	movw	r28, r24
	uint8_t sym;
	while(*data) // while data isn't '\0' or while data consist any data
 256:	88 81       	ld	r24, Y
 258:	88 23       	and	r24, r24
 25a:	31 f0       	breq	.+12     	; 0x268 <BL_SendStr+0x18>
 25c:	21 96       	adiw	r28, 0x01	; 1
	{
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
 25e:	0e 94 06 01 	call	0x20c	; 0x20c <BL_PutChar>
}

void BL_SendStr(uint8_t *data)// send string start from the first member with address pointed by *data
{
	uint8_t sym;
	while(*data) // while data isn't '\0' or while data consist any data
 262:	89 91       	ld	r24, Y+
 264:	81 11       	cpse	r24, r1
 266:	fb cf       	rjmp	.-10     	; 0x25e <BL_SendStr+0xe>
	{
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
	}
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <BL_FlushRxBuf>:

void BL_FlushRxBuf(void)  // flush our ring buffer after getting all of the array's member in out CurrentValue variable
{
	rxBufTail = 0;
 26e:	10 92 04 01 	sts	0x0104, r1
	rxBufHead = 0;
 272:	10 92 03 01 	sts	0x0103, r1
	rxCount = 0;
 276:	10 92 02 01 	sts	0x0102, r1
 27a:	08 95       	ret

0000027c <BL_GetChar>:
}

uint8_t BL_GetChar(void) // take one symbol from buffer using the Head pointer
{
	uint8_t sym;
	if(rxCount > 0)
 27c:	80 91 02 01 	lds	r24, 0x0102
 280:	88 23       	and	r24, r24
 282:	a1 f0       	breq	.+40     	; 0x2ac <BL_GetChar+0x30>
	{
		sym	= BLrxBuf[rxBufHead];
 284:	90 91 03 01 	lds	r25, 0x0103
 288:	e9 2f       	mov	r30, r25
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	e5 5d       	subi	r30, 0xD5	; 213
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	20 81       	ld	r18, Z
		rxCount --;
 292:	81 50       	subi	r24, 0x01	; 1
 294:	80 93 02 01 	sts	0x0102, r24
		rxBufHead++;
 298:	9f 5f       	subi	r25, 0xFF	; 255
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 29a:	90 32       	cpi	r25, 0x20	; 32
 29c:	21 f0       	breq	.+8      	; 0x2a6 <BL_GetChar+0x2a>
	uint8_t sym;
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
 29e:	90 93 03 01 	sts	0x0103, r25
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
		return sym;
 2a2:	82 2f       	mov	r24, r18
 2a4:	08 95       	ret
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 2a6:	10 92 03 01 	sts	0x0103, r1
		return sym;
 2aa:	82 2f       	mov	r24, r18
	}
	return 0;
}
 2ac:	08 95       	ret

000002ae <main>:
uint8_t DebugAskAnswer[16];


int main(void)
{
	SW_RX_Init(); 
 2ae:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SW_RX_Init>
	BL_Init(MYUBRR);
 2b2:	87 e6       	ldi	r24, 0x67	; 103
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <BL_Init>
	PWM_Init();
 2ba:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PWM_Init>
					StrScaleValueDetect = itoa(ScaleValueDetect,StrScaleValueDetect,10);
				}	
				
		if((ScaleValue < (ScaleValueDetect - 2)) && (ScaleValue > 5))
		{
			OCR2A = 0;
 2be:	c3 eb       	ldi	r28, 0xB3	; 179
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
	BL_Init(MYUBRR);
	PWM_Init();
		
    while (1) 
    {
		if(SWrxDataPending)
 2c2:	80 91 96 01 	lds	r24, 0x0196
 2c6:	81 11       	cpse	r24, r1
			{
				SW_RX_Fill_Buffer();
 2c8:	0e 94 83 02 	call	0x506	; 0x506 <SW_RX_Fill_Buffer>
			}
		if(SWmesIsComplete)
 2cc:	80 91 97 01 	lds	r24, 0x0197
 2d0:	88 23       	and	r24, r24
 2d2:	d9 f0       	breq	.+54     	; 0x30a <main+0x5c>
			{

			SW_GetMessage();
 2d4:	0e 94 c9 02 	call	0x592	; 0x592 <SW_GetMessage>
			ScaleValue = atof(SWscaleValueForBL+1);
 2d8:	89 e9       	ldi	r24, 0x99	; 153
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <atof>
 2e0:	60 93 80 01 	sts	0x0180, r22
 2e4:	70 93 81 01 	sts	0x0181, r23
 2e8:	80 93 82 01 	sts	0x0182, r24
 2ec:	90 93 83 01 	sts	0x0183, r25
			//OCR2A = ScaleValue;
			if (ScaleValue > 0)
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	a9 01       	movw	r20, r18
 2f6:	0e 94 ac 03 	call	0x758	; 0x758 <__gesf2>
 2fa:	18 16       	cp	r1, r24
 2fc:	24 f4       	brge	.+8      	; 0x306 <main+0x58>
			{
				BL_SendStr (SWscaleValueForBL);
 2fe:	88 e9       	ldi	r24, 0x98	; 152
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 28 01 	call	0x250	; 0x250 <BL_SendStr>
			}
			SWmesIsComplete = 0;		
 306:	10 92 97 01 	sts	0x0197, r1
			
			}
				
			
						
		if (BLmesIsComplete) 
 30a:	80 91 6b 01 	lds	r24, 0x016B
 30e:	88 23       	and	r24, r24
 310:	21 f0       	breq	.+8      	; 0x31a <main+0x6c>
			{
			//BL_SendStr (BluetoothMessage);
						
			BL_DefComd(); // defining gotten message from bluetooth (smartphone)
 312:	0e 94 7b 00 	call	0xf6	; 0xf6 <BL_DefComd>
			BLmesIsComplete = 0;  // reset flag "complete message from smartphone"
 316:	10 92 6b 01 	sts	0x016B, r1
			}
		
		if(DebugAsk)
 31a:	80 91 05 01 	lds	r24, 0x0105
 31e:	88 23       	and	r24, r24
 320:	41 f0       	breq	.+16     	; 0x332 <main+0x84>
			{
				BL_SendStr(StrScaleValueDetect);
 322:	80 91 6c 01 	lds	r24, 0x016C
 326:	90 91 6d 01 	lds	r25, 0x016D
 32a:	0e 94 28 01 	call	0x250	; 0x250 <BL_SendStr>
				DebugAsk = 0;
 32e:	10 92 05 01 	sts	0x0105, r1
			}
				
		if (PWMvalue && (ScaleValue > 20))
 332:	80 91 00 01 	lds	r24, 0x0100
 336:	90 91 01 01 	lds	r25, 0x0101
 33a:	89 2b       	or	r24, r25
 33c:	69 f1       	breq	.+90     	; 0x398 <main+0xea>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 ea       	ldi	r20, 0xA0	; 160
 344:	51 e4       	ldi	r21, 0x41	; 65
 346:	60 91 80 01 	lds	r22, 0x0180
 34a:	70 91 81 01 	lds	r23, 0x0181
 34e:	80 91 82 01 	lds	r24, 0x0182
 352:	90 91 83 01 	lds	r25, 0x0183
 356:	0e 94 ac 03 	call	0x758	; 0x758 <__gesf2>
 35a:	18 16       	cp	r1, r24
 35c:	ec f4       	brge	.+58     	; 0x398 <main+0xea>
				{
					PWM_PinValue();   // write gotten correction value from smartphone to OCR2A for change OC2A pin PWM
 35e:	0e 94 00 02 	call	0x400	; 0x400 <PWM_PinValue>
					//PWMvalue = 0;
					ScaleValueDetect = ScaleValue; 
 362:	60 91 80 01 	lds	r22, 0x0180
 366:	70 91 81 01 	lds	r23, 0x0181
 36a:	80 91 82 01 	lds	r24, 0x0182
 36e:	90 91 83 01 	lds	r25, 0x0183
 372:	0e 94 10 03 	call	0x620	; 0x620 <__fixsfsi>
 376:	dc 01       	movw	r26, r24
 378:	cb 01       	movw	r24, r22
 37a:	90 93 7f 01 	sts	0x017F, r25
 37e:	80 93 7e 01 	sts	0x017E, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 382:	60 91 6c 01 	lds	r22, 0x016C
 386:	70 91 6d 01 	lds	r23, 0x016D
 38a:	4a e0       	ldi	r20, 0x0A	; 10
 38c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__itoa_ncheck>
					StrScaleValueDetect = itoa(ScaleValueDetect,StrScaleValueDetect,10);
 390:	90 93 6d 01 	sts	0x016D, r25
 394:	80 93 6c 01 	sts	0x016C, r24
				}	
				
		if((ScaleValue < (ScaleValueDetect - 2)) && (ScaleValue > 5))
 398:	c0 90 80 01 	lds	r12, 0x0180
 39c:	d0 90 81 01 	lds	r13, 0x0181
 3a0:	e0 90 82 01 	lds	r14, 0x0182
 3a4:	f0 90 83 01 	lds	r15, 0x0183
 3a8:	80 91 7e 01 	lds	r24, 0x017E
 3ac:	90 91 7f 01 	lds	r25, 0x017F
 3b0:	bc 01       	movw	r22, r24
 3b2:	62 50       	subi	r22, 0x02	; 2
 3b4:	71 09       	sbc	r23, r1
 3b6:	07 2e       	mov	r0, r23
 3b8:	00 0c       	add	r0, r0
 3ba:	88 0b       	sbc	r24, r24
 3bc:	99 0b       	sbc	r25, r25
 3be:	0e 94 48 03 	call	0x690	; 0x690 <__floatsisf>
 3c2:	a7 01       	movw	r20, r14
 3c4:	96 01       	movw	r18, r12
 3c6:	0e 94 ac 03 	call	0x758	; 0x758 <__gesf2>
 3ca:	18 16       	cp	r1, r24
 3cc:	0c f0       	brlt	.+2      	; 0x3d0 <main+0x122>
 3ce:	79 cf       	rjmp	.-270    	; 0x2c2 <main+0x14>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 ea       	ldi	r20, 0xA0	; 160
 3d6:	50 e4       	ldi	r21, 0x40	; 64
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 ac 03 	call	0x758	; 0x758 <__gesf2>
 3e0:	18 16       	cp	r1, r24
 3e2:	0c f0       	brlt	.+2      	; 0x3e6 <main+0x138>
 3e4:	6e cf       	rjmp	.-292    	; 0x2c2 <main+0x14>
		{
			OCR2A = 0;
 3e6:	18 82       	st	Y, r1
 3e8:	6c cf       	rjmp	.-296    	; 0x2c2 <main+0x14>

000003ea <PWM_Init>:
#include "BLdefComd.h"


void PWM_Init()
{
	DDRB = (1 << PORTB3)|(1 << PORTB5);// set up pin portb3 like output 
 3ea:	88 e2       	ldi	r24, 0x28	; 40
 3ec:	84 b9       	out	0x04, r24	; 4
	TCCR2A = (1 << WGM21)|(1 << WGM20)|(1<< COM2A1);
 3ee:	83 e8       	ldi	r24, 0x83	; 131
 3f0:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1<<CS20);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 0x00;
 3fa:	10 92 b3 00 	sts	0x00B3, r1
 3fe:	08 95       	ret

00000400 <PWM_PinValue>:
}


void PWM_PinValue()
{
	OCR2A = PWMvalue;		
 400:	80 91 00 01 	lds	r24, 0x0100
 404:	80 93 b3 00 	sts	0x00B3, r24
 408:	08 95       	ret

0000040a <__vector_1>:
	SWrxBufTail = 0;
	
}

ISR (INT0_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	8f 93       	push	r24
 416:	ef 93       	push	r30
 418:	ff 93       	push	r31
	SWnumBit = 0;
 41a:	10 92 09 01 	sts	0x0109, r1
	DISABLE_EXTERNAL0_INTERRUPT ();		// disable interrupt during the data bits
 41e:	e8 98       	cbi	0x1d, 0	; 29
	
	DISABLE_TIMER_INTERRUPT();			//disable timer to change its registers
 420:	ee e6       	ldi	r30, 0x6E	; 110
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	8d 7f       	andi	r24, 0xFD	; 253
 428:	80 83       	st	Z, r24
	TCCR0B &= ~( 1 << CS01 );			//reset prescaler counter
 42a:	85 b5       	in	r24, 0x25	; 37
 42c:	8d 7f       	andi	r24, 0xFD	; 253
 42e:	85 bd       	out	0x25, r24	; 37
	
	TCNT0 = INTERRUPT_EXEC_CYCL;		// Clear counter register. Include time to run interrupt rutine
 430:	89 e0       	ldi	r24, 0x09	; 9
 432:	86 bd       	out	0x26, r24	; 38
	
	TCCR0B |= ( 1 << CS01 );			// Start prescaler clock
 434:	85 b5       	in	r24, 0x25	; 37
 436:	82 60       	ori	r24, 0x02	; 2
 438:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = TICKSFIRST;			// Count one and half period into the future
 43a:	87 e6       	ldi	r24, 0x67	; 103
 43c:	87 bd       	out	0x27, r24	; 39
	
	SW_RX_Bit_Count = 0;				// Clear received bit counter.
 43e:	10 92 1f 01 	sts	0x011F, r1
	
	
	ENABLE_TIMER_INTERRUPT();			// Enable timer0 interrupt on again
 442:	80 81       	ld	r24, Z
 444:	82 60       	ori	r24, 0x02	; 2
 446:	80 83       	st	Z, r24
	CLEAR_TIMER_INTERRUPT();			// Clear interrupt bits
 448:	a9 9a       	sbi	0x15, 1	; 21
}
 44a:	ff 91       	pop	r31
 44c:	ef 91       	pop	r30
 44e:	8f 91       	pop	r24
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	8f 93       	push	r24
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	if(!SWnumBit)
 46a:	80 91 09 01 	lds	r24, 0x0109
 46e:	81 11       	cpse	r24, r1
 470:	06 c0       	rjmp	.+12     	; 0x47e <__vector_14+0x24>
	{
		SWnumBit = 1;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 09 01 	sts	0x0109, r24
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 478:	80 ed       	ldi	r24, 0xD0	; 208
 47a:	87 bd       	out	0x27, r24	; 39
 47c:	22 c0       	rjmp	.+68     	; 0x4c2 <__vector_14+0x68>
	}
	else
	{
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 47e:	80 ed       	ldi	r24, 0xD0	; 208
 480:	87 bd       	out	0x27, r24	; 39
		// Receiving lsb first
		if( SW_RX_Bit_Count < 8 )
 482:	80 91 1f 01 	lds	r24, 0x011F
 486:	88 30       	cpi	r24, 0x08	; 8
 488:	90 f4       	brcc	.+36     	; 0x4ae <__vector_14+0x54>
		{
			SW_RX_Bit_Count++;
 48a:	80 91 1f 01 	lds	r24, 0x011F
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 93 1f 01 	sts	0x011F, r24
			SW_RX_Data = (SW_RX_Data>>1); // Shift due to receiving lsb first
 494:	80 91 20 01 	lds	r24, 0x0120
 498:	86 95       	lsr	r24
 49a:	80 93 20 01 	sts	0x0120, r24
			if ( GET_RX_PIN() != 0 )
 49e:	4a 9b       	sbis	0x09, 2	; 9
 4a0:	10 c0       	rjmp	.+32     	; 0x4c2 <__vector_14+0x68>
			{
				SW_RX_Data |= 0x80;		  // If a logical 1 is read, let the data mirror this
 4a2:	80 91 20 01 	lds	r24, 0x0120
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	80 93 20 01 	sts	0x0120, r24
 4ac:	0a c0       	rjmp	.+20     	; 0x4c2 <__vector_14+0x68>
			}
		}
		else
		{
			SWrxDataPending = 1;		// Enter data pending when one byte is received
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 96 01 	sts	0x0196, r24
			DISABLE_TIMER_INTERRUPT();	// Disable this interrupt
 4b4:	ee e6       	ldi	r30, 0x6E	; 110
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	8d 7f       	andi	r24, 0xFD	; 253
 4bc:	80 83       	st	Z, r24
			EIFR |= (1 << INTF0);	// Reset flag not to enter the ISR one extra time
 4be:	e0 9a       	sbi	0x1c, 0	; 28
			ENABLE_EXTERNAL0_INTERRUPT(); // Enable interrupt to receive more bytes.
 4c0:	e8 9a       	sbi	0x1d, 0	; 29
		}
	 }
}
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	8f 91       	pop	r24
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <SW_RX_Init>:

void SW_RX_Init(void)
{
	//PORT
	PORTD |= ( 1<<SW_RX_PIN);	// RX_PIN is input, tri-stated
 4d2:	5a 9a       	sbi	0x0b, 2	; 11
	
	// Timer0
	DISABLE_TIMER_INTERRUPT();
 4d4:	ee e6       	ldi	r30, 0x6E	; 110
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	8d 7f       	andi	r24, 0xFD	; 253
 4dc:	80 83       	st	Z, r24
	TCCR0A = 0x00;		// Reset control register
 4de:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;		// Reset presclaler
 4e0:	15 bc       	out	0x25, r1	; 37
	TCCR0A |= (1 << WGM01);  //Timer in CTC mode
 4e2:	84 b5       	in	r24, 0x24	; 36
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);	 //divide by 8 prescaler
 4e8:	85 b5       	in	r24, 0x25	; 37
 4ea:	82 60       	ori	r24, 0x02	; 2
 4ec:	85 bd       	out	0x25, r24	; 37
	
	//External interrupt
	EIFR= 0x00;				//Init
 4ee:	1c ba       	out	0x1c, r1	; 28
	EICRA |= ( 1<<ISC01 );	//Interrupt sense control: falling edge
 4f0:	e9 e6       	ldi	r30, 0x69	; 105
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	82 60       	ori	r24, 0x02	; 2
 4f8:	80 83       	st	Z, r24
	ENABLE_EXTERNAL0_INTERRUPT();  // Turn external interrupt on
 4fa:	e8 9a       	sbi	0x1d, 0	; 29
	
	CLEAR_TIMER_INTERRUPT();
 4fc:	a9 9a       	sbi	0x15, 1	; 21
	//Internal State Variable
	SWrxDataPending = 0;
 4fe:	10 92 96 01 	sts	0x0196, r1
	sei();
 502:	78 94       	sei
 504:	08 95       	ret

00000506 <SW_RX_Fill_Buffer>:
	
}

void SW_RX_Fill_Buffer(void)
{
		if(SWrxCount < SW_SIZE_BUF)
 506:	80 91 0a 01 	lds	r24, 0x010A
 50a:	82 31       	cpi	r24, 0x12	; 18
 50c:	28 f5       	brcc	.+74     	; 0x558 <SW_RX_Fill_Buffer+0x52>
		{
			SWrxBuf[SWrxBufTail] = SW_RX_Data;
 50e:	e0 91 0c 01 	lds	r30, 0x010C
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 91 20 01 	lds	r24, 0x0120
 518:	e3 5f       	subi	r30, 0xF3	; 243
 51a:	fe 4f       	sbci	r31, 0xFE	; 254
 51c:	80 83       	st	Z, r24
			SWrxDataPending = 0;
 51e:	10 92 96 01 	sts	0x0196, r1
			if (SWrxBuf[SWrxBufTail] == 0x0A)
 522:	e0 91 0c 01 	lds	r30, 0x010C
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	e3 5f       	subi	r30, 0xF3	; 243
 52a:	fe 4f       	sbci	r31, 0xFE	; 254
 52c:	80 81       	ld	r24, Z
 52e:	8a 30       	cpi	r24, 0x0A	; 10
 530:	19 f4       	brne	.+6      	; 0x538 <SW_RX_Fill_Buffer+0x32>
			{
				SWmesIsComplete = 1;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	80 93 97 01 	sts	0x0197, r24
			}
			SWrxBufTail++;
 538:	80 91 0c 01 	lds	r24, 0x010C
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	80 93 0c 01 	sts	0x010C, r24
			if(SWrxBufTail == SW_SIZE_BUF) SWrxBufTail = 0;
 542:	80 91 0c 01 	lds	r24, 0x010C
 546:	82 31       	cpi	r24, 0x12	; 18
 548:	11 f4       	brne	.+4      	; 0x54e <SW_RX_Fill_Buffer+0x48>
 54a:	10 92 0c 01 	sts	0x010C, r1
			SWrxCount++;
 54e:	80 91 0a 01 	lds	r24, 0x010A
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	80 93 0a 01 	sts	0x010A, r24
 558:	08 95       	ret

0000055a <SW_GetChar>:
}

uint8_t SW_GetChar(void)
{
	uint8_t SWsym;
	if (SWrxCount > 0)
 55a:	80 91 0a 01 	lds	r24, 0x010A
 55e:	88 23       	and	r24, r24
 560:	b9 f0       	breq	.+46     	; 0x590 <SW_GetChar+0x36>
	{
		SWsym = SWrxBuf[SWrxBufHead];
 562:	e0 91 0b 01 	lds	r30, 0x010B
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	e3 5f       	subi	r30, 0xF3	; 243
 56a:	fe 4f       	sbci	r31, 0xFE	; 254
 56c:	80 81       	ld	r24, Z
		SWrxCount--;
 56e:	90 91 0a 01 	lds	r25, 0x010A
 572:	91 50       	subi	r25, 0x01	; 1
 574:	90 93 0a 01 	sts	0x010A, r25
		SWrxBufHead++;
 578:	90 91 0b 01 	lds	r25, 0x010B
 57c:	9f 5f       	subi	r25, 0xFF	; 255
 57e:	90 93 0b 01 	sts	0x010B, r25
		if(SWrxBufHead == SW_SIZE_BUF) SWrxBufHead = 0;
 582:	90 91 0b 01 	lds	r25, 0x010B
 586:	92 31       	cpi	r25, 0x12	; 18
 588:	19 f4       	brne	.+6      	; 0x590 <SW_GetChar+0x36>
 58a:	10 92 0b 01 	sts	0x010B, r1
 58e:	08 95       	ret
		return SWsym;
	}
}
 590:	08 95       	ret

00000592 <SW_GetMessage>:

void SW_GetMessage(void)
{
 592:	cf 92       	push	r12
 594:	df 92       	push	r13
 596:	ef 92       	push	r14
 598:	ff 92       	push	r15
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	11 e0       	ldi	r17, 0x01	; 1
 5a4:	c0 e0       	ldi	r28, 0x00	; 0
 5a6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 5a8:	dd 24       	eor	r13, r13
 5aa:	d3 94       	inc	r13
	{
		uint8_t SWvalue = SW_GetChar();
		SWrxMessage[i] = SWvalue;
		SWscaleValueForBL[0] = 'v';
 5ac:	0f 2e       	mov	r0, r31
 5ae:	f8 e9       	ldi	r31, 0x98	; 152
 5b0:	ef 2e       	mov	r14, r31
 5b2:	f1 e0       	ldi	r31, 0x01	; 1
 5b4:	ff 2e       	mov	r15, r31
 5b6:	f0 2d       	mov	r31, r0
 5b8:	06 e7       	ldi	r16, 0x76	; 118
				SWscaleValueForBL[j] = SWvalue;
				j++;
			}
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
 5ba:	0f 2e       	mov	r0, r31
 5bc:	fd e0       	ldi	r31, 0x0D	; 13
 5be:	cf 2e       	mov	r12, r31
 5c0:	f0 2d       	mov	r31, r0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <SW_GetMessage+0x36>
 5c4:	21 96       	adiw	r28, 0x01	; 1
 5c6:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
	{
		uint8_t SWvalue = SW_GetChar();
 5c8:	0e 94 ad 02 	call	0x55a	; 0x55a <SW_GetChar>
		SWrxMessage[i] = SWvalue;
 5cc:	fe 01       	movw	r30, r28
 5ce:	ec 57       	subi	r30, 0x7C	; 124
 5d0:	fe 4f       	sbci	r31, 0xFE	; 254
 5d2:	80 83       	st	Z, r24
		SWscaleValueForBL[0] = 'v';
 5d4:	f7 01       	movw	r30, r14
 5d6:	00 83       	st	Z, r16
 5d8:	9c 2f       	mov	r25, r28
 5da:	2c 2f       	mov	r18, r28
 5dc:	27 50       	subi	r18, 0x07	; 7
		if ( (i>6) && (i<14) && (!(SWrxMessage[i] == ' ')))
 5de:	27 30       	cpi	r18, 0x07	; 7
 5e0:	60 f4       	brcc	.+24     	; 0x5fa <SW_GetMessage+0x68>
 5e2:	fe 01       	movw	r30, r28
 5e4:	ec 57       	subi	r30, 0x7C	; 124
 5e6:	fe 4f       	sbci	r31, 0xFE	; 254
 5e8:	20 81       	ld	r18, Z
 5ea:	20 32       	cpi	r18, 0x20	; 32
 5ec:	31 f0       	breq	.+12     	; 0x5fa <SW_GetMessage+0x68>
			{
				SWscaleValueForBL[j] = SWvalue;
 5ee:	ed 2d       	mov	r30, r13
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	e8 56       	subi	r30, 0x68	; 104
 5f4:	fe 4f       	sbci	r31, 0xFE	; 254
 5f6:	80 83       	st	Z, r24
				j++;
 5f8:	d3 94       	inc	r13
			}
		if (i==14)
 5fa:	9e 30       	cpi	r25, 0x0E	; 14
 5fc:	31 f4       	brne	.+12     	; 0x60a <SW_GetMessage+0x78>
		{
			SWscaleValueForBL[j] = 0x0D;
 5fe:	ed 2d       	mov	r30, r13
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	e8 56       	subi	r30, 0x68	; 104
 604:	fe 4f       	sbci	r31, 0xFE	; 254
 606:	c0 82       	st	Z, r12
 608:	dd cf       	rjmp	.-70     	; 0x5c4 <SW_GetMessage+0x32>

void SW_GetMessage(void)
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 60a:	12 31       	cpi	r17, 0x12	; 18
 60c:	d8 f2       	brcs	.-74     	; 0x5c4 <SW_GetMessage+0x32>
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
		}
	}
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	ef 90       	pop	r14
 61a:	df 90       	pop	r13
 61c:	cf 90       	pop	r12
 61e:	08 95       	ret

00000620 <__fixsfsi>:
 620:	0e 94 17 03 	call	0x62e	; 0x62e <__fixunssfsi>
 624:	68 94       	set
 626:	b1 11       	cpse	r27, r1
 628:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>
 62c:	08 95       	ret

0000062e <__fixunssfsi>:
 62e:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_splitA>
 632:	88 f0       	brcs	.+34     	; 0x656 <__fixunssfsi+0x28>
 634:	9f 57       	subi	r25, 0x7F	; 127
 636:	98 f0       	brcs	.+38     	; 0x65e <__fixunssfsi+0x30>
 638:	b9 2f       	mov	r27, r25
 63a:	99 27       	eor	r25, r25
 63c:	b7 51       	subi	r27, 0x17	; 23
 63e:	b0 f0       	brcs	.+44     	; 0x66c <__fixunssfsi+0x3e>
 640:	e1 f0       	breq	.+56     	; 0x67a <__fixunssfsi+0x4c>
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	1a f0       	brmi	.+6      	; 0x652 <__fixunssfsi+0x24>
 64c:	ba 95       	dec	r27
 64e:	c9 f7       	brne	.-14     	; 0x642 <__fixunssfsi+0x14>
 650:	14 c0       	rjmp	.+40     	; 0x67a <__fixunssfsi+0x4c>
 652:	b1 30       	cpi	r27, 0x01	; 1
 654:	91 f0       	breq	.+36     	; 0x67a <__fixunssfsi+0x4c>
 656:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_zero>
 65a:	b1 e0       	ldi	r27, 0x01	; 1
 65c:	08 95       	ret
 65e:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_zero>
 662:	67 2f       	mov	r22, r23
 664:	78 2f       	mov	r23, r24
 666:	88 27       	eor	r24, r24
 668:	b8 5f       	subi	r27, 0xF8	; 248
 66a:	39 f0       	breq	.+14     	; 0x67a <__fixunssfsi+0x4c>
 66c:	b9 3f       	cpi	r27, 0xF9	; 249
 66e:	cc f3       	brlt	.-14     	; 0x662 <__fixunssfsi+0x34>
 670:	86 95       	lsr	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b3 95       	inc	r27
 678:	d9 f7       	brne	.-10     	; 0x670 <__fixunssfsi+0x42>
 67a:	3e f4       	brtc	.+14     	; 0x68a <__fixunssfsi+0x5c>
 67c:	90 95       	com	r25
 67e:	80 95       	com	r24
 680:	70 95       	com	r23
 682:	61 95       	neg	r22
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8f 4f       	sbci	r24, 0xFF	; 255
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	08 95       	ret

0000068c <__floatunsisf>:
 68c:	e8 94       	clt
 68e:	09 c0       	rjmp	.+18     	; 0x6a2 <__floatsisf+0x12>

00000690 <__floatsisf>:
 690:	97 fb       	bst	r25, 7
 692:	3e f4       	brtc	.+14     	; 0x6a2 <__floatsisf+0x12>
 694:	90 95       	com	r25
 696:	80 95       	com	r24
 698:	70 95       	com	r23
 69a:	61 95       	neg	r22
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	99 23       	and	r25, r25
 6a4:	a9 f0       	breq	.+42     	; 0x6d0 <__floatsisf+0x40>
 6a6:	f9 2f       	mov	r31, r25
 6a8:	96 e9       	ldi	r25, 0x96	; 150
 6aa:	bb 27       	eor	r27, r27
 6ac:	93 95       	inc	r25
 6ae:	f6 95       	lsr	r31
 6b0:	87 95       	ror	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b7 95       	ror	r27
 6b8:	f1 11       	cpse	r31, r1
 6ba:	f8 cf       	rjmp	.-16     	; 0x6ac <__floatsisf+0x1c>
 6bc:	fa f4       	brpl	.+62     	; 0x6fc <__floatsisf+0x6c>
 6be:	bb 0f       	add	r27, r27
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__floatsisf+0x36>
 6c2:	60 ff       	sbrs	r22, 0
 6c4:	1b c0       	rjmp	.+54     	; 0x6fc <__floatsisf+0x6c>
 6c6:	6f 5f       	subi	r22, 0xFF	; 255
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <__floatsisf+0x6c>
 6d0:	88 23       	and	r24, r24
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <__floatsisf+0x48>
 6d4:	96 e9       	ldi	r25, 0x96	; 150
 6d6:	11 c0       	rjmp	.+34     	; 0x6fa <__floatsisf+0x6a>
 6d8:	77 23       	and	r23, r23
 6da:	21 f0       	breq	.+8      	; 0x6e4 <__floatsisf+0x54>
 6dc:	9e e8       	ldi	r25, 0x8E	; 142
 6de:	87 2f       	mov	r24, r23
 6e0:	76 2f       	mov	r23, r22
 6e2:	05 c0       	rjmp	.+10     	; 0x6ee <__floatsisf+0x5e>
 6e4:	66 23       	and	r22, r22
 6e6:	71 f0       	breq	.+28     	; 0x704 <__floatsisf+0x74>
 6e8:	96 e8       	ldi	r25, 0x86	; 134
 6ea:	86 2f       	mov	r24, r22
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	2a f0       	brmi	.+10     	; 0x6fc <__floatsisf+0x6c>
 6f2:	9a 95       	dec	r25
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	da f7       	brpl	.-10     	; 0x6f2 <__floatsisf+0x62>
 6fc:	88 0f       	add	r24, r24
 6fe:	96 95       	lsr	r25
 700:	87 95       	ror	r24
 702:	97 f9       	bld	r25, 7
 704:	08 95       	ret

00000706 <__fp_split3>:
 706:	57 fd       	sbrc	r21, 7
 708:	90 58       	subi	r25, 0x80	; 128
 70a:	44 0f       	add	r20, r20
 70c:	55 1f       	adc	r21, r21
 70e:	59 f0       	breq	.+22     	; 0x726 <__fp_splitA+0x10>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	71 f0       	breq	.+28     	; 0x730 <__fp_splitA+0x1a>
 714:	47 95       	ror	r20

00000716 <__fp_splitA>:
 716:	88 0f       	add	r24, r24
 718:	97 fb       	bst	r25, 7
 71a:	99 1f       	adc	r25, r25
 71c:	61 f0       	breq	.+24     	; 0x736 <__fp_splitA+0x20>
 71e:	9f 3f       	cpi	r25, 0xFF	; 255
 720:	79 f0       	breq	.+30     	; 0x740 <__fp_splitA+0x2a>
 722:	87 95       	ror	r24
 724:	08 95       	ret
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	14 06       	cpc	r1, r20
 72c:	55 1f       	adc	r21, r21
 72e:	f2 cf       	rjmp	.-28     	; 0x714 <__fp_split3+0xe>
 730:	46 95       	lsr	r20
 732:	f1 df       	rcall	.-30     	; 0x716 <__fp_splitA>
 734:	08 c0       	rjmp	.+16     	; 0x746 <__fp_splitA+0x30>
 736:	16 16       	cp	r1, r22
 738:	17 06       	cpc	r1, r23
 73a:	18 06       	cpc	r1, r24
 73c:	99 1f       	adc	r25, r25
 73e:	f1 cf       	rjmp	.-30     	; 0x722 <__fp_splitA+0xc>
 740:	86 95       	lsr	r24
 742:	71 05       	cpc	r23, r1
 744:	61 05       	cpc	r22, r1
 746:	08 94       	sec
 748:	08 95       	ret

0000074a <__fp_zero>:
 74a:	e8 94       	clt

0000074c <__fp_szero>:
 74c:	bb 27       	eor	r27, r27
 74e:	66 27       	eor	r22, r22
 750:	77 27       	eor	r23, r23
 752:	cb 01       	movw	r24, r22
 754:	97 f9       	bld	r25, 7
 756:	08 95       	ret

00000758 <__gesf2>:
 758:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_cmp>
 75c:	08 f4       	brcc	.+2      	; 0x760 <__gesf2+0x8>
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	08 95       	ret

00000762 <__fp_cmp>:
 762:	99 0f       	add	r25, r25
 764:	00 08       	sbc	r0, r0
 766:	55 0f       	add	r21, r21
 768:	aa 0b       	sbc	r26, r26
 76a:	e0 e8       	ldi	r30, 0x80	; 128
 76c:	fe ef       	ldi	r31, 0xFE	; 254
 76e:	16 16       	cp	r1, r22
 770:	17 06       	cpc	r1, r23
 772:	e8 07       	cpc	r30, r24
 774:	f9 07       	cpc	r31, r25
 776:	c0 f0       	brcs	.+48     	; 0x7a8 <__fp_cmp+0x46>
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	e4 07       	cpc	r30, r20
 77e:	f5 07       	cpc	r31, r21
 780:	98 f0       	brcs	.+38     	; 0x7a8 <__fp_cmp+0x46>
 782:	62 1b       	sub	r22, r18
 784:	73 0b       	sbc	r23, r19
 786:	84 0b       	sbc	r24, r20
 788:	95 0b       	sbc	r25, r21
 78a:	39 f4       	brne	.+14     	; 0x79a <__fp_cmp+0x38>
 78c:	0a 26       	eor	r0, r26
 78e:	61 f0       	breq	.+24     	; 0x7a8 <__fp_cmp+0x46>
 790:	23 2b       	or	r18, r19
 792:	24 2b       	or	r18, r20
 794:	25 2b       	or	r18, r21
 796:	21 f4       	brne	.+8      	; 0x7a0 <__fp_cmp+0x3e>
 798:	08 95       	ret
 79a:	0a 26       	eor	r0, r26
 79c:	09 f4       	brne	.+2      	; 0x7a0 <__fp_cmp+0x3e>
 79e:	a1 40       	sbci	r26, 0x01	; 1
 7a0:	a6 95       	lsr	r26
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	81 1d       	adc	r24, r1
 7a6:	81 1d       	adc	r24, r1
 7a8:	08 95       	ret

000007aa <atof>:
 7aa:	66 27       	eor	r22, r22
 7ac:	77 27       	eor	r23, r23
 7ae:	0c 94 24 04 	jmp	0x848	; 0x848 <strtod>

000007b2 <atoi>:
 7b2:	fc 01       	movw	r30, r24
 7b4:	88 27       	eor	r24, r24
 7b6:	99 27       	eor	r25, r25
 7b8:	e8 94       	clt
 7ba:	21 91       	ld	r18, Z+
 7bc:	20 32       	cpi	r18, 0x20	; 32
 7be:	e9 f3       	breq	.-6      	; 0x7ba <atoi+0x8>
 7c0:	29 30       	cpi	r18, 0x09	; 9
 7c2:	10 f0       	brcs	.+4      	; 0x7c8 <atoi+0x16>
 7c4:	2e 30       	cpi	r18, 0x0E	; 14
 7c6:	c8 f3       	brcs	.-14     	; 0x7ba <atoi+0x8>
 7c8:	2b 32       	cpi	r18, 0x2B	; 43
 7ca:	41 f0       	breq	.+16     	; 0x7dc <atoi+0x2a>
 7cc:	2d 32       	cpi	r18, 0x2D	; 45
 7ce:	39 f4       	brne	.+14     	; 0x7de <atoi+0x2c>
 7d0:	68 94       	set
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <atoi+0x2a>
 7d4:	0e 94 02 04 	call	0x804	; 0x804 <__mulhi_const_10>
 7d8:	82 0f       	add	r24, r18
 7da:	91 1d       	adc	r25, r1
 7dc:	21 91       	ld	r18, Z+
 7de:	20 53       	subi	r18, 0x30	; 48
 7e0:	2a 30       	cpi	r18, 0x0A	; 10
 7e2:	c0 f3       	brcs	.-16     	; 0x7d4 <atoi+0x22>
 7e4:	1e f4       	brtc	.+6      	; 0x7ec <atoi+0x3a>
 7e6:	90 95       	com	r25
 7e8:	81 95       	neg	r24
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	08 95       	ret

000007ee <__itoa_ncheck>:
 7ee:	bb 27       	eor	r27, r27
 7f0:	4a 30       	cpi	r20, 0x0A	; 10
 7f2:	31 f4       	brne	.+12     	; 0x800 <__itoa_ncheck+0x12>
 7f4:	99 23       	and	r25, r25
 7f6:	22 f4       	brpl	.+8      	; 0x800 <__itoa_ncheck+0x12>
 7f8:	bd e2       	ldi	r27, 0x2D	; 45
 7fa:	90 95       	com	r25
 7fc:	81 95       	neg	r24
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	0c 94 0b 04 	jmp	0x816	; 0x816 <__utoa_common>

00000804 <__mulhi_const_10>:
 804:	7a e0       	ldi	r23, 0x0A	; 10
 806:	97 9f       	mul	r25, r23
 808:	90 2d       	mov	r25, r0
 80a:	87 9f       	mul	r24, r23
 80c:	80 2d       	mov	r24, r0
 80e:	91 0d       	add	r25, r1
 810:	11 24       	eor	r1, r1
 812:	08 95       	ret

00000814 <__utoa_ncheck>:
 814:	bb 27       	eor	r27, r27

00000816 <__utoa_common>:
 816:	fb 01       	movw	r30, r22
 818:	55 27       	eor	r21, r21
 81a:	aa 27       	eor	r26, r26
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	aa 1f       	adc	r26, r26
 822:	a4 17       	cp	r26, r20
 824:	10 f0       	brcs	.+4      	; 0x82a <__utoa_common+0x14>
 826:	a4 1b       	sub	r26, r20
 828:	83 95       	inc	r24
 82a:	50 51       	subi	r21, 0x10	; 16
 82c:	b9 f7       	brne	.-18     	; 0x81c <__utoa_common+0x6>
 82e:	a0 5d       	subi	r26, 0xD0	; 208
 830:	aa 33       	cpi	r26, 0x3A	; 58
 832:	08 f0       	brcs	.+2      	; 0x836 <__utoa_common+0x20>
 834:	a9 5d       	subi	r26, 0xD9	; 217
 836:	a1 93       	st	Z+, r26
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	79 f7       	brne	.-34     	; 0x81a <__utoa_common+0x4>
 83c:	b1 11       	cpse	r27, r1
 83e:	b1 93       	st	Z+, r27
 840:	11 92       	st	Z+, r1
 842:	cb 01       	movw	r24, r22
 844:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <strrev>

00000848 <strtod>:
 848:	a0 e0       	ldi	r26, 0x00	; 0
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	ea e2       	ldi	r30, 0x2A	; 42
 84e:	f4 e0       	ldi	r31, 0x04	; 4
 850:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__prologue_saves__+0x8>
 854:	ec 01       	movw	r28, r24
 856:	7b 01       	movw	r14, r22
 858:	61 15       	cp	r22, r1
 85a:	71 05       	cpc	r23, r1
 85c:	19 f0       	breq	.+6      	; 0x864 <strtod+0x1c>
 85e:	db 01       	movw	r26, r22
 860:	8d 93       	st	X+, r24
 862:	9c 93       	st	X, r25
 864:	8e 01       	movw	r16, r28
 866:	0f 5f       	subi	r16, 0xFF	; 255
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	78 80       	ld	r7, Y
 86c:	87 2d       	mov	r24, r7
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 81 05 	call	0xb02	; 0xb02 <isspace>
 874:	89 2b       	or	r24, r25
 876:	11 f0       	breq	.+4      	; 0x87c <strtod+0x34>
 878:	e8 01       	movw	r28, r16
 87a:	f4 cf       	rjmp	.-24     	; 0x864 <strtod+0x1c>
 87c:	bd e2       	ldi	r27, 0x2D	; 45
 87e:	7b 12       	cpse	r7, r27
 880:	05 c0       	rjmp	.+10     	; 0x88c <strtod+0x44>
 882:	0f 5f       	subi	r16, 0xFF	; 255
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	79 80       	ldd	r7, Y+1	; 0x01
 888:	c1 e0       	ldi	r28, 0x01	; 1
 88a:	08 c0       	rjmp	.+16     	; 0x89c <strtod+0x54>
 88c:	eb e2       	ldi	r30, 0x2B	; 43
 88e:	7e 12       	cpse	r7, r30
 890:	04 c0       	rjmp	.+8      	; 0x89a <strtod+0x52>
 892:	8e 01       	movw	r16, r28
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	79 80       	ldd	r7, Y+1	; 0x01
 89a:	c0 e0       	ldi	r28, 0x00	; 0
 89c:	68 01       	movw	r12, r16
 89e:	f1 e0       	ldi	r31, 0x01	; 1
 8a0:	cf 1a       	sub	r12, r31
 8a2:	d1 08       	sbc	r13, r1
 8a4:	43 e0       	ldi	r20, 0x03	; 3
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	60 e7       	ldi	r22, 0x70	; 112
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	c6 01       	movw	r24, r12
 8ae:	0e 94 8a 05 	call	0xb14	; 0xb14 <strncasecmp_P>
 8b2:	89 2b       	or	r24, r25
 8b4:	f1 f4       	brne	.+60     	; 0x8f2 <strtod+0xaa>
 8b6:	68 01       	movw	r12, r16
 8b8:	22 e0       	ldi	r18, 0x02	; 2
 8ba:	c2 0e       	add	r12, r18
 8bc:	d1 1c       	adc	r13, r1
 8be:	45 e0       	ldi	r20, 0x05	; 5
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	6b e6       	ldi	r22, 0x6B	; 107
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	c6 01       	movw	r24, r12
 8c8:	0e 94 8a 05 	call	0xb14	; 0xb14 <strncasecmp_P>
 8cc:	89 2b       	or	r24, r25
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <strtod+0x90>
 8d0:	68 01       	movw	r12, r16
 8d2:	87 e0       	ldi	r24, 0x07	; 7
 8d4:	c8 0e       	add	r12, r24
 8d6:	d1 1c       	adc	r13, r1
 8d8:	e1 14       	cp	r14, r1
 8da:	f1 04       	cpc	r15, r1
 8dc:	19 f0       	breq	.+6      	; 0x8e4 <strtod+0x9c>
 8de:	d7 01       	movw	r26, r14
 8e0:	cd 92       	st	X+, r12
 8e2:	dc 92       	st	X, r13
 8e4:	c1 11       	cpse	r28, r1
 8e6:	ff c0       	rjmp	.+510    	; 0xae6 <__stack+0x1e7>
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	80 e8       	ldi	r24, 0x80	; 128
 8ee:	9f e7       	ldi	r25, 0x7F	; 127
 8f0:	03 c1       	rjmp	.+518    	; 0xaf8 <__stack+0x1f9>
 8f2:	43 e0       	ldi	r20, 0x03	; 3
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	68 e6       	ldi	r22, 0x68	; 104
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	c6 01       	movw	r24, r12
 8fc:	0e 94 8a 05 	call	0xb14	; 0xb14 <strncasecmp_P>
 900:	89 2b       	or	r24, r25
 902:	51 f4       	brne	.+20     	; 0x918 <__stack+0x19>
 904:	e1 14       	cp	r14, r1
 906:	f1 04       	cpc	r15, r1
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
 90a:	f2 c0       	rjmp	.+484    	; 0xaf0 <__stack+0x1f1>
 90c:	0e 5f       	subi	r16, 0xFE	; 254
 90e:	1f 4f       	sbci	r17, 0xFF	; 255
 910:	f7 01       	movw	r30, r14
 912:	11 83       	std	Z+1, r17	; 0x01
 914:	00 83       	st	Z, r16
 916:	ec c0       	rjmp	.+472    	; 0xaf0 <__stack+0x1f1>
 918:	68 01       	movw	r12, r16
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	cb 01       	movw	r24, r22
 920:	00 e0       	ldi	r16, 0x00	; 0
 922:	10 e0       	ldi	r17, 0x00	; 0
 924:	f6 01       	movw	r30, r12
 926:	d0 ed       	ldi	r29, 0xD0	; 208
 928:	d7 0d       	add	r29, r7
 92a:	da 30       	cpi	r29, 0x0A	; 10
 92c:	58 f5       	brcc	.+86     	; 0x984 <__stack+0x85>
 92e:	2c 2f       	mov	r18, r28
 930:	22 60       	ori	r18, 0x02	; 2
 932:	62 2e       	mov	r6, r18
 934:	2c 2f       	mov	r18, r28
 936:	28 70       	andi	r18, 0x08	; 8
 938:	c2 ff       	sbrs	r28, 2
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__stack+0x47>
 93c:	21 11       	cpse	r18, r1
 93e:	28 c0       	rjmp	.+80     	; 0x990 <__stack+0x91>
 940:	0f 5f       	subi	r16, 0xFF	; 255
 942:	1f 4f       	sbci	r17, 0xFF	; 255
 944:	25 c0       	rjmp	.+74     	; 0x990 <__stack+0x91>
 946:	22 23       	and	r18, r18
 948:	11 f0       	breq	.+4      	; 0x94e <__stack+0x4f>
 94a:	01 50       	subi	r16, 0x01	; 1
 94c:	11 09       	sbc	r17, r1
 94e:	a5 e0       	ldi	r26, 0x05	; 5
 950:	b0 e0       	ldi	r27, 0x00	; 0
 952:	9b 01       	movw	r18, r22
 954:	ac 01       	movw	r20, r24
 956:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__muluhisi3>
 95a:	4b 01       	movw	r8, r22
 95c:	5c 01       	movw	r10, r24
 95e:	88 0c       	add	r8, r8
 960:	99 1c       	adc	r9, r9
 962:	aa 1c       	adc	r10, r10
 964:	bb 1c       	adc	r11, r11
 966:	c5 01       	movw	r24, r10
 968:	b4 01       	movw	r22, r8
 96a:	6d 0f       	add	r22, r29
 96c:	71 1d       	adc	r23, r1
 96e:	81 1d       	adc	r24, r1
 970:	91 1d       	adc	r25, r1
 972:	68 39       	cpi	r22, 0x98	; 152
 974:	a9 e9       	ldi	r26, 0x99	; 153
 976:	7a 07       	cpc	r23, r26
 978:	8a 07       	cpc	r24, r26
 97a:	a9 e1       	ldi	r26, 0x19	; 25
 97c:	9a 07       	cpc	r25, r26
 97e:	40 f0       	brcs	.+16     	; 0x990 <__stack+0x91>
 980:	c6 60       	ori	r28, 0x06	; 6
 982:	05 c0       	rjmp	.+10     	; 0x98e <__stack+0x8f>
 984:	de 3f       	cpi	r29, 0xFE	; 254
 986:	51 f4       	brne	.+20     	; 0x99c <__stack+0x9d>
 988:	c3 fd       	sbrc	r28, 3
 98a:	44 c0       	rjmp	.+136    	; 0xa14 <__stack+0x115>
 98c:	c8 60       	ori	r28, 0x08	; 8
 98e:	6c 2e       	mov	r6, r28
 990:	bf ef       	ldi	r27, 0xFF	; 255
 992:	cb 1a       	sub	r12, r27
 994:	db 0a       	sbc	r13, r27
 996:	70 80       	ld	r7, Z
 998:	c6 2d       	mov	r28, r6
 99a:	c4 cf       	rjmp	.-120    	; 0x924 <__stack+0x25>
 99c:	2d 2f       	mov	r18, r29
 99e:	2f 7d       	andi	r18, 0xDF	; 223
 9a0:	25 31       	cpi	r18, 0x15	; 21
 9a2:	c1 f5       	brne	.+112    	; 0xa14 <__stack+0x115>
 9a4:	40 81       	ld	r20, Z
 9a6:	4d 32       	cpi	r20, 0x2D	; 45
 9a8:	11 f4       	brne	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	c0 61       	ori	r28, 0x10	; 16
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <__stack+0xbb>
 9ae:	4b 32       	cpi	r20, 0x2B	; 43
 9b0:	21 f0       	breq	.+8      	; 0x9ba <__stack+0xbb>
 9b2:	31 96       	adiw	r30, 0x01	; 1
 9b4:	21 e0       	ldi	r18, 0x01	; 1
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0xc7>
 9ba:	32 96       	adiw	r30, 0x02	; 2
 9bc:	d6 01       	movw	r26, r12
 9be:	11 96       	adiw	r26, 0x01	; 1
 9c0:	4c 91       	ld	r20, X
 9c2:	22 e0       	ldi	r18, 0x02	; 2
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	a0 ed       	ldi	r26, 0xD0	; 208
 9c8:	a4 0f       	add	r26, r20
 9ca:	aa 30       	cpi	r26, 0x0A	; 10
 9cc:	18 f0       	brcs	.+6      	; 0x9d4 <__stack+0xd5>
 9ce:	e2 1b       	sub	r30, r18
 9d0:	f3 0b       	sbc	r31, r19
 9d2:	20 c0       	rjmp	.+64     	; 0xa14 <__stack+0x115>
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	40 38       	cpi	r20, 0x80	; 128
 9da:	bc e0       	ldi	r27, 0x0C	; 12
 9dc:	5b 07       	cpc	r21, r27
 9de:	5c f4       	brge	.+22     	; 0x9f6 <__stack+0xf7>
 9e0:	9a 01       	movw	r18, r20
 9e2:	22 0f       	add	r18, r18
 9e4:	33 1f       	adc	r19, r19
 9e6:	22 0f       	add	r18, r18
 9e8:	33 1f       	adc	r19, r19
 9ea:	42 0f       	add	r20, r18
 9ec:	53 1f       	adc	r21, r19
 9ee:	44 0f       	add	r20, r20
 9f0:	55 1f       	adc	r21, r21
 9f2:	4a 0f       	add	r20, r26
 9f4:	51 1d       	adc	r21, r1
 9f6:	31 96       	adiw	r30, 0x01	; 1
 9f8:	df 01       	movw	r26, r30
 9fa:	11 97       	sbiw	r26, 0x01	; 1
 9fc:	2c 91       	ld	r18, X
 9fe:	a0 ed       	ldi	r26, 0xD0	; 208
 a00:	a2 0f       	add	r26, r18
 a02:	aa 30       	cpi	r26, 0x0A	; 10
 a04:	48 f3       	brcs	.-46     	; 0x9d8 <__stack+0xd9>
 a06:	c4 ff       	sbrs	r28, 4
 a08:	03 c0       	rjmp	.+6      	; 0xa10 <__stack+0x111>
 a0a:	51 95       	neg	r21
 a0c:	41 95       	neg	r20
 a0e:	51 09       	sbc	r21, r1
 a10:	04 0f       	add	r16, r20
 a12:	15 1f       	adc	r17, r21
 a14:	c1 ff       	sbrs	r28, 1
 a16:	07 c0       	rjmp	.+14     	; 0xa26 <__stack+0x127>
 a18:	e1 14       	cp	r14, r1
 a1a:	f1 04       	cpc	r15, r1
 a1c:	21 f0       	breq	.+8      	; 0xa26 <__stack+0x127>
 a1e:	31 97       	sbiw	r30, 0x01	; 1
 a20:	d7 01       	movw	r26, r14
 a22:	ed 93       	st	X+, r30
 a24:	fc 93       	st	X, r31
 a26:	0e 94 46 03 	call	0x68c	; 0x68c <__floatunsisf>
 a2a:	c3 70       	andi	r28, 0x03	; 3
 a2c:	c3 30       	cpi	r28, 0x03	; 3
 a2e:	19 f0       	breq	.+6      	; 0xa36 <__stack+0x137>
 a30:	6b 01       	movw	r12, r22
 a32:	7c 01       	movw	r14, r24
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <__stack+0x143>
 a36:	6b 01       	movw	r12, r22
 a38:	7c 01       	movw	r14, r24
 a3a:	f7 fa       	bst	r15, 7
 a3c:	f0 94       	com	r15
 a3e:	f7 f8       	bld	r15, 7
 a40:	f0 94       	com	r15
 a42:	20 e0       	ldi	r18, 0x00	; 0
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	a9 01       	movw	r20, r18
 a48:	c7 01       	movw	r24, r14
 a4a:	b6 01       	movw	r22, r12
 a4c:	0e 94 b2 05 	call	0xb64	; 0xb64 <__cmpsf2>
 a50:	88 23       	and	r24, r24
 a52:	09 f4       	brne	.+2      	; 0xa56 <__stack+0x157>
 a54:	45 c0       	rjmp	.+138    	; 0xae0 <__stack+0x1e1>
 a56:	17 ff       	sbrs	r17, 7
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <__stack+0x167>
 a5a:	11 95       	neg	r17
 a5c:	01 95       	neg	r16
 a5e:	11 09       	sbc	r17, r1
 a60:	c7 e8       	ldi	r28, 0x87	; 135
 a62:	d0 e0       	ldi	r29, 0x00	; 0
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <__stack+0x16b>
 a66:	cf e9       	ldi	r28, 0x9F	; 159
 a68:	d0 e0       	ldi	r29, 0x00	; 0
 a6a:	5e 01       	movw	r10, r28
 a6c:	b8 e1       	ldi	r27, 0x18	; 24
 a6e:	ab 1a       	sub	r10, r27
 a70:	b1 08       	sbc	r11, r1
 a72:	46 01       	movw	r8, r12
 a74:	be 2d       	mov	r27, r14
 a76:	af 2d       	mov	r26, r15
 a78:	90 e2       	ldi	r25, 0x20	; 32
 a7a:	e9 2e       	mov	r14, r25
 a7c:	f1 2c       	mov	r15, r1
 a7e:	0e 15       	cp	r16, r14
 a80:	1f 05       	cpc	r17, r15
 a82:	84 f0       	brlt	.+32     	; 0xaa4 <__stack+0x1a5>
 a84:	fe 01       	movw	r30, r28
 a86:	25 91       	lpm	r18, Z+
 a88:	35 91       	lpm	r19, Z+
 a8a:	45 91       	lpm	r20, Z+
 a8c:	54 91       	lpm	r21, Z
 a8e:	b4 01       	movw	r22, r8
 a90:	8b 2f       	mov	r24, r27
 a92:	9a 2f       	mov	r25, r26
 a94:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__mulsf3>
 a98:	4b 01       	movw	r8, r22
 a9a:	b8 2f       	mov	r27, r24
 a9c:	a9 2f       	mov	r26, r25
 a9e:	0e 19       	sub	r16, r14
 aa0:	1f 09       	sbc	r17, r15
 aa2:	ed cf       	rjmp	.-38     	; 0xa7e <__stack+0x17f>
 aa4:	24 97       	sbiw	r28, 0x04	; 4
 aa6:	f5 94       	asr	r15
 aa8:	e7 94       	ror	r14
 aaa:	ca 15       	cp	r28, r10
 aac:	db 05       	cpc	r29, r11
 aae:	39 f7       	brne	.-50     	; 0xa7e <__stack+0x17f>
 ab0:	64 01       	movw	r12, r8
 ab2:	eb 2e       	mov	r14, r27
 ab4:	fa 2e       	mov	r15, r26
 ab6:	8e 2d       	mov	r24, r14
 ab8:	88 0f       	add	r24, r24
 aba:	8f 2d       	mov	r24, r15
 abc:	88 1f       	adc	r24, r24
 abe:	8f 3f       	cpi	r24, 0xFF	; 255
 ac0:	49 f0       	breq	.+18     	; 0xad4 <__stack+0x1d5>
 ac2:	20 e0       	ldi	r18, 0x00	; 0
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	a9 01       	movw	r20, r18
 ac8:	c7 01       	movw	r24, r14
 aca:	b6 01       	movw	r22, r12
 acc:	0e 94 b2 05 	call	0xb64	; 0xb64 <__cmpsf2>
 ad0:	81 11       	cpse	r24, r1
 ad2:	06 c0       	rjmp	.+12     	; 0xae0 <__stack+0x1e1>
 ad4:	82 e2       	ldi	r24, 0x22	; 34
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	90 93 a3 01 	sts	0x01A3, r25
 adc:	80 93 a2 01 	sts	0x01A2, r24
 ae0:	c7 01       	movw	r24, r14
 ae2:	b6 01       	movw	r22, r12
 ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__stack+0x1f9>
 ae6:	60 e0       	ldi	r22, 0x00	; 0
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	80 e8       	ldi	r24, 0x80	; 128
 aec:	9f ef       	ldi	r25, 0xFF	; 255
 aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__stack+0x1f9>
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	80 ec       	ldi	r24, 0xC0	; 192
 af6:	9f e7       	ldi	r25, 0x7F	; 127
 af8:	cd b7       	in	r28, 0x3d	; 61
 afa:	de b7       	in	r29, 0x3e	; 62
 afc:	ee e0       	ldi	r30, 0x0E	; 14
 afe:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__epilogue_restores__+0x8>

00000b02 <isspace>:
 b02:	91 11       	cpse	r25, r1
 b04:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__ctype_isfalse>
 b08:	80 32       	cpi	r24, 0x20	; 32
 b0a:	19 f0       	breq	.+6      	; 0xb12 <isspace+0x10>
 b0c:	89 50       	subi	r24, 0x09	; 9
 b0e:	85 50       	subi	r24, 0x05	; 5
 b10:	c8 f7       	brcc	.-14     	; 0xb04 <isspace+0x2>
 b12:	08 95       	ret

00000b14 <strncasecmp_P>:
 b14:	fb 01       	movw	r30, r22
 b16:	dc 01       	movw	r26, r24
 b18:	41 50       	subi	r20, 0x01	; 1
 b1a:	50 40       	sbci	r21, 0x00	; 0
 b1c:	88 f0       	brcs	.+34     	; 0xb40 <strncasecmp_P+0x2c>
 b1e:	8d 91       	ld	r24, X+
 b20:	81 34       	cpi	r24, 0x41	; 65
 b22:	1c f0       	brlt	.+6      	; 0xb2a <strncasecmp_P+0x16>
 b24:	8b 35       	cpi	r24, 0x5B	; 91
 b26:	0c f4       	brge	.+2      	; 0xb2a <strncasecmp_P+0x16>
 b28:	80 5e       	subi	r24, 0xE0	; 224
 b2a:	65 91       	lpm	r22, Z+
 b2c:	61 34       	cpi	r22, 0x41	; 65
 b2e:	1c f0       	brlt	.+6      	; 0xb36 <strncasecmp_P+0x22>
 b30:	6b 35       	cpi	r22, 0x5B	; 91
 b32:	0c f4       	brge	.+2      	; 0xb36 <strncasecmp_P+0x22>
 b34:	60 5e       	subi	r22, 0xE0	; 224
 b36:	86 1b       	sub	r24, r22
 b38:	61 11       	cpse	r22, r1
 b3a:	71 f3       	breq	.-36     	; 0xb18 <strncasecmp_P+0x4>
 b3c:	99 0b       	sbc	r25, r25
 b3e:	08 95       	ret
 b40:	88 1b       	sub	r24, r24
 b42:	fc cf       	rjmp	.-8      	; 0xb3c <strncasecmp_P+0x28>

00000b44 <strrev>:
 b44:	dc 01       	movw	r26, r24
 b46:	fc 01       	movw	r30, r24
 b48:	67 2f       	mov	r22, r23
 b4a:	71 91       	ld	r23, Z+
 b4c:	77 23       	and	r23, r23
 b4e:	e1 f7       	brne	.-8      	; 0xb48 <strrev+0x4>
 b50:	32 97       	sbiw	r30, 0x02	; 2
 b52:	04 c0       	rjmp	.+8      	; 0xb5c <strrev+0x18>
 b54:	7c 91       	ld	r23, X
 b56:	6d 93       	st	X+, r22
 b58:	70 83       	st	Z, r23
 b5a:	62 91       	ld	r22, -Z
 b5c:	ae 17       	cp	r26, r30
 b5e:	bf 07       	cpc	r27, r31
 b60:	c8 f3       	brcs	.-14     	; 0xb54 <strrev+0x10>
 b62:	08 95       	ret

00000b64 <__cmpsf2>:
 b64:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_cmp>
 b68:	08 f4       	brcc	.+2      	; 0xb6c <__cmpsf2+0x8>
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	08 95       	ret

00000b6e <__mulsf3>:
 b6e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__mulsf3x>
 b72:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_round>
 b76:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscA>
 b7a:	38 f0       	brcs	.+14     	; 0xb8a <__mulsf3+0x1c>
 b7c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_pscB>
 b80:	20 f0       	brcs	.+8      	; 0xb8a <__mulsf3+0x1c>
 b82:	95 23       	and	r25, r21
 b84:	11 f0       	breq	.+4      	; 0xb8a <__mulsf3+0x1c>
 b86:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_inf>
 b8a:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_nan>
 b8e:	11 24       	eor	r1, r1
 b90:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>

00000b94 <__mulsf3x>:
 b94:	0e 94 83 03 	call	0x706	; 0x706 <__fp_split3>
 b98:	70 f3       	brcs	.-36     	; 0xb76 <__mulsf3+0x8>

00000b9a <__mulsf3_pse>:
 b9a:	95 9f       	mul	r25, r21
 b9c:	c1 f3       	breq	.-16     	; 0xb8e <__mulsf3+0x20>
 b9e:	95 0f       	add	r25, r21
 ba0:	50 e0       	ldi	r21, 0x00	; 0
 ba2:	55 1f       	adc	r21, r21
 ba4:	62 9f       	mul	r22, r18
 ba6:	f0 01       	movw	r30, r0
 ba8:	72 9f       	mul	r23, r18
 baa:	bb 27       	eor	r27, r27
 bac:	f0 0d       	add	r31, r0
 bae:	b1 1d       	adc	r27, r1
 bb0:	63 9f       	mul	r22, r19
 bb2:	aa 27       	eor	r26, r26
 bb4:	f0 0d       	add	r31, r0
 bb6:	b1 1d       	adc	r27, r1
 bb8:	aa 1f       	adc	r26, r26
 bba:	64 9f       	mul	r22, r20
 bbc:	66 27       	eor	r22, r22
 bbe:	b0 0d       	add	r27, r0
 bc0:	a1 1d       	adc	r26, r1
 bc2:	66 1f       	adc	r22, r22
 bc4:	82 9f       	mul	r24, r18
 bc6:	22 27       	eor	r18, r18
 bc8:	b0 0d       	add	r27, r0
 bca:	a1 1d       	adc	r26, r1
 bcc:	62 1f       	adc	r22, r18
 bce:	73 9f       	mul	r23, r19
 bd0:	b0 0d       	add	r27, r0
 bd2:	a1 1d       	adc	r26, r1
 bd4:	62 1f       	adc	r22, r18
 bd6:	83 9f       	mul	r24, r19
 bd8:	a0 0d       	add	r26, r0
 bda:	61 1d       	adc	r22, r1
 bdc:	22 1f       	adc	r18, r18
 bde:	74 9f       	mul	r23, r20
 be0:	33 27       	eor	r19, r19
 be2:	a0 0d       	add	r26, r0
 be4:	61 1d       	adc	r22, r1
 be6:	23 1f       	adc	r18, r19
 be8:	84 9f       	mul	r24, r20
 bea:	60 0d       	add	r22, r0
 bec:	21 1d       	adc	r18, r1
 bee:	82 2f       	mov	r24, r18
 bf0:	76 2f       	mov	r23, r22
 bf2:	6a 2f       	mov	r22, r26
 bf4:	11 24       	eor	r1, r1
 bf6:	9f 57       	subi	r25, 0x7F	; 127
 bf8:	50 40       	sbci	r21, 0x00	; 0
 bfa:	9a f0       	brmi	.+38     	; 0xc22 <__mulsf3_pse+0x88>
 bfc:	f1 f0       	breq	.+60     	; 0xc3a <__mulsf3_pse+0xa0>
 bfe:	88 23       	and	r24, r24
 c00:	4a f0       	brmi	.+18     	; 0xc14 <__mulsf3_pse+0x7a>
 c02:	ee 0f       	add	r30, r30
 c04:	ff 1f       	adc	r31, r31
 c06:	bb 1f       	adc	r27, r27
 c08:	66 1f       	adc	r22, r22
 c0a:	77 1f       	adc	r23, r23
 c0c:	88 1f       	adc	r24, r24
 c0e:	91 50       	subi	r25, 0x01	; 1
 c10:	50 40       	sbci	r21, 0x00	; 0
 c12:	a9 f7       	brne	.-22     	; 0xbfe <__mulsf3_pse+0x64>
 c14:	9e 3f       	cpi	r25, 0xFE	; 254
 c16:	51 05       	cpc	r21, r1
 c18:	80 f0       	brcs	.+32     	; 0xc3a <__mulsf3_pse+0xa0>
 c1a:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_inf>
 c1e:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_szero>
 c22:	5f 3f       	cpi	r21, 0xFF	; 255
 c24:	e4 f3       	brlt	.-8      	; 0xc1e <__mulsf3_pse+0x84>
 c26:	98 3e       	cpi	r25, 0xE8	; 232
 c28:	d4 f3       	brlt	.-12     	; 0xc1e <__mulsf3_pse+0x84>
 c2a:	86 95       	lsr	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	b7 95       	ror	r27
 c32:	f7 95       	ror	r31
 c34:	e7 95       	ror	r30
 c36:	9f 5f       	subi	r25, 0xFF	; 255
 c38:	c1 f7       	brne	.-16     	; 0xc2a <__mulsf3_pse+0x90>
 c3a:	fe 2b       	or	r31, r30
 c3c:	88 0f       	add	r24, r24
 c3e:	91 1d       	adc	r25, r1
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	97 f9       	bld	r25, 7
 c46:	08 95       	ret

00000c48 <__ctype_isfalse>:
 c48:	99 27       	eor	r25, r25
 c4a:	88 27       	eor	r24, r24

00000c4c <__ctype_istrue>:
 c4c:	08 95       	ret

00000c4e <__fp_inf>:
 c4e:	97 f9       	bld	r25, 7
 c50:	9f 67       	ori	r25, 0x7F	; 127
 c52:	80 e8       	ldi	r24, 0x80	; 128
 c54:	70 e0       	ldi	r23, 0x00	; 0
 c56:	60 e0       	ldi	r22, 0x00	; 0
 c58:	08 95       	ret

00000c5a <__fp_nan>:
 c5a:	9f ef       	ldi	r25, 0xFF	; 255
 c5c:	80 ec       	ldi	r24, 0xC0	; 192
 c5e:	08 95       	ret

00000c60 <__fp_pscA>:
 c60:	00 24       	eor	r0, r0
 c62:	0a 94       	dec	r0
 c64:	16 16       	cp	r1, r22
 c66:	17 06       	cpc	r1, r23
 c68:	18 06       	cpc	r1, r24
 c6a:	09 06       	cpc	r0, r25
 c6c:	08 95       	ret

00000c6e <__fp_pscB>:
 c6e:	00 24       	eor	r0, r0
 c70:	0a 94       	dec	r0
 c72:	12 16       	cp	r1, r18
 c74:	13 06       	cpc	r1, r19
 c76:	14 06       	cpc	r1, r20
 c78:	05 06       	cpc	r0, r21
 c7a:	08 95       	ret

00000c7c <__fp_round>:
 c7c:	09 2e       	mov	r0, r25
 c7e:	03 94       	inc	r0
 c80:	00 0c       	add	r0, r0
 c82:	11 f4       	brne	.+4      	; 0xc88 <__fp_round+0xc>
 c84:	88 23       	and	r24, r24
 c86:	52 f0       	brmi	.+20     	; 0xc9c <__fp_round+0x20>
 c88:	bb 0f       	add	r27, r27
 c8a:	40 f4       	brcc	.+16     	; 0xc9c <__fp_round+0x20>
 c8c:	bf 2b       	or	r27, r31
 c8e:	11 f4       	brne	.+4      	; 0xc94 <__fp_round+0x18>
 c90:	60 ff       	sbrs	r22, 0
 c92:	04 c0       	rjmp	.+8      	; 0xc9c <__fp_round+0x20>
 c94:	6f 5f       	subi	r22, 0xFF	; 255
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	08 95       	ret

00000c9e <__muluhisi3>:
 c9e:	0e 94 91 06 	call	0xd22	; 0xd22 <__umulhisi3>
 ca2:	a5 9f       	mul	r26, r21
 ca4:	90 0d       	add	r25, r0
 ca6:	b4 9f       	mul	r27, r20
 ca8:	90 0d       	add	r25, r0
 caa:	a4 9f       	mul	r26, r20
 cac:	80 0d       	add	r24, r0
 cae:	91 1d       	adc	r25, r1
 cb0:	11 24       	eor	r1, r1
 cb2:	08 95       	ret

00000cb4 <__prologue_saves__>:
 cb4:	2f 92       	push	r2
 cb6:	3f 92       	push	r3
 cb8:	4f 92       	push	r4
 cba:	5f 92       	push	r5
 cbc:	6f 92       	push	r6
 cbe:	7f 92       	push	r7
 cc0:	8f 92       	push	r8
 cc2:	9f 92       	push	r9
 cc4:	af 92       	push	r10
 cc6:	bf 92       	push	r11
 cc8:	cf 92       	push	r12
 cca:	df 92       	push	r13
 ccc:	ef 92       	push	r14
 cce:	ff 92       	push	r15
 cd0:	0f 93       	push	r16
 cd2:	1f 93       	push	r17
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
 cd8:	cd b7       	in	r28, 0x3d	; 61
 cda:	de b7       	in	r29, 0x3e	; 62
 cdc:	ca 1b       	sub	r28, r26
 cde:	db 0b       	sbc	r29, r27
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	f8 94       	cli
 ce4:	de bf       	out	0x3e, r29	; 62
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	cd bf       	out	0x3d, r28	; 61
 cea:	09 94       	ijmp

00000cec <__epilogue_restores__>:
 cec:	2a 88       	ldd	r2, Y+18	; 0x12
 cee:	39 88       	ldd	r3, Y+17	; 0x11
 cf0:	48 88       	ldd	r4, Y+16	; 0x10
 cf2:	5f 84       	ldd	r5, Y+15	; 0x0f
 cf4:	6e 84       	ldd	r6, Y+14	; 0x0e
 cf6:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf8:	8c 84       	ldd	r8, Y+12	; 0x0c
 cfa:	9b 84       	ldd	r9, Y+11	; 0x0b
 cfc:	aa 84       	ldd	r10, Y+10	; 0x0a
 cfe:	b9 84       	ldd	r11, Y+9	; 0x09
 d00:	c8 84       	ldd	r12, Y+8	; 0x08
 d02:	df 80       	ldd	r13, Y+7	; 0x07
 d04:	ee 80       	ldd	r14, Y+6	; 0x06
 d06:	fd 80       	ldd	r15, Y+5	; 0x05
 d08:	0c 81       	ldd	r16, Y+4	; 0x04
 d0a:	1b 81       	ldd	r17, Y+3	; 0x03
 d0c:	aa 81       	ldd	r26, Y+2	; 0x02
 d0e:	b9 81       	ldd	r27, Y+1	; 0x01
 d10:	ce 0f       	add	r28, r30
 d12:	d1 1d       	adc	r29, r1
 d14:	0f b6       	in	r0, 0x3f	; 63
 d16:	f8 94       	cli
 d18:	de bf       	out	0x3e, r29	; 62
 d1a:	0f be       	out	0x3f, r0	; 63
 d1c:	cd bf       	out	0x3d, r28	; 61
 d1e:	ed 01       	movw	r28, r26
 d20:	08 95       	ret

00000d22 <__umulhisi3>:
 d22:	a2 9f       	mul	r26, r18
 d24:	b0 01       	movw	r22, r0
 d26:	b3 9f       	mul	r27, r19
 d28:	c0 01       	movw	r24, r0
 d2a:	a3 9f       	mul	r26, r19
 d2c:	70 0d       	add	r23, r0
 d2e:	81 1d       	adc	r24, r1
 d30:	11 24       	eor	r1, r1
 d32:	91 1d       	adc	r25, r1
 d34:	b2 9f       	mul	r27, r18
 d36:	70 0d       	add	r23, r0
 d38:	81 1d       	adc	r24, r1
 d3a:	11 24       	eor	r1, r1
 d3c:	91 1d       	adc	r25, r1
 d3e:	08 95       	ret

00000d40 <_exit>:
 d40:	f8 94       	cli

00000d42 <__stop_program>:
 d42:	ff cf       	rjmp	.-2      	; 0xd42 <__stop_program>
