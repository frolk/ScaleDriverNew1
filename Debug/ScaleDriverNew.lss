
ScaleDriverNew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ec2  00000f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  00800102  00800102  00000f58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3d  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000677  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a2  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060e  00000000  00000000  000030dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000036eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_1>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_14>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_18>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_20>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4e 41       	sbci	r20, 0x1E	; 30
  6a:	4e 49       	sbci	r20, 0x9E	; 158

0000006b <pstr_inity>:
  6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
  70:	49 4e 46                                            INF

00000073 <pwr_m10>:
  73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
  83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
  8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
  9b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e2 ec       	ldi	r30, 0xC2	; 194
  b8:	fe e0       	ldi	r31, 0x0E	; 14
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a2 30       	cpi	r26, 0x02	; 2
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a2 e0       	ldi	r26, 0x02	; 2
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a5 3c       	cpi	r26, 0xC5	; 197
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
  da:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <BL_GetMessage>:

uint8_t PWMChanged = 0;


void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ce e2       	ldi	r28, 0x2E	; 46
  ec:	d1 e0       	ldi	r29, 0x01	; 1
  ee:	06 e3       	ldi	r16, 0x36	; 54
  f0:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i=0; i<8; i++)
	{
		BluetoothMessage[i] = BL_GetChar();
  f2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BL_GetChar>
  f6:	89 93       	st	Y+, r24


void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
	
	for (int i=0; i<8; i++)
  f8:	c0 17       	cp	r28, r16
  fa:	d1 07       	cpc	r29, r17
  fc:	d1 f7       	brne	.-12     	; 0xf2 <BL_GetMessage+0x10>
	{
		BluetoothMessage[i] = BL_GetChar();
	}
	BL_FlushRxBuf();  // flush our buffer and start from the beginning
  fe:	0e 94 54 01 	call	0x2a8	; 0x2a8 <BL_FlushRxBuf>

}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <BL_DefComd>:


void BL_DefComd()
{
	
	BL_GetMessage(); //pulling up buffer's data one by one
 10c:	0e 94 71 00 	call	0xe2	; 0xe2 <BL_GetMessage>
	if ((BluetoothMessage[0] == '-')|(BluetoothMessage[0] == '+'))
 110:	80 91 2e 01 	lds	r24, 0x012E
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	8b 32       	cpi	r24, 0x2B	; 43
 118:	09 f0       	breq	.+2      	; 0x11c <BL_DefComd+0x10>
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	91 11       	cpse	r25, r1
 11e:	06 c0       	rjmp	.+12     	; 0x12c <BL_DefComd+0x20>
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	8d 32       	cpi	r24, 0x2D	; 45
 124:	09 f0       	breq	.+2      	; 0x128 <BL_DefComd+0x1c>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	99 23       	and	r25, r25
 12a:	d1 f0       	breq	.+52     	; 0x160 <BL_DefComd+0x54>
	{
		
		PWMvalue = atoi(BluetoothMessage+1); //convert our string into float integer
 12c:	8f e2       	ldi	r24, 0x2F	; 47
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 9d 04 	call	0x93a	; 0x93a <atoi>
 134:	90 93 04 01 	sts	0x0104, r25
 138:	80 93 03 01 	sts	0x0103, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 13c:	4a e0       	ldi	r20, 0x0A	; 10
 13e:	64 e2       	ldi	r22, 0x24	; 36
 140:	71 e0       	ldi	r23, 0x01	; 1
 142:	0e 94 bb 04 	call	0x976	; 0x976 <__itoa_ncheck>
		//BL_FlushRxBuf();
		PWMvalueStr[10] = itoa(PWMvalue, PWMvalueStr, 10);
 146:	80 93 2e 01 	sts	0x012E, r24
		
		PWMChanged = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 02 01 	sts	0x0102, r24
		
		BL_SendStr("P");
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
		BL_SendStr(PWMvalueStr);
 158:	84 e2       	ldi	r24, 0x24	; 36
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
 160:	08 95       	ret

00000162 <__vector_18>:
uint8_t rxBufHead = 0;
uint8_t rxCount = 0;// Receive variables
uint8_t BLmesIsComplete;

ISR (USART_RX_vect)   // receive interrupt routine
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(rxCount < SIZE_BUF)
 172:	80 91 05 01 	lds	r24, 0x0105
 176:	80 32       	cpi	r24, 0x20	; 32
 178:	28 f5       	brcc	.+74     	; 0x1c4 <__vector_18+0x62>
	{
		BLrxBuf[rxBufTail] = UDR0;
 17a:	80 91 c6 00 	lds	r24, 0x00C6
 17e:	e0 91 07 01 	lds	r30, 0x0107
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e8 5c       	subi	r30, 0xC8	; 200
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 83       	st	Z, r24
		
		
				
		if(BLrxBuf[rxBufTail] == 0x26)// if '&'
 18a:	86 32       	cpi	r24, 0x26	; 38
 18c:	29 f4       	brne	.+10     	; 0x198 <__vector_18+0x36>
		//if(rxBufTail>1)
		{	
			PORTB |= (1<< PORTB5);
 18e:	2d 9a       	sbi	0x05, 5	; 5
			BLmesIsComplete = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 78 01 	sts	0x0178, r24
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <__vector_18+0x44>
		}
		
		else if (BLrxBuf[rxBufTail] == 'd')
 198:	84 36       	cpi	r24, 0x64	; 100
 19a:	21 f4       	brne	.+8      	; 0x1a4 <__vector_18+0x42>
		{
			DebugAsk = 1;	
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 08 01 	sts	0x0108, r24
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <__vector_18+0x44>
		}
				
		else
		{
			PORTB &= ~(1 << PORTB5);
 1a4:	2d 98       	cbi	0x05, 5	; 5
		}
		
		rxBufTail++;
 1a6:	80 91 07 01 	lds	r24, 0x0107
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 1ac:	80 32       	cpi	r24, 0x20	; 32
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <__vector_18+0x54>
		else
		{
			PORTB &= ~(1 << PORTB5);
		}
		
		rxBufTail++;
 1b0:	80 93 07 01 	sts	0x0107, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__vector_18+0x58>
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 1b6:	10 92 07 01 	sts	0x0107, r1
		rxCount++;
 1ba:	80 91 05 01 	lds	r24, 0x0105
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 05 01 	sts	0x0105, r24
		
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_20>:

ISR (USART_TX_vect)   // transmit interrupt routine
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if(txCount > 0)
 1e4:	80 91 09 01 	lds	r24, 0x0109
 1e8:	88 23       	and	r24, r24
 1ea:	b9 f0       	breq	.+46     	; 0x21a <__vector_20+0x46>
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
 1ec:	e0 91 0a 01 	lds	r30, 0x010A
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	e8 5a       	subi	r30, 0xA8	; 168
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	80 81       	ld	r24, Z
 1f8:	80 93 c6 00 	sts	0x00C6, r24
		txCount--;
 1fc:	80 91 09 01 	lds	r24, 0x0109
 200:	81 50       	subi	r24, 0x01	; 1
 202:	80 93 09 01 	sts	0x0109, r24
		txBufHead++;
 206:	80 91 0a 01 	lds	r24, 0x010A
 20a:	8f 5f       	subi	r24, 0xFF	; 255
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 20c:	80 32       	cpi	r24, 0x20	; 32
 20e:	19 f0       	breq	.+6      	; 0x216 <__vector_20+0x42>
{
	if(txCount > 0)
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
		txCount--;
		txBufHead++;
 210:	80 93 0a 01 	sts	0x010A, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <__vector_20+0x46>
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 216:	10 92 0a 01 	sts	0x010A, r1
		
	}
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <BL_Init>:

void BL_Init(uint16_t ubrr) // initialize UART
{
	
	//set baud rate = 9600bps
	UBRR0H = (uint8_t)(ubrr>>8);
 22a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)ubrr;
 22e:	80 93 c4 00 	sts	0x00C4, r24
	
	//set 1 stop bit, no parity bit and 8 bit character size
	UCSR0C = 0x06;  // (1<<UCSZ01)|(1<<UCSZ00)
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 c2 00 	sts	0x00C2, r24
	
	//enable transmission and reception 0x78
	UCSR0B |= (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 238:	e1 ec       	ldi	r30, 0xC1	; 193
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	88 6d       	ori	r24, 0xD8	; 216
 240:	80 83       	st	Z, r24
	sei();
 242:	78 94       	sei
 244:	08 95       	ret

00000246 <BL_PutChar>:
}

void BL_PutChar(uint8_t sym)// write next symbol into ring buffer
{
	if (((UCSR0A & (1<<UDRE0)) != 0) && (txCount == 0)) UDR0 = sym; // if udr is empty and it's first byte from
 246:	90 91 c0 00 	lds	r25, 0x00C0
 24a:	95 ff       	sbrs	r25, 5
 24c:	07 c0       	rjmp	.+14     	; 0x25c <BL_PutChar+0x16>
 24e:	90 91 09 01 	lds	r25, 0x0109
 252:	91 11       	cpse	r25, r1
 254:	03 c0       	rjmp	.+6      	; 0x25c <BL_PutChar+0x16>
 256:	80 93 c6 00 	sts	0x00C6, r24
 25a:	08 95       	ret
																	// ring buffer we write it directly into udr
    else
	{
		
		if (txCount < SIZE_BUF)
 25c:	90 91 09 01 	lds	r25, 0x0109
 260:	90 32       	cpi	r25, 0x20	; 32
 262:	90 f4       	brcc	.+36     	; 0x288 <BL_PutChar+0x42>
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
 264:	20 91 0b 01 	lds	r18, 0x010B
 268:	e2 2f       	mov	r30, r18
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e8 5a       	subi	r30, 0xA8	; 168
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	80 83       	st	Z, r24
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
 272:	9f 5f       	subi	r25, 0xFF	; 255
 274:	90 93 09 01 	sts	0x0109, r25
			txBufTail++; // increase our pointer
 278:	2f 5f       	subi	r18, 0xFF	; 255
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 27a:	20 32       	cpi	r18, 0x20	; 32
 27c:	19 f0       	breq	.+6      	; 0x284 <BL_PutChar+0x3e>
		if (txCount < SIZE_BUF)
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
			txBufTail++; // increase our pointer
 27e:	20 93 0b 01 	sts	0x010B, r18
 282:	08 95       	ret
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 284:	10 92 0b 01 	sts	0x010B, r1
 288:	08 95       	ret

0000028a <BL_SendStr>:
		}
	}
}

void BL_SendStr(uint8_t *data)// send string start from the first member with address pointed by *data
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	uint8_t sym;
	while(*data) // while data isn't '\0' or while data consist any data
 290:	88 81       	ld	r24, Y
 292:	88 23       	and	r24, r24
 294:	31 f0       	breq	.+12     	; 0x2a2 <BL_SendStr+0x18>
 296:	21 96       	adiw	r28, 0x01	; 1
	{
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
 298:	0e 94 23 01 	call	0x246	; 0x246 <BL_PutChar>
}

void BL_SendStr(uint8_t *data)// send string start from the first member with address pointed by *data
{
	uint8_t sym;
	while(*data) // while data isn't '\0' or while data consist any data
 29c:	89 91       	ld	r24, Y+
 29e:	81 11       	cpse	r24, r1
 2a0:	fb cf       	rjmp	.-10     	; 0x298 <BL_SendStr+0xe>
	{
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
	}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <BL_FlushRxBuf>:

void BL_FlushRxBuf(void)  // flush our ring buffer after getting all of the array's member in out CurrentValue variable
{
	rxBufTail = 0;
 2a8:	10 92 07 01 	sts	0x0107, r1
	rxBufHead = 0;
 2ac:	10 92 06 01 	sts	0x0106, r1
	rxCount = 0;
 2b0:	10 92 05 01 	sts	0x0105, r1
 2b4:	08 95       	ret

000002b6 <BL_GetChar>:
}

uint8_t BL_GetChar(void) // take one symbol from buffer using the Head pointer
{
	uint8_t sym;
	if(rxCount > 0)
 2b6:	80 91 05 01 	lds	r24, 0x0105
 2ba:	88 23       	and	r24, r24
 2bc:	a1 f0       	breq	.+40     	; 0x2e6 <BL_GetChar+0x30>
	{
		sym	= BLrxBuf[rxBufHead];
 2be:	90 91 06 01 	lds	r25, 0x0106
 2c2:	e9 2f       	mov	r30, r25
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e8 5c       	subi	r30, 0xC8	; 200
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	20 81       	ld	r18, Z
		rxCount --;
 2cc:	81 50       	subi	r24, 0x01	; 1
 2ce:	80 93 05 01 	sts	0x0105, r24
		rxBufHead++;
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 2d4:	90 32       	cpi	r25, 0x20	; 32
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <BL_GetChar+0x2a>
	uint8_t sym;
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
 2d8:	90 93 06 01 	sts	0x0106, r25
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
		return sym;
 2dc:	82 2f       	mov	r24, r18
 2de:	08 95       	ret
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 2e0:	10 92 06 01 	sts	0x0106, r1
		return sym;
 2e4:	82 2f       	mov	r24, r18
	}
	return 0;
}
 2e6:	08 95       	ret

000002e8 <shift_and_mul_utoa16>:
uint8_t StrPWMValue[6];
uint8_t StrOCR[6];
uint8_t DebugAskAnswer[16];

char* shift_and_mul_utoa16(uint16_t n, char *buffer)
{
 2e8:	dc 01       	movw	r26, r24
 2ea:	fb 01       	movw	r30, r22
	uint8_t d4, d3, d2, d1, q, d0;

	d1 = (n>>4)  & 0xF;
 2ec:	9c 01       	movw	r18, r24
 2ee:	32 95       	swap	r19
 2f0:	22 95       	swap	r18
 2f2:	2f 70       	andi	r18, 0x0F	; 15
 2f4:	23 27       	eor	r18, r19
 2f6:	3f 70       	andi	r19, 0x0F	; 15
 2f8:	23 27       	eor	r18, r19
 2fa:	62 2f       	mov	r22, r18
 2fc:	6f 70       	andi	r22, 0x0F	; 15
	d2 = (n>>8)  & 0xF;
 2fe:	9b 2f       	mov	r25, r27
 300:	9f 70       	andi	r25, 0x0F	; 15
	d3 = (n>>12) & 0xF;
 302:	9d 01       	movw	r18, r26
 304:	23 2f       	mov	r18, r19
 306:	33 27       	eor	r19, r19
 308:	22 95       	swap	r18
 30a:	2f 70       	andi	r18, 0x0F	; 15

	d0 = 6*(d3 + d2 + d1) + (n & 0xF);
 30c:	a9 01       	movw	r20, r18
 30e:	49 0f       	add	r20, r25
 310:	51 1d       	adc	r21, r1
 312:	46 0f       	add	r20, r22
 314:	51 1d       	adc	r21, r1
 316:	84 2f       	mov	r24, r20
 318:	88 0f       	add	r24, r24
 31a:	48 0f       	add	r20, r24
 31c:	44 0f       	add	r20, r20
 31e:	af 70       	andi	r26, 0x0F	; 15
 320:	4a 0f       	add	r20, r26
	q = (d0 * 0xCD) >> 11;
 322:	5d ec       	ldi	r21, 0xCD	; 205
 324:	54 9f       	mul	r21, r20
 326:	d0 01       	movw	r26, r0
 328:	11 24       	eor	r1, r1
 32a:	8b 2f       	mov	r24, r27
 32c:	85 95       	asr	r24
 32e:	85 95       	asr	r24
 330:	85 95       	asr	r24
	d0 = d0 - 10*q;

	d1 = q + 9*d3 + 5*d2 + d1;
 332:	32 2f       	mov	r19, r18
 334:	33 0f       	add	r19, r19
 336:	33 0f       	add	r19, r19
 338:	33 0f       	add	r19, r19
 33a:	32 0f       	add	r19, r18
 33c:	63 0f       	add	r22, r19
 33e:	39 2f       	mov	r19, r25
 340:	33 0f       	add	r19, r19
 342:	33 0f       	add	r19, r19
 344:	39 0f       	add	r19, r25
 346:	63 0f       	add	r22, r19
 348:	36 2f       	mov	r19, r22
 34a:	38 0f       	add	r19, r24
	q = (d1 * 0xCD) >> 11;
 34c:	53 9f       	mul	r21, r19
 34e:	b0 01       	movw	r22, r0
 350:	11 24       	eor	r1, r1
 352:	57 2f       	mov	r21, r23
 354:	55 95       	asr	r21
 356:	55 95       	asr	r21
 358:	55 95       	asr	r21
	d1 = d1 - 10*q;

	d2 = q + 2*d2;
 35a:	99 0f       	add	r25, r25
 35c:	95 0f       	add	r25, r21
	q = (d2 * 0x1A) >> 8;
 35e:	6a e1       	ldi	r22, 0x1A	; 26
 360:	69 9f       	mul	r22, r25
 362:	d0 01       	movw	r26, r0
 364:	11 24       	eor	r1, r1
	d2 = d2 - 10*q;

	d3 = q + 4*d3;
 366:	22 0f       	add	r18, r18
 368:	22 0f       	add	r18, r18
 36a:	2b 0f       	add	r18, r27
	d4 = (d3 * 0x1A) >> 8;
 36c:	62 9f       	mul	r22, r18
 36e:	b0 01       	movw	r22, r0
 370:	11 24       	eor	r1, r1
	d3 = d3 - 10*d4;

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
 372:	a0 e3       	ldi	r26, 0x30	; 48
 374:	a7 0f       	add	r26, r23
 376:	a0 83       	st	Z, r26
 378:	20 5d       	subi	r18, 0xD0	; 208
	q = (d2 * 0x1A) >> 8;
	d2 = d2 - 10*q;

	d3 = q + 4*d3;
	d4 = (d3 * 0x1A) >> 8;
	d3 = d3 - 10*d4;
 37a:	77 0f       	add	r23, r23
 37c:	67 2f       	mov	r22, r23
 37e:	66 0f       	add	r22, r22
 380:	66 0f       	add	r22, r22
 382:	67 0f       	add	r22, r23

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
 384:	26 1b       	sub	r18, r22
 386:	21 83       	std	Z+1, r18	; 0x01
 388:	90 5d       	subi	r25, 0xD0	; 208
	q = (d1 * 0xCD) >> 11;
	d1 = d1 - 10*q;

	d2 = q + 2*d2;
	q = (d2 * 0x1A) >> 8;
	d2 = d2 - 10*q;
 38a:	6b 2f       	mov	r22, r27
 38c:	66 0f       	add	r22, r22
 38e:	26 2f       	mov	r18, r22
 390:	22 0f       	add	r18, r18
 392:	22 0f       	add	r18, r18
 394:	26 0f       	add	r18, r22
	d3 = d3 - 10*d4;

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
	*ptr++ = ( d2 + '0' );
 396:	92 1b       	sub	r25, r18
 398:	92 83       	std	Z+2, r25	; 0x02
 39a:	30 5d       	subi	r19, 0xD0	; 208
	q = (d0 * 0xCD) >> 11;
	d0 = d0 - 10*q;

	d1 = q + 9*d3 + 5*d2 + d1;
	q = (d1 * 0xCD) >> 11;
	d1 = d1 - 10*q;
 39c:	95 2f       	mov	r25, r21
 39e:	99 0f       	add	r25, r25
 3a0:	29 2f       	mov	r18, r25
 3a2:	22 0f       	add	r18, r18
 3a4:	22 0f       	add	r18, r18
 3a6:	92 0f       	add	r25, r18

	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
	*ptr++ = ( d2 + '0' );
	*ptr++ = ( d1 + '0' );
 3a8:	39 1b       	sub	r19, r25
 3aa:	33 83       	std	Z+3, r19	; 0x03
 3ac:	40 5d       	subi	r20, 0xD0	; 208
	d2 = (n>>8)  & 0xF;
	d3 = (n>>12) & 0xF;

	d0 = 6*(d3 + d2 + d1) + (n & 0xF);
	q = (d0 * 0xCD) >> 11;
	d0 = d0 - 10*q;
 3ae:	88 0f       	add	r24, r24
 3b0:	98 2f       	mov	r25, r24
 3b2:	99 0f       	add	r25, r25
 3b4:	99 0f       	add	r25, r25
 3b6:	89 0f       	add	r24, r25
	char *ptr = buffer;
	*ptr++ = ( d4 + '0' );
	*ptr++ = ( d3 + '0' );
	*ptr++ = ( d2 + '0' );
	*ptr++ = ( d1 + '0' );
	*ptr++ = ( d0 + '0' );
 3b8:	48 1b       	sub	r20, r24
 3ba:	44 83       	std	Z+4, r20	; 0x04
	*ptr = 0;
 3bc:	15 82       	std	Z+5, r1	; 0x05

	while(buffer[0] == '0') ++buffer;
 3be:	a0 33       	cpi	r26, 0x30	; 48
 3c0:	49 f4       	brne	.+18     	; 0x3d4 <shift_and_mul_utoa16+0xec>
 3c2:	9f 01       	movw	r18, r30
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	f9 01       	movw	r30, r18
 3ca:	2f 5f       	subi	r18, 0xFF	; 255
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	80 81       	ld	r24, Z
 3d0:	80 33       	cpi	r24, 0x30	; 48
 3d2:	d1 f3       	breq	.-12     	; 0x3c8 <shift_and_mul_utoa16+0xe0>
	return buffer;
}
 3d4:	cf 01       	movw	r24, r30
 3d6:	08 95       	ret

000003d8 <main>:

int main(void)
{
	SW_RX_Init(); 
 3d8:	0e 94 28 03 	call	0x650	; 0x650 <SW_RX_Init>
	BL_Init(MYUBRR);
 3dc:	87 e6       	ldi	r24, 0x67	; 103
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 15 01 	call	0x22a	; 0x22a <BL_Init>
	PWM_Init();
 3e4:	0e 94 b4 02 	call	0x568	; 0x568 <PWM_Init>
					PWMChanged = 0;
				}	
				
		if((ScaleValue < (ScaleValueDetect - 2)) && (ScaleValue > 5))
		{
			OCR2A = 0;
 3e8:	c3 eb       	ldi	r28, 0xB3	; 179
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
	BL_Init(MYUBRR);
	PWM_Init();
		
    while (1) 
    {
		if(SWrxDataPending)
 3ec:	80 91 b7 01 	lds	r24, 0x01B7
 3f0:	81 11       	cpse	r24, r1
			{
				SW_RX_Fill_Buffer();
 3f2:	0e 94 42 03 	call	0x684	; 0x684 <SW_RX_Fill_Buffer>
			}
		if(SWmesIsComplete)
 3f6:	80 91 b8 01 	lds	r24, 0x01B8
 3fa:	88 23       	and	r24, r24
 3fc:	99 f1       	breq	.+102    	; 0x464 <main+0x8c>
			{

			SW_GetMessage();
 3fe:	0e 94 88 03 	call	0x710	; 0x710 <SW_GetMessage>
			ScaleValue = atof(SWscaleValueForBL+1);
 402:	8a eb       	ldi	r24, 0xBA	; 186
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 99 04 	call	0x932	; 0x932 <atof>
 40a:	6b 01       	movw	r12, r22
 40c:	7c 01       	movw	r14, r24
 40e:	60 93 9b 01 	sts	0x019B, r22
 412:	70 93 9c 01 	sts	0x019C, r23
 416:	80 93 9d 01 	sts	0x019D, r24
 41a:	90 93 9e 01 	sts	0x019E, r25
			
			//OCR2A = ScaleValue;
			if ((ScaleValue > 0) && !(ScaleValue == ScaleValueChange))
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	a9 01       	movw	r20, r18
 424:	0e 94 94 04 	call	0x928	; 0x928 <__gesf2>
 428:	18 16       	cp	r1, r24
 42a:	d4 f4       	brge	.+52     	; 0x460 <main+0x88>
 42c:	20 91 79 01 	lds	r18, 0x0179
 430:	30 91 7a 01 	lds	r19, 0x017A
 434:	40 91 7b 01 	lds	r20, 0x017B
 438:	50 91 7c 01 	lds	r21, 0x017C
 43c:	c7 01       	movw	r24, r14
 43e:	b6 01       	movw	r22, r12
 440:	0e 94 cf 03 	call	0x79e	; 0x79e <__cmpsf2>
 444:	88 23       	and	r24, r24
 446:	61 f0       	breq	.+24     	; 0x460 <main+0x88>
			{
				ScaleValueChange = ScaleValue;
 448:	c0 92 79 01 	sts	0x0179, r12
 44c:	d0 92 7a 01 	sts	0x017A, r13
 450:	e0 92 7b 01 	sts	0x017B, r14
 454:	f0 92 7c 01 	sts	0x017C, r15
				BL_SendStr (SWscaleValueForBL);
 458:	89 eb       	ldi	r24, 0xB9	; 185
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
			}
			SWmesIsComplete = 0;		
 460:	10 92 b8 01 	sts	0x01B8, r1
			
			}
				
			
						
		if (BLmesIsComplete) 
 464:	80 91 78 01 	lds	r24, 0x0178
 468:	88 23       	and	r24, r24
 46a:	21 f0       	breq	.+8      	; 0x474 <main+0x9c>
			{
			//BL_SendStr (BluetoothMessage);
						
			BL_DefComd(); // defining gotten message from bluetooth (smartphone)
 46c:	0e 94 86 00 	call	0x10c	; 0x10c <BL_DefComd>
			BLmesIsComplete = 0;  // reset flag "complete message from smartphone"
 470:	10 92 78 01 	sts	0x0178, r1
			}
		
		if(DebugAsk)
 474:	80 91 08 01 	lds	r24, 0x0108
 478:	88 23       	and	r24, r24
 47a:	e9 f0       	breq	.+58     	; 0x4b6 <main+0xde>
			{
				shift_and_mul_utoa16(ScaleValueDetect, StrScaleValueDetect);
 47c:	6d e7       	ldi	r22, 0x7D	; 125
 47e:	71 e0       	ldi	r23, 0x01	; 1
 480:	80 91 99 01 	lds	r24, 0x0199
 484:	90 91 9a 01 	lds	r25, 0x019A
 488:	0e 94 74 01 	call	0x2e8	; 0x2e8 <shift_and_mul_utoa16>
 48c:	4a e0       	ldi	r20, 0x0A	; 10
 48e:	6f e9       	ldi	r22, 0x9F	; 159
 490:	71 e0       	ldi	r23, 0x01	; 1
 492:	80 91 03 01 	lds	r24, 0x0103
 496:	90 91 04 01 	lds	r25, 0x0104
 49a:	0e 94 bb 04 	call	0x976	; 0x976 <__itoa_ncheck>
				StrPWMValue[5] = itoa (PWMvalue, StrPWMValue, 10);
 49e:	80 93 a4 01 	sts	0x01A4, r24
				//shift_and_mul_utoa16(StrOCR, OCR2A);
				BL_SendStr(StrScaleValueDetect);
 4a2:	8d e7       	ldi	r24, 0x7D	; 125
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
				BL_SendStr(StrPWMValue);
 4aa:	8f e9       	ldi	r24, 0x9F	; 159
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
				//BL_SendStr(StrOCR);

				DebugAsk = 0;
 4b2:	10 92 08 01 	sts	0x0108, r1
			}
				
		if (PWMvalue && PWMChanged && (ScaleValue > 20))
 4b6:	80 91 03 01 	lds	r24, 0x0103
 4ba:	90 91 04 01 	lds	r25, 0x0104
 4be:	89 2b       	or	r24, r25
 4c0:	31 f1       	breq	.+76     	; 0x50e <main+0x136>
 4c2:	80 91 02 01 	lds	r24, 0x0102
 4c6:	88 23       	and	r24, r24
 4c8:	11 f1       	breq	.+68     	; 0x50e <main+0x136>
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	40 ea       	ldi	r20, 0xA0	; 160
 4d0:	51 e4       	ldi	r21, 0x41	; 65
 4d2:	60 91 9b 01 	lds	r22, 0x019B
 4d6:	70 91 9c 01 	lds	r23, 0x019C
 4da:	80 91 9d 01 	lds	r24, 0x019D
 4de:	90 91 9e 01 	lds	r25, 0x019E
 4e2:	0e 94 94 04 	call	0x928	; 0x928 <__gesf2>
 4e6:	18 16       	cp	r1, r24
 4e8:	94 f4       	brge	.+36     	; 0x50e <main+0x136>
				{
					PWM_PinValue();   // write gotten correction value from smartphone to OCR2A for change OC2A pin PWM
 4ea:	0e 94 bf 02 	call	0x57e	; 0x57e <PWM_PinValue>
					ScaleValueDetect = ScaleValue; 
 4ee:	60 91 9b 01 	lds	r22, 0x019B
 4f2:	70 91 9c 01 	lds	r23, 0x019C
 4f6:	80 91 9d 01 	lds	r24, 0x019D
 4fa:	90 91 9e 01 	lds	r25, 0x019E
 4fe:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fixsfsi>
 502:	70 93 9a 01 	sts	0x019A, r23
 506:	60 93 99 01 	sts	0x0199, r22
					PWMChanged = 0;
 50a:	10 92 02 01 	sts	0x0102, r1
				}	
				
		if((ScaleValue < (ScaleValueDetect - 2)) && (ScaleValue > 5))
 50e:	c0 90 9b 01 	lds	r12, 0x019B
 512:	d0 90 9c 01 	lds	r13, 0x019C
 516:	e0 90 9d 01 	lds	r14, 0x019D
 51a:	f0 90 9e 01 	lds	r15, 0x019E
 51e:	80 91 99 01 	lds	r24, 0x0199
 522:	90 91 9a 01 	lds	r25, 0x019A
 526:	bc 01       	movw	r22, r24
 528:	62 50       	subi	r22, 0x02	; 2
 52a:	71 09       	sbc	r23, r1
 52c:	07 2e       	mov	r0, r23
 52e:	00 0c       	add	r0, r0
 530:	88 0b       	sbc	r24, r24
 532:	99 0b       	sbc	r25, r25
 534:	0e 94 0c 04 	call	0x818	; 0x818 <__floatsisf>
 538:	a7 01       	movw	r20, r14
 53a:	96 01       	movw	r18, r12
 53c:	0e 94 94 04 	call	0x928	; 0x928 <__gesf2>
 540:	18 16       	cp	r1, r24
 542:	0c f0       	brlt	.+2      	; 0x546 <main+0x16e>
 544:	53 cf       	rjmp	.-346    	; 0x3ec <main+0x14>
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 ea       	ldi	r20, 0xA0	; 160
 54c:	50 e4       	ldi	r21, 0x40	; 64
 54e:	c7 01       	movw	r24, r14
 550:	b6 01       	movw	r22, r12
 552:	0e 94 94 04 	call	0x928	; 0x928 <__gesf2>
 556:	18 16       	cp	r1, r24
 558:	0c f0       	brlt	.+2      	; 0x55c <main+0x184>
 55a:	48 cf       	rjmp	.-368    	; 0x3ec <main+0x14>
		{
			OCR2A = 0;
 55c:	18 82       	st	Y, r1
			ScaleValueDetect = 0;
 55e:	10 92 9a 01 	sts	0x019A, r1
 562:	10 92 99 01 	sts	0x0199, r1
 566:	42 cf       	rjmp	.-380    	; 0x3ec <main+0x14>

00000568 <PWM_Init>:
#include "BLdefComd.h"


void PWM_Init()
{
	DDRB = (1 << PORTB3)|(1 << PORTB5);// set up pin portb3 like output 
 568:	88 e2       	ldi	r24, 0x28	; 40
 56a:	84 b9       	out	0x04, r24	; 4
	TCCR2A = (1 << WGM21)|(1 << WGM20)|(1<< COM2A1);
 56c:	83 e8       	ldi	r24, 0x83	; 131
 56e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1<<CS20);
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 0x00;
 578:	10 92 b3 00 	sts	0x00B3, r1
 57c:	08 95       	ret

0000057e <PWM_PinValue>:
}


void PWM_PinValue()
{
	OCR2A = PWMvalue;		
 57e:	80 91 03 01 	lds	r24, 0x0103
 582:	80 93 b3 00 	sts	0x00B3, r24
 586:	08 95       	ret

00000588 <__vector_1>:
	SWrxBufTail = 0;
	
}

ISR (INT0_vect)
{
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	8f 93       	push	r24
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31
	SWnumBit = 0;
 598:	10 92 0c 01 	sts	0x010C, r1
	DISABLE_EXTERNAL0_INTERRUPT ();		// disable interrupt during the data bits
 59c:	e8 98       	cbi	0x1d, 0	; 29
	
	DISABLE_TIMER_INTERRUPT();			//disable timer to change its registers
 59e:	ee e6       	ldi	r30, 0x6E	; 110
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	8d 7f       	andi	r24, 0xFD	; 253
 5a6:	80 83       	st	Z, r24
	TCCR0B &= ~( 1 << CS01 );			//reset prescaler counter
 5a8:	85 b5       	in	r24, 0x25	; 37
 5aa:	8d 7f       	andi	r24, 0xFD	; 253
 5ac:	85 bd       	out	0x25, r24	; 37
	
	TCNT0 = INTERRUPT_EXEC_CYCL;		// Clear counter register. Include time to run interrupt rutine
 5ae:	89 e0       	ldi	r24, 0x09	; 9
 5b0:	86 bd       	out	0x26, r24	; 38
	
	TCCR0B |= ( 1 << CS01 );			// Start prescaler clock
 5b2:	85 b5       	in	r24, 0x25	; 37
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = TICKSFIRST;			// Count one and half period into the future
 5b8:	87 e6       	ldi	r24, 0x67	; 103
 5ba:	87 bd       	out	0x27, r24	; 39
	
	SW_RX_Bit_Count = 0;				// Clear received bit counter.
 5bc:	10 92 22 01 	sts	0x0122, r1
	
	
	ENABLE_TIMER_INTERRUPT();			// Enable timer0 interrupt on again
 5c0:	80 81       	ld	r24, Z
 5c2:	82 60       	ori	r24, 0x02	; 2
 5c4:	80 83       	st	Z, r24
	CLEAR_TIMER_INTERRUPT();			// Clear interrupt bits
 5c6:	a9 9a       	sbi	0x15, 1	; 21
}
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	8f 91       	pop	r24
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	8f 93       	push	r24
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	if(!SWnumBit)
 5e8:	80 91 0c 01 	lds	r24, 0x010C
 5ec:	81 11       	cpse	r24, r1
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <__vector_14+0x24>
	{
		SWnumBit = 1;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 93 0c 01 	sts	0x010C, r24
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 5f6:	80 ed       	ldi	r24, 0xD0	; 208
 5f8:	87 bd       	out	0x27, r24	; 39
 5fa:	22 c0       	rjmp	.+68     	; 0x640 <__vector_14+0x68>
	}
	else
	{
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 5fc:	80 ed       	ldi	r24, 0xD0	; 208
 5fe:	87 bd       	out	0x27, r24	; 39
		// Receiving lsb first
		if( SW_RX_Bit_Count < 8 )
 600:	80 91 22 01 	lds	r24, 0x0122
 604:	88 30       	cpi	r24, 0x08	; 8
 606:	90 f4       	brcc	.+36     	; 0x62c <__vector_14+0x54>
		{
			SW_RX_Bit_Count++;
 608:	80 91 22 01 	lds	r24, 0x0122
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	80 93 22 01 	sts	0x0122, r24
			SW_RX_Data = (SW_RX_Data>>1); // Shift due to receiving lsb first
 612:	80 91 23 01 	lds	r24, 0x0123
 616:	86 95       	lsr	r24
 618:	80 93 23 01 	sts	0x0123, r24
			if ( GET_RX_PIN() != 0 )
 61c:	4a 9b       	sbis	0x09, 2	; 9
 61e:	10 c0       	rjmp	.+32     	; 0x640 <__vector_14+0x68>
			{
				SW_RX_Data |= 0x80;		  // If a logical 1 is read, let the data mirror this
 620:	80 91 23 01 	lds	r24, 0x0123
 624:	80 68       	ori	r24, 0x80	; 128
 626:	80 93 23 01 	sts	0x0123, r24
 62a:	0a c0       	rjmp	.+20     	; 0x640 <__vector_14+0x68>
			}
		}
		else
		{
			SWrxDataPending = 1;		// Enter data pending when one byte is received
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 b7 01 	sts	0x01B7, r24
			DISABLE_TIMER_INTERRUPT();	// Disable this interrupt
 632:	ee e6       	ldi	r30, 0x6E	; 110
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	8d 7f       	andi	r24, 0xFD	; 253
 63a:	80 83       	st	Z, r24
			EIFR |= (1 << INTF0);	// Reset flag not to enter the ISR one extra time
 63c:	e0 9a       	sbi	0x1c, 0	; 28
			ENABLE_EXTERNAL0_INTERRUPT(); // Enable interrupt to receive more bytes.
 63e:	e8 9a       	sbi	0x1d, 0	; 29
		}
	 }
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	8f 91       	pop	r24
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <SW_RX_Init>:

void SW_RX_Init(void)
{
	//PORT
	PORTD |= ( 1<<SW_RX_PIN);	// RX_PIN is input, tri-stated
 650:	5a 9a       	sbi	0x0b, 2	; 11
	
	// Timer0
	DISABLE_TIMER_INTERRUPT();
 652:	ee e6       	ldi	r30, 0x6E	; 110
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	8d 7f       	andi	r24, 0xFD	; 253
 65a:	80 83       	st	Z, r24
	TCCR0A = 0x00;		// Reset control register
 65c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;		// Reset presclaler
 65e:	15 bc       	out	0x25, r1	; 37
	TCCR0A |= (1 << WGM01);  //Timer in CTC mode
 660:	84 b5       	in	r24, 0x24	; 36
 662:	82 60       	ori	r24, 0x02	; 2
 664:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);	 //divide by 8 prescaler
 666:	85 b5       	in	r24, 0x25	; 37
 668:	82 60       	ori	r24, 0x02	; 2
 66a:	85 bd       	out	0x25, r24	; 37
	
	//External interrupt
	EIFR= 0x00;				//Init
 66c:	1c ba       	out	0x1c, r1	; 28
	EICRA |= ( 1<<ISC01 );	//Interrupt sense control: falling edge
 66e:	e9 e6       	ldi	r30, 0x69	; 105
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	82 60       	ori	r24, 0x02	; 2
 676:	80 83       	st	Z, r24
	ENABLE_EXTERNAL0_INTERRUPT();  // Turn external interrupt on
 678:	e8 9a       	sbi	0x1d, 0	; 29
	
	CLEAR_TIMER_INTERRUPT();
 67a:	a9 9a       	sbi	0x15, 1	; 21
	//Internal State Variable
	SWrxDataPending = 0;
 67c:	10 92 b7 01 	sts	0x01B7, r1
	sei();
 680:	78 94       	sei
 682:	08 95       	ret

00000684 <SW_RX_Fill_Buffer>:
	
}

void SW_RX_Fill_Buffer(void)
{
		if(SWrxCount < SW_SIZE_BUF)
 684:	80 91 0d 01 	lds	r24, 0x010D
 688:	82 31       	cpi	r24, 0x12	; 18
 68a:	28 f5       	brcc	.+74     	; 0x6d6 <SW_RX_Fill_Buffer+0x52>
		{
			SWrxBuf[SWrxBufTail] = SW_RX_Data;
 68c:	e0 91 0f 01 	lds	r30, 0x010F
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 91 23 01 	lds	r24, 0x0123
 696:	e0 5f       	subi	r30, 0xF0	; 240
 698:	fe 4f       	sbci	r31, 0xFE	; 254
 69a:	80 83       	st	Z, r24
			SWrxDataPending = 0;
 69c:	10 92 b7 01 	sts	0x01B7, r1
			if (SWrxBuf[SWrxBufTail] == 0x0A)
 6a0:	e0 91 0f 01 	lds	r30, 0x010F
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	e0 5f       	subi	r30, 0xF0	; 240
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	80 81       	ld	r24, Z
 6ac:	8a 30       	cpi	r24, 0x0A	; 10
 6ae:	19 f4       	brne	.+6      	; 0x6b6 <SW_RX_Fill_Buffer+0x32>
			{
				SWmesIsComplete = 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	80 93 b8 01 	sts	0x01B8, r24
			}
			SWrxBufTail++;
 6b6:	80 91 0f 01 	lds	r24, 0x010F
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	80 93 0f 01 	sts	0x010F, r24
			if(SWrxBufTail == SW_SIZE_BUF) SWrxBufTail = 0;
 6c0:	80 91 0f 01 	lds	r24, 0x010F
 6c4:	82 31       	cpi	r24, 0x12	; 18
 6c6:	11 f4       	brne	.+4      	; 0x6cc <SW_RX_Fill_Buffer+0x48>
 6c8:	10 92 0f 01 	sts	0x010F, r1
			SWrxCount++;
 6cc:	80 91 0d 01 	lds	r24, 0x010D
 6d0:	8f 5f       	subi	r24, 0xFF	; 255
 6d2:	80 93 0d 01 	sts	0x010D, r24
 6d6:	08 95       	ret

000006d8 <SW_GetChar>:
}

uint8_t SW_GetChar(void)
{
	uint8_t SWsym;
	if (SWrxCount > 0)
 6d8:	80 91 0d 01 	lds	r24, 0x010D
 6dc:	88 23       	and	r24, r24
 6de:	b9 f0       	breq	.+46     	; 0x70e <SW_GetChar+0x36>
	{
		SWsym = SWrxBuf[SWrxBufHead];
 6e0:	e0 91 0e 01 	lds	r30, 0x010E
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	e0 5f       	subi	r30, 0xF0	; 240
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	80 81       	ld	r24, Z
		SWrxCount--;
 6ec:	90 91 0d 01 	lds	r25, 0x010D
 6f0:	91 50       	subi	r25, 0x01	; 1
 6f2:	90 93 0d 01 	sts	0x010D, r25
		SWrxBufHead++;
 6f6:	90 91 0e 01 	lds	r25, 0x010E
 6fa:	9f 5f       	subi	r25, 0xFF	; 255
 6fc:	90 93 0e 01 	sts	0x010E, r25
		if(SWrxBufHead == SW_SIZE_BUF) SWrxBufHead = 0;
 700:	90 91 0e 01 	lds	r25, 0x010E
 704:	92 31       	cpi	r25, 0x12	; 18
 706:	19 f4       	brne	.+6      	; 0x70e <SW_GetChar+0x36>
 708:	10 92 0e 01 	sts	0x010E, r1
 70c:	08 95       	ret
		return SWsym;
	}
}
 70e:	08 95       	ret

00000710 <SW_GetMessage>:

void SW_GetMessage(void)
{
 710:	cf 92       	push	r12
 712:	df 92       	push	r13
 714:	ef 92       	push	r14
 716:	ff 92       	push	r15
 718:	0f 93       	push	r16
 71a:	1f 93       	push	r17
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	11 e0       	ldi	r17, 0x01	; 1
 722:	c0 e0       	ldi	r28, 0x00	; 0
 724:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 726:	dd 24       	eor	r13, r13
 728:	d3 94       	inc	r13
	{
		uint8_t SWvalue = SW_GetChar();
		SWrxMessage[i] = SWvalue;
		SWscaleValueForBL[0] = 'v';
 72a:	0f 2e       	mov	r0, r31
 72c:	f9 eb       	ldi	r31, 0xB9	; 185
 72e:	ef 2e       	mov	r14, r31
 730:	f1 e0       	ldi	r31, 0x01	; 1
 732:	ff 2e       	mov	r15, r31
 734:	f0 2d       	mov	r31, r0
 736:	06 e7       	ldi	r16, 0x76	; 118
				SWscaleValueForBL[j] = SWvalue;
				j++;
			}
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
 738:	0f 2e       	mov	r0, r31
 73a:	fd e0       	ldi	r31, 0x0D	; 13
 73c:	cf 2e       	mov	r12, r31
 73e:	f0 2d       	mov	r31, r0
 740:	02 c0       	rjmp	.+4      	; 0x746 <SW_GetMessage+0x36>
 742:	21 96       	adiw	r28, 0x01	; 1
 744:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
	{
		uint8_t SWvalue = SW_GetChar();
 746:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SW_GetChar>
		SWrxMessage[i] = SWvalue;
 74a:	fe 01       	movw	r30, r28
 74c:	eb 55       	subi	r30, 0x5B	; 91
 74e:	fe 4f       	sbci	r31, 0xFE	; 254
 750:	80 83       	st	Z, r24
		SWscaleValueForBL[0] = 'v';
 752:	f7 01       	movw	r30, r14
 754:	00 83       	st	Z, r16
 756:	9c 2f       	mov	r25, r28
 758:	2c 2f       	mov	r18, r28
 75a:	27 50       	subi	r18, 0x07	; 7
		if ( (i>6) && (i<14) && (!(SWrxMessage[i] == ' ')))
 75c:	27 30       	cpi	r18, 0x07	; 7
 75e:	60 f4       	brcc	.+24     	; 0x778 <SW_GetMessage+0x68>
 760:	fe 01       	movw	r30, r28
 762:	eb 55       	subi	r30, 0x5B	; 91
 764:	fe 4f       	sbci	r31, 0xFE	; 254
 766:	20 81       	ld	r18, Z
 768:	20 32       	cpi	r18, 0x20	; 32
 76a:	31 f0       	breq	.+12     	; 0x778 <SW_GetMessage+0x68>
			{
				SWscaleValueForBL[j] = SWvalue;
 76c:	ed 2d       	mov	r30, r13
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	e7 54       	subi	r30, 0x47	; 71
 772:	fe 4f       	sbci	r31, 0xFE	; 254
 774:	80 83       	st	Z, r24
				j++;
 776:	d3 94       	inc	r13
			}
		if (i==14)
 778:	9e 30       	cpi	r25, 0x0E	; 14
 77a:	31 f4       	brne	.+12     	; 0x788 <SW_GetMessage+0x78>
		{
			SWscaleValueForBL[j] = 0x0D;
 77c:	ed 2d       	mov	r30, r13
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	e7 54       	subi	r30, 0x47	; 71
 782:	fe 4f       	sbci	r31, 0xFE	; 254
 784:	c0 82       	st	Z, r12
 786:	dd cf       	rjmp	.-70     	; 0x742 <SW_GetMessage+0x32>

void SW_GetMessage(void)
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 788:	12 31       	cpi	r17, 0x12	; 18
 78a:	d8 f2       	brcs	.-74     	; 0x742 <SW_GetMessage+0x32>
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
		}
	}
}
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	08 95       	ret

0000079e <__cmpsf2>:
 79e:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_cmp>
 7a2:	08 f4       	brcc	.+2      	; 0x7a6 <__cmpsf2+0x8>
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	08 95       	ret

000007a8 <__fixsfsi>:
 7a8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fixunssfsi>
 7ac:	68 94       	set
 7ae:	b1 11       	cpse	r27, r1
 7b0:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 7b4:	08 95       	ret

000007b6 <__fixunssfsi>:
 7b6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_splitA>
 7ba:	88 f0       	brcs	.+34     	; 0x7de <__fixunssfsi+0x28>
 7bc:	9f 57       	subi	r25, 0x7F	; 127
 7be:	98 f0       	brcs	.+38     	; 0x7e6 <__fixunssfsi+0x30>
 7c0:	b9 2f       	mov	r27, r25
 7c2:	99 27       	eor	r25, r25
 7c4:	b7 51       	subi	r27, 0x17	; 23
 7c6:	b0 f0       	brcs	.+44     	; 0x7f4 <__fixunssfsi+0x3e>
 7c8:	e1 f0       	breq	.+56     	; 0x802 <__fixunssfsi+0x4c>
 7ca:	66 0f       	add	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	88 1f       	adc	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	1a f0       	brmi	.+6      	; 0x7da <__fixunssfsi+0x24>
 7d4:	ba 95       	dec	r27
 7d6:	c9 f7       	brne	.-14     	; 0x7ca <__fixunssfsi+0x14>
 7d8:	14 c0       	rjmp	.+40     	; 0x802 <__fixunssfsi+0x4c>
 7da:	b1 30       	cpi	r27, 0x01	; 1
 7dc:	91 f0       	breq	.+36     	; 0x802 <__fixunssfsi+0x4c>
 7de:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_zero>
 7e2:	b1 e0       	ldi	r27, 0x01	; 1
 7e4:	08 95       	ret
 7e6:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_zero>
 7ea:	67 2f       	mov	r22, r23
 7ec:	78 2f       	mov	r23, r24
 7ee:	88 27       	eor	r24, r24
 7f0:	b8 5f       	subi	r27, 0xF8	; 248
 7f2:	39 f0       	breq	.+14     	; 0x802 <__fixunssfsi+0x4c>
 7f4:	b9 3f       	cpi	r27, 0xF9	; 249
 7f6:	cc f3       	brlt	.-14     	; 0x7ea <__fixunssfsi+0x34>
 7f8:	86 95       	lsr	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b3 95       	inc	r27
 800:	d9 f7       	brne	.-10     	; 0x7f8 <__fixunssfsi+0x42>
 802:	3e f4       	brtc	.+14     	; 0x812 <__fixunssfsi+0x5c>
 804:	90 95       	com	r25
 806:	80 95       	com	r24
 808:	70 95       	com	r23
 80a:	61 95       	neg	r22
 80c:	7f 4f       	sbci	r23, 0xFF	; 255
 80e:	8f 4f       	sbci	r24, 0xFF	; 255
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	08 95       	ret

00000814 <__floatunsisf>:
 814:	e8 94       	clt
 816:	09 c0       	rjmp	.+18     	; 0x82a <__floatsisf+0x12>

00000818 <__floatsisf>:
 818:	97 fb       	bst	r25, 7
 81a:	3e f4       	brtc	.+14     	; 0x82a <__floatsisf+0x12>
 81c:	90 95       	com	r25
 81e:	80 95       	com	r24
 820:	70 95       	com	r23
 822:	61 95       	neg	r22
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	99 23       	and	r25, r25
 82c:	a9 f0       	breq	.+42     	; 0x858 <__floatsisf+0x40>
 82e:	f9 2f       	mov	r31, r25
 830:	96 e9       	ldi	r25, 0x96	; 150
 832:	bb 27       	eor	r27, r27
 834:	93 95       	inc	r25
 836:	f6 95       	lsr	r31
 838:	87 95       	ror	r24
 83a:	77 95       	ror	r23
 83c:	67 95       	ror	r22
 83e:	b7 95       	ror	r27
 840:	f1 11       	cpse	r31, r1
 842:	f8 cf       	rjmp	.-16     	; 0x834 <__floatsisf+0x1c>
 844:	fa f4       	brpl	.+62     	; 0x884 <__floatsisf+0x6c>
 846:	bb 0f       	add	r27, r27
 848:	11 f4       	brne	.+4      	; 0x84e <__floatsisf+0x36>
 84a:	60 ff       	sbrs	r22, 0
 84c:	1b c0       	rjmp	.+54     	; 0x884 <__floatsisf+0x6c>
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	16 c0       	rjmp	.+44     	; 0x884 <__floatsisf+0x6c>
 858:	88 23       	and	r24, r24
 85a:	11 f0       	breq	.+4      	; 0x860 <__floatsisf+0x48>
 85c:	96 e9       	ldi	r25, 0x96	; 150
 85e:	11 c0       	rjmp	.+34     	; 0x882 <__floatsisf+0x6a>
 860:	77 23       	and	r23, r23
 862:	21 f0       	breq	.+8      	; 0x86c <__floatsisf+0x54>
 864:	9e e8       	ldi	r25, 0x8E	; 142
 866:	87 2f       	mov	r24, r23
 868:	76 2f       	mov	r23, r22
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__floatsisf+0x5e>
 86c:	66 23       	and	r22, r22
 86e:	71 f0       	breq	.+28     	; 0x88c <__floatsisf+0x74>
 870:	96 e8       	ldi	r25, 0x86	; 134
 872:	86 2f       	mov	r24, r22
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	2a f0       	brmi	.+10     	; 0x884 <__floatsisf+0x6c>
 87a:	9a 95       	dec	r25
 87c:	66 0f       	add	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	da f7       	brpl	.-10     	; 0x87a <__floatsisf+0x62>
 884:	88 0f       	add	r24, r24
 886:	96 95       	lsr	r25
 888:	87 95       	ror	r24
 88a:	97 f9       	bld	r25, 7
 88c:	08 95       	ret

0000088e <__fp_cmp>:
 88e:	99 0f       	add	r25, r25
 890:	00 08       	sbc	r0, r0
 892:	55 0f       	add	r21, r21
 894:	aa 0b       	sbc	r26, r26
 896:	e0 e8       	ldi	r30, 0x80	; 128
 898:	fe ef       	ldi	r31, 0xFE	; 254
 89a:	16 16       	cp	r1, r22
 89c:	17 06       	cpc	r1, r23
 89e:	e8 07       	cpc	r30, r24
 8a0:	f9 07       	cpc	r31, r25
 8a2:	c0 f0       	brcs	.+48     	; 0x8d4 <__fp_cmp+0x46>
 8a4:	12 16       	cp	r1, r18
 8a6:	13 06       	cpc	r1, r19
 8a8:	e4 07       	cpc	r30, r20
 8aa:	f5 07       	cpc	r31, r21
 8ac:	98 f0       	brcs	.+38     	; 0x8d4 <__fp_cmp+0x46>
 8ae:	62 1b       	sub	r22, r18
 8b0:	73 0b       	sbc	r23, r19
 8b2:	84 0b       	sbc	r24, r20
 8b4:	95 0b       	sbc	r25, r21
 8b6:	39 f4       	brne	.+14     	; 0x8c6 <__fp_cmp+0x38>
 8b8:	0a 26       	eor	r0, r26
 8ba:	61 f0       	breq	.+24     	; 0x8d4 <__fp_cmp+0x46>
 8bc:	23 2b       	or	r18, r19
 8be:	24 2b       	or	r18, r20
 8c0:	25 2b       	or	r18, r21
 8c2:	21 f4       	brne	.+8      	; 0x8cc <__fp_cmp+0x3e>
 8c4:	08 95       	ret
 8c6:	0a 26       	eor	r0, r26
 8c8:	09 f4       	brne	.+2      	; 0x8cc <__fp_cmp+0x3e>
 8ca:	a1 40       	sbci	r26, 0x01	; 1
 8cc:	a6 95       	lsr	r26
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	81 1d       	adc	r24, r1
 8d2:	81 1d       	adc	r24, r1
 8d4:	08 95       	ret

000008d6 <__fp_split3>:
 8d6:	57 fd       	sbrc	r21, 7
 8d8:	90 58       	subi	r25, 0x80	; 128
 8da:	44 0f       	add	r20, r20
 8dc:	55 1f       	adc	r21, r21
 8de:	59 f0       	breq	.+22     	; 0x8f6 <__fp_splitA+0x10>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	71 f0       	breq	.+28     	; 0x900 <__stack+0x1>
 8e4:	47 95       	ror	r20

000008e6 <__fp_splitA>:
 8e6:	88 0f       	add	r24, r24
 8e8:	97 fb       	bst	r25, 7
 8ea:	99 1f       	adc	r25, r25
 8ec:	61 f0       	breq	.+24     	; 0x906 <__stack+0x7>
 8ee:	9f 3f       	cpi	r25, 0xFF	; 255
 8f0:	79 f0       	breq	.+30     	; 0x910 <__stack+0x11>
 8f2:	87 95       	ror	r24
 8f4:	08 95       	ret
 8f6:	12 16       	cp	r1, r18
 8f8:	13 06       	cpc	r1, r19
 8fa:	14 06       	cpc	r1, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	f2 cf       	rjmp	.-28     	; 0x8e4 <__fp_split3+0xe>
 900:	46 95       	lsr	r20
 902:	f1 df       	rcall	.-30     	; 0x8e6 <__fp_splitA>
 904:	08 c0       	rjmp	.+16     	; 0x916 <__stack+0x17>
 906:	16 16       	cp	r1, r22
 908:	17 06       	cpc	r1, r23
 90a:	18 06       	cpc	r1, r24
 90c:	99 1f       	adc	r25, r25
 90e:	f1 cf       	rjmp	.-30     	; 0x8f2 <__fp_splitA+0xc>
 910:	86 95       	lsr	r24
 912:	71 05       	cpc	r23, r1
 914:	61 05       	cpc	r22, r1
 916:	08 94       	sec
 918:	08 95       	ret

0000091a <__fp_zero>:
 91a:	e8 94       	clt

0000091c <__fp_szero>:
 91c:	bb 27       	eor	r27, r27
 91e:	66 27       	eor	r22, r22
 920:	77 27       	eor	r23, r23
 922:	cb 01       	movw	r24, r22
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__gesf2>:
 928:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_cmp>
 92c:	08 f4       	brcc	.+2      	; 0x930 <__gesf2+0x8>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	08 95       	ret

00000932 <atof>:
 932:	66 27       	eor	r22, r22
 934:	77 27       	eor	r23, r23
 936:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <strtod>

0000093a <atoi>:
 93a:	fc 01       	movw	r30, r24
 93c:	88 27       	eor	r24, r24
 93e:	99 27       	eor	r25, r25
 940:	e8 94       	clt
 942:	21 91       	ld	r18, Z+
 944:	20 32       	cpi	r18, 0x20	; 32
 946:	e9 f3       	breq	.-6      	; 0x942 <atoi+0x8>
 948:	29 30       	cpi	r18, 0x09	; 9
 94a:	10 f0       	brcs	.+4      	; 0x950 <atoi+0x16>
 94c:	2e 30       	cpi	r18, 0x0E	; 14
 94e:	c8 f3       	brcs	.-14     	; 0x942 <atoi+0x8>
 950:	2b 32       	cpi	r18, 0x2B	; 43
 952:	41 f0       	breq	.+16     	; 0x964 <atoi+0x2a>
 954:	2d 32       	cpi	r18, 0x2D	; 45
 956:	39 f4       	brne	.+14     	; 0x966 <atoi+0x2c>
 958:	68 94       	set
 95a:	04 c0       	rjmp	.+8      	; 0x964 <atoi+0x2a>
 95c:	0e 94 c6 04 	call	0x98c	; 0x98c <__mulhi_const_10>
 960:	82 0f       	add	r24, r18
 962:	91 1d       	adc	r25, r1
 964:	21 91       	ld	r18, Z+
 966:	20 53       	subi	r18, 0x30	; 48
 968:	2a 30       	cpi	r18, 0x0A	; 10
 96a:	c0 f3       	brcs	.-16     	; 0x95c <atoi+0x22>
 96c:	1e f4       	brtc	.+6      	; 0x974 <atoi+0x3a>
 96e:	90 95       	com	r25
 970:	81 95       	neg	r24
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	08 95       	ret

00000976 <__itoa_ncheck>:
 976:	bb 27       	eor	r27, r27
 978:	4a 30       	cpi	r20, 0x0A	; 10
 97a:	31 f4       	brne	.+12     	; 0x988 <__itoa_ncheck+0x12>
 97c:	99 23       	and	r25, r25
 97e:	22 f4       	brpl	.+8      	; 0x988 <__itoa_ncheck+0x12>
 980:	bd e2       	ldi	r27, 0x2D	; 45
 982:	90 95       	com	r25
 984:	81 95       	neg	r24
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__utoa_common>

0000098c <__mulhi_const_10>:
 98c:	7a e0       	ldi	r23, 0x0A	; 10
 98e:	97 9f       	mul	r25, r23
 990:	90 2d       	mov	r25, r0
 992:	87 9f       	mul	r24, r23
 994:	80 2d       	mov	r24, r0
 996:	91 0d       	add	r25, r1
 998:	11 24       	eor	r1, r1
 99a:	08 95       	ret

0000099c <__utoa_ncheck>:
 99c:	bb 27       	eor	r27, r27

0000099e <__utoa_common>:
 99e:	fb 01       	movw	r30, r22
 9a0:	55 27       	eor	r21, r21
 9a2:	aa 27       	eor	r26, r26
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	aa 1f       	adc	r26, r26
 9aa:	a4 17       	cp	r26, r20
 9ac:	10 f0       	brcs	.+4      	; 0x9b2 <__utoa_common+0x14>
 9ae:	a4 1b       	sub	r26, r20
 9b0:	83 95       	inc	r24
 9b2:	50 51       	subi	r21, 0x10	; 16
 9b4:	b9 f7       	brne	.-18     	; 0x9a4 <__utoa_common+0x6>
 9b6:	a0 5d       	subi	r26, 0xD0	; 208
 9b8:	aa 33       	cpi	r26, 0x3A	; 58
 9ba:	08 f0       	brcs	.+2      	; 0x9be <__utoa_common+0x20>
 9bc:	a9 5d       	subi	r26, 0xD9	; 217
 9be:	a1 93       	st	Z+, r26
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	79 f7       	brne	.-34     	; 0x9a2 <__utoa_common+0x4>
 9c4:	b1 11       	cpse	r27, r1
 9c6:	b1 93       	st	Z+, r27
 9c8:	11 92       	st	Z+, r1
 9ca:	cb 01       	movw	r24, r22
 9cc:	0c 94 66 06 	jmp	0xccc	; 0xccc <strrev>

000009d0 <strtod>:
 9d0:	a0 e0       	ldi	r26, 0x00	; 0
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	ee ee       	ldi	r30, 0xEE	; 238
 9d6:	f4 e0       	ldi	r31, 0x04	; 4
 9d8:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__prologue_saves__+0x8>
 9dc:	ec 01       	movw	r28, r24
 9de:	7b 01       	movw	r14, r22
 9e0:	61 15       	cp	r22, r1
 9e2:	71 05       	cpc	r23, r1
 9e4:	19 f0       	breq	.+6      	; 0x9ec <strtod+0x1c>
 9e6:	db 01       	movw	r26, r22
 9e8:	8d 93       	st	X+, r24
 9ea:	9c 93       	st	X, r25
 9ec:	8e 01       	movw	r16, r28
 9ee:	0f 5f       	subi	r16, 0xFF	; 255
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	78 80       	ld	r7, Y
 9f4:	87 2d       	mov	r24, r7
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 45 06 	call	0xc8a	; 0xc8a <isspace>
 9fc:	89 2b       	or	r24, r25
 9fe:	11 f0       	breq	.+4      	; 0xa04 <strtod+0x34>
 a00:	e8 01       	movw	r28, r16
 a02:	f4 cf       	rjmp	.-24     	; 0x9ec <strtod+0x1c>
 a04:	bd e2       	ldi	r27, 0x2D	; 45
 a06:	7b 12       	cpse	r7, r27
 a08:	05 c0       	rjmp	.+10     	; 0xa14 <strtod+0x44>
 a0a:	0f 5f       	subi	r16, 0xFF	; 255
 a0c:	1f 4f       	sbci	r17, 0xFF	; 255
 a0e:	79 80       	ldd	r7, Y+1	; 0x01
 a10:	c1 e0       	ldi	r28, 0x01	; 1
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <strtod+0x54>
 a14:	eb e2       	ldi	r30, 0x2B	; 43
 a16:	7e 12       	cpse	r7, r30
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <strtod+0x52>
 a1a:	8e 01       	movw	r16, r28
 a1c:	0e 5f       	subi	r16, 0xFE	; 254
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	79 80       	ldd	r7, Y+1	; 0x01
 a22:	c0 e0       	ldi	r28, 0x00	; 0
 a24:	68 01       	movw	r12, r16
 a26:	f1 e0       	ldi	r31, 0x01	; 1
 a28:	cf 1a       	sub	r12, r31
 a2a:	d1 08       	sbc	r13, r1
 a2c:	43 e0       	ldi	r20, 0x03	; 3
 a2e:	50 e0       	ldi	r21, 0x00	; 0
 a30:	60 e7       	ldi	r22, 0x70	; 112
 a32:	70 e0       	ldi	r23, 0x00	; 0
 a34:	c6 01       	movw	r24, r12
 a36:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strncasecmp_P>
 a3a:	89 2b       	or	r24, r25
 a3c:	f1 f4       	brne	.+60     	; 0xa7a <strtod+0xaa>
 a3e:	68 01       	movw	r12, r16
 a40:	22 e0       	ldi	r18, 0x02	; 2
 a42:	c2 0e       	add	r12, r18
 a44:	d1 1c       	adc	r13, r1
 a46:	45 e0       	ldi	r20, 0x05	; 5
 a48:	50 e0       	ldi	r21, 0x00	; 0
 a4a:	6b e6       	ldi	r22, 0x6B	; 107
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	c6 01       	movw	r24, r12
 a50:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strncasecmp_P>
 a54:	89 2b       	or	r24, r25
 a56:	21 f4       	brne	.+8      	; 0xa60 <strtod+0x90>
 a58:	68 01       	movw	r12, r16
 a5a:	87 e0       	ldi	r24, 0x07	; 7
 a5c:	c8 0e       	add	r12, r24
 a5e:	d1 1c       	adc	r13, r1
 a60:	e1 14       	cp	r14, r1
 a62:	f1 04       	cpc	r15, r1
 a64:	19 f0       	breq	.+6      	; 0xa6c <strtod+0x9c>
 a66:	d7 01       	movw	r26, r14
 a68:	cd 92       	st	X+, r12
 a6a:	dc 92       	st	X, r13
 a6c:	c1 11       	cpse	r28, r1
 a6e:	ff c0       	rjmp	.+510    	; 0xc6e <strtod+0x29e>
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	80 e8       	ldi	r24, 0x80	; 128
 a76:	9f e7       	ldi	r25, 0x7F	; 127
 a78:	03 c1       	rjmp	.+518    	; 0xc80 <strtod+0x2b0>
 a7a:	43 e0       	ldi	r20, 0x03	; 3
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	68 e6       	ldi	r22, 0x68	; 104
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	c6 01       	movw	r24, r12
 a84:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strncasecmp_P>
 a88:	89 2b       	or	r24, r25
 a8a:	51 f4       	brne	.+20     	; 0xaa0 <strtod+0xd0>
 a8c:	e1 14       	cp	r14, r1
 a8e:	f1 04       	cpc	r15, r1
 a90:	09 f4       	brne	.+2      	; 0xa94 <strtod+0xc4>
 a92:	f2 c0       	rjmp	.+484    	; 0xc78 <strtod+0x2a8>
 a94:	0e 5f       	subi	r16, 0xFE	; 254
 a96:	1f 4f       	sbci	r17, 0xFF	; 255
 a98:	f7 01       	movw	r30, r14
 a9a:	11 83       	std	Z+1, r17	; 0x01
 a9c:	00 83       	st	Z, r16
 a9e:	ec c0       	rjmp	.+472    	; 0xc78 <strtod+0x2a8>
 aa0:	68 01       	movw	r12, r16
 aa2:	60 e0       	ldi	r22, 0x00	; 0
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	cb 01       	movw	r24, r22
 aa8:	00 e0       	ldi	r16, 0x00	; 0
 aaa:	10 e0       	ldi	r17, 0x00	; 0
 aac:	f6 01       	movw	r30, r12
 aae:	d0 ed       	ldi	r29, 0xD0	; 208
 ab0:	d7 0d       	add	r29, r7
 ab2:	da 30       	cpi	r29, 0x0A	; 10
 ab4:	58 f5       	brcc	.+86     	; 0xb0c <strtod+0x13c>
 ab6:	2c 2f       	mov	r18, r28
 ab8:	22 60       	ori	r18, 0x02	; 2
 aba:	62 2e       	mov	r6, r18
 abc:	2c 2f       	mov	r18, r28
 abe:	28 70       	andi	r18, 0x08	; 8
 ac0:	c2 ff       	sbrs	r28, 2
 ac2:	05 c0       	rjmp	.+10     	; 0xace <strtod+0xfe>
 ac4:	21 11       	cpse	r18, r1
 ac6:	28 c0       	rjmp	.+80     	; 0xb18 <strtod+0x148>
 ac8:	0f 5f       	subi	r16, 0xFF	; 255
 aca:	1f 4f       	sbci	r17, 0xFF	; 255
 acc:	25 c0       	rjmp	.+74     	; 0xb18 <strtod+0x148>
 ace:	22 23       	and	r18, r18
 ad0:	11 f0       	breq	.+4      	; 0xad6 <strtod+0x106>
 ad2:	01 50       	subi	r16, 0x01	; 1
 ad4:	11 09       	sbc	r17, r1
 ad6:	a5 e0       	ldi	r26, 0x05	; 5
 ad8:	b0 e0       	ldi	r27, 0x00	; 0
 ada:	9b 01       	movw	r18, r22
 adc:	ac 01       	movw	r20, r24
 ade:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__muluhisi3>
 ae2:	4b 01       	movw	r8, r22
 ae4:	5c 01       	movw	r10, r24
 ae6:	88 0c       	add	r8, r8
 ae8:	99 1c       	adc	r9, r9
 aea:	aa 1c       	adc	r10, r10
 aec:	bb 1c       	adc	r11, r11
 aee:	c5 01       	movw	r24, r10
 af0:	b4 01       	movw	r22, r8
 af2:	6d 0f       	add	r22, r29
 af4:	71 1d       	adc	r23, r1
 af6:	81 1d       	adc	r24, r1
 af8:	91 1d       	adc	r25, r1
 afa:	68 39       	cpi	r22, 0x98	; 152
 afc:	a9 e9       	ldi	r26, 0x99	; 153
 afe:	7a 07       	cpc	r23, r26
 b00:	8a 07       	cpc	r24, r26
 b02:	a9 e1       	ldi	r26, 0x19	; 25
 b04:	9a 07       	cpc	r25, r26
 b06:	40 f0       	brcs	.+16     	; 0xb18 <strtod+0x148>
 b08:	c6 60       	ori	r28, 0x06	; 6
 b0a:	05 c0       	rjmp	.+10     	; 0xb16 <strtod+0x146>
 b0c:	de 3f       	cpi	r29, 0xFE	; 254
 b0e:	51 f4       	brne	.+20     	; 0xb24 <strtod+0x154>
 b10:	c3 fd       	sbrc	r28, 3
 b12:	44 c0       	rjmp	.+136    	; 0xb9c <strtod+0x1cc>
 b14:	c8 60       	ori	r28, 0x08	; 8
 b16:	6c 2e       	mov	r6, r28
 b18:	bf ef       	ldi	r27, 0xFF	; 255
 b1a:	cb 1a       	sub	r12, r27
 b1c:	db 0a       	sbc	r13, r27
 b1e:	70 80       	ld	r7, Z
 b20:	c6 2d       	mov	r28, r6
 b22:	c4 cf       	rjmp	.-120    	; 0xaac <strtod+0xdc>
 b24:	2d 2f       	mov	r18, r29
 b26:	2f 7d       	andi	r18, 0xDF	; 223
 b28:	25 31       	cpi	r18, 0x15	; 21
 b2a:	c1 f5       	brne	.+112    	; 0xb9c <strtod+0x1cc>
 b2c:	40 81       	ld	r20, Z
 b2e:	4d 32       	cpi	r20, 0x2D	; 45
 b30:	11 f4       	brne	.+4      	; 0xb36 <strtod+0x166>
 b32:	c0 61       	ori	r28, 0x10	; 16
 b34:	06 c0       	rjmp	.+12     	; 0xb42 <strtod+0x172>
 b36:	4b 32       	cpi	r20, 0x2B	; 43
 b38:	21 f0       	breq	.+8      	; 0xb42 <strtod+0x172>
 b3a:	31 96       	adiw	r30, 0x01	; 1
 b3c:	21 e0       	ldi	r18, 0x01	; 1
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	06 c0       	rjmp	.+12     	; 0xb4e <strtod+0x17e>
 b42:	32 96       	adiw	r30, 0x02	; 2
 b44:	d6 01       	movw	r26, r12
 b46:	11 96       	adiw	r26, 0x01	; 1
 b48:	4c 91       	ld	r20, X
 b4a:	22 e0       	ldi	r18, 0x02	; 2
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	a0 ed       	ldi	r26, 0xD0	; 208
 b50:	a4 0f       	add	r26, r20
 b52:	aa 30       	cpi	r26, 0x0A	; 10
 b54:	18 f0       	brcs	.+6      	; 0xb5c <strtod+0x18c>
 b56:	e2 1b       	sub	r30, r18
 b58:	f3 0b       	sbc	r31, r19
 b5a:	20 c0       	rjmp	.+64     	; 0xb9c <strtod+0x1cc>
 b5c:	40 e0       	ldi	r20, 0x00	; 0
 b5e:	50 e0       	ldi	r21, 0x00	; 0
 b60:	40 38       	cpi	r20, 0x80	; 128
 b62:	bc e0       	ldi	r27, 0x0C	; 12
 b64:	5b 07       	cpc	r21, r27
 b66:	5c f4       	brge	.+22     	; 0xb7e <strtod+0x1ae>
 b68:	9a 01       	movw	r18, r20
 b6a:	22 0f       	add	r18, r18
 b6c:	33 1f       	adc	r19, r19
 b6e:	22 0f       	add	r18, r18
 b70:	33 1f       	adc	r19, r19
 b72:	42 0f       	add	r20, r18
 b74:	53 1f       	adc	r21, r19
 b76:	44 0f       	add	r20, r20
 b78:	55 1f       	adc	r21, r21
 b7a:	4a 0f       	add	r20, r26
 b7c:	51 1d       	adc	r21, r1
 b7e:	31 96       	adiw	r30, 0x01	; 1
 b80:	df 01       	movw	r26, r30
 b82:	11 97       	sbiw	r26, 0x01	; 1
 b84:	2c 91       	ld	r18, X
 b86:	a0 ed       	ldi	r26, 0xD0	; 208
 b88:	a2 0f       	add	r26, r18
 b8a:	aa 30       	cpi	r26, 0x0A	; 10
 b8c:	48 f3       	brcs	.-46     	; 0xb60 <strtod+0x190>
 b8e:	c4 ff       	sbrs	r28, 4
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <strtod+0x1c8>
 b92:	51 95       	neg	r21
 b94:	41 95       	neg	r20
 b96:	51 09       	sbc	r21, r1
 b98:	04 0f       	add	r16, r20
 b9a:	15 1f       	adc	r17, r21
 b9c:	c1 ff       	sbrs	r28, 1
 b9e:	07 c0       	rjmp	.+14     	; 0xbae <strtod+0x1de>
 ba0:	e1 14       	cp	r14, r1
 ba2:	f1 04       	cpc	r15, r1
 ba4:	21 f0       	breq	.+8      	; 0xbae <strtod+0x1de>
 ba6:	31 97       	sbiw	r30, 0x01	; 1
 ba8:	d7 01       	movw	r26, r14
 baa:	ed 93       	st	X+, r30
 bac:	fc 93       	st	X, r31
 bae:	0e 94 0a 04 	call	0x814	; 0x814 <__floatunsisf>
 bb2:	c3 70       	andi	r28, 0x03	; 3
 bb4:	c3 30       	cpi	r28, 0x03	; 3
 bb6:	19 f0       	breq	.+6      	; 0xbbe <strtod+0x1ee>
 bb8:	6b 01       	movw	r12, r22
 bba:	7c 01       	movw	r14, r24
 bbc:	06 c0       	rjmp	.+12     	; 0xbca <strtod+0x1fa>
 bbe:	6b 01       	movw	r12, r22
 bc0:	7c 01       	movw	r14, r24
 bc2:	f7 fa       	bst	r15, 7
 bc4:	f0 94       	com	r15
 bc6:	f7 f8       	bld	r15, 7
 bc8:	f0 94       	com	r15
 bca:	20 e0       	ldi	r18, 0x00	; 0
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	a9 01       	movw	r20, r18
 bd0:	c7 01       	movw	r24, r14
 bd2:	b6 01       	movw	r22, r12
 bd4:	0e 94 cf 03 	call	0x79e	; 0x79e <__cmpsf2>
 bd8:	88 23       	and	r24, r24
 bda:	09 f4       	brne	.+2      	; 0xbde <strtod+0x20e>
 bdc:	45 c0       	rjmp	.+138    	; 0xc68 <strtod+0x298>
 bde:	17 ff       	sbrs	r17, 7
 be0:	06 c0       	rjmp	.+12     	; 0xbee <strtod+0x21e>
 be2:	11 95       	neg	r17
 be4:	01 95       	neg	r16
 be6:	11 09       	sbc	r17, r1
 be8:	c7 e8       	ldi	r28, 0x87	; 135
 bea:	d0 e0       	ldi	r29, 0x00	; 0
 bec:	02 c0       	rjmp	.+4      	; 0xbf2 <strtod+0x222>
 bee:	cf e9       	ldi	r28, 0x9F	; 159
 bf0:	d0 e0       	ldi	r29, 0x00	; 0
 bf2:	5e 01       	movw	r10, r28
 bf4:	b8 e1       	ldi	r27, 0x18	; 24
 bf6:	ab 1a       	sub	r10, r27
 bf8:	b1 08       	sbc	r11, r1
 bfa:	46 01       	movw	r8, r12
 bfc:	be 2d       	mov	r27, r14
 bfe:	af 2d       	mov	r26, r15
 c00:	90 e2       	ldi	r25, 0x20	; 32
 c02:	e9 2e       	mov	r14, r25
 c04:	f1 2c       	mov	r15, r1
 c06:	0e 15       	cp	r16, r14
 c08:	1f 05       	cpc	r17, r15
 c0a:	84 f0       	brlt	.+32     	; 0xc2c <strtod+0x25c>
 c0c:	fe 01       	movw	r30, r28
 c0e:	25 91       	lpm	r18, Z+
 c10:	35 91       	lpm	r19, Z+
 c12:	45 91       	lpm	r20, Z+
 c14:	54 91       	lpm	r21, Z
 c16:	b4 01       	movw	r22, r8
 c18:	8b 2f       	mov	r24, r27
 c1a:	9a 2f       	mov	r25, r26
 c1c:	0e 94 76 06 	call	0xcec	; 0xcec <__mulsf3>
 c20:	4b 01       	movw	r8, r22
 c22:	b8 2f       	mov	r27, r24
 c24:	a9 2f       	mov	r26, r25
 c26:	0e 19       	sub	r16, r14
 c28:	1f 09       	sbc	r17, r15
 c2a:	ed cf       	rjmp	.-38     	; 0xc06 <strtod+0x236>
 c2c:	24 97       	sbiw	r28, 0x04	; 4
 c2e:	f5 94       	asr	r15
 c30:	e7 94       	ror	r14
 c32:	ca 15       	cp	r28, r10
 c34:	db 05       	cpc	r29, r11
 c36:	39 f7       	brne	.-50     	; 0xc06 <strtod+0x236>
 c38:	64 01       	movw	r12, r8
 c3a:	eb 2e       	mov	r14, r27
 c3c:	fa 2e       	mov	r15, r26
 c3e:	8e 2d       	mov	r24, r14
 c40:	88 0f       	add	r24, r24
 c42:	8f 2d       	mov	r24, r15
 c44:	88 1f       	adc	r24, r24
 c46:	8f 3f       	cpi	r24, 0xFF	; 255
 c48:	49 f0       	breq	.+18     	; 0xc5c <strtod+0x28c>
 c4a:	20 e0       	ldi	r18, 0x00	; 0
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	a9 01       	movw	r20, r18
 c50:	c7 01       	movw	r24, r14
 c52:	b6 01       	movw	r22, r12
 c54:	0e 94 cf 03 	call	0x79e	; 0x79e <__cmpsf2>
 c58:	81 11       	cpse	r24, r1
 c5a:	06 c0       	rjmp	.+12     	; 0xc68 <strtod+0x298>
 c5c:	82 e2       	ldi	r24, 0x22	; 34
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	90 93 c4 01 	sts	0x01C4, r25
 c64:	80 93 c3 01 	sts	0x01C3, r24
 c68:	c7 01       	movw	r24, r14
 c6a:	b6 01       	movw	r22, r12
 c6c:	09 c0       	rjmp	.+18     	; 0xc80 <strtod+0x2b0>
 c6e:	60 e0       	ldi	r22, 0x00	; 0
 c70:	70 e0       	ldi	r23, 0x00	; 0
 c72:	80 e8       	ldi	r24, 0x80	; 128
 c74:	9f ef       	ldi	r25, 0xFF	; 255
 c76:	04 c0       	rjmp	.+8      	; 0xc80 <strtod+0x2b0>
 c78:	60 e0       	ldi	r22, 0x00	; 0
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	80 ec       	ldi	r24, 0xC0	; 192
 c7e:	9f e7       	ldi	r25, 0x7F	; 127
 c80:	cd b7       	in	r28, 0x3d	; 61
 c82:	de b7       	in	r29, 0x3e	; 62
 c84:	ee e0       	ldi	r30, 0x0E	; 14
 c86:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__epilogue_restores__+0x8>

00000c8a <isspace>:
 c8a:	91 11       	cpse	r25, r1
 c8c:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__ctype_isfalse>
 c90:	80 32       	cpi	r24, 0x20	; 32
 c92:	19 f0       	breq	.+6      	; 0xc9a <isspace+0x10>
 c94:	89 50       	subi	r24, 0x09	; 9
 c96:	85 50       	subi	r24, 0x05	; 5
 c98:	c8 f7       	brcc	.-14     	; 0xc8c <isspace+0x2>
 c9a:	08 95       	ret

00000c9c <strncasecmp_P>:
 c9c:	fb 01       	movw	r30, r22
 c9e:	dc 01       	movw	r26, r24
 ca0:	41 50       	subi	r20, 0x01	; 1
 ca2:	50 40       	sbci	r21, 0x00	; 0
 ca4:	88 f0       	brcs	.+34     	; 0xcc8 <strncasecmp_P+0x2c>
 ca6:	8d 91       	ld	r24, X+
 ca8:	81 34       	cpi	r24, 0x41	; 65
 caa:	1c f0       	brlt	.+6      	; 0xcb2 <strncasecmp_P+0x16>
 cac:	8b 35       	cpi	r24, 0x5B	; 91
 cae:	0c f4       	brge	.+2      	; 0xcb2 <strncasecmp_P+0x16>
 cb0:	80 5e       	subi	r24, 0xE0	; 224
 cb2:	65 91       	lpm	r22, Z+
 cb4:	61 34       	cpi	r22, 0x41	; 65
 cb6:	1c f0       	brlt	.+6      	; 0xcbe <strncasecmp_P+0x22>
 cb8:	6b 35       	cpi	r22, 0x5B	; 91
 cba:	0c f4       	brge	.+2      	; 0xcbe <strncasecmp_P+0x22>
 cbc:	60 5e       	subi	r22, 0xE0	; 224
 cbe:	86 1b       	sub	r24, r22
 cc0:	61 11       	cpse	r22, r1
 cc2:	71 f3       	breq	.-36     	; 0xca0 <strncasecmp_P+0x4>
 cc4:	99 0b       	sbc	r25, r25
 cc6:	08 95       	ret
 cc8:	88 1b       	sub	r24, r24
 cca:	fc cf       	rjmp	.-8      	; 0xcc4 <strncasecmp_P+0x28>

00000ccc <strrev>:
 ccc:	dc 01       	movw	r26, r24
 cce:	fc 01       	movw	r30, r24
 cd0:	67 2f       	mov	r22, r23
 cd2:	71 91       	ld	r23, Z+
 cd4:	77 23       	and	r23, r23
 cd6:	e1 f7       	brne	.-8      	; 0xcd0 <strrev+0x4>
 cd8:	32 97       	sbiw	r30, 0x02	; 2
 cda:	04 c0       	rjmp	.+8      	; 0xce4 <strrev+0x18>
 cdc:	7c 91       	ld	r23, X
 cde:	6d 93       	st	X+, r22
 ce0:	70 83       	st	Z, r23
 ce2:	62 91       	ld	r22, -Z
 ce4:	ae 17       	cp	r26, r30
 ce6:	bf 07       	cpc	r27, r31
 ce8:	c8 f3       	brcs	.-14     	; 0xcdc <strrev+0x10>
 cea:	08 95       	ret

00000cec <__mulsf3>:
 cec:	0e 94 89 06 	call	0xd12	; 0xd12 <__mulsf3x>
 cf0:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__fp_round>
 cf4:	0e 94 ef 06 	call	0xdde	; 0xdde <__fp_pscA>
 cf8:	38 f0       	brcs	.+14     	; 0xd08 <__mulsf3+0x1c>
 cfa:	0e 94 f6 06 	call	0xdec	; 0xdec <__fp_pscB>
 cfe:	20 f0       	brcs	.+8      	; 0xd08 <__mulsf3+0x1c>
 d00:	95 23       	and	r25, r21
 d02:	11 f0       	breq	.+4      	; 0xd08 <__mulsf3+0x1c>
 d04:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__fp_inf>
 d08:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_nan>
 d0c:	11 24       	eor	r1, r1
 d0e:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>

00000d12 <__mulsf3x>:
 d12:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
 d16:	70 f3       	brcs	.-36     	; 0xcf4 <__mulsf3+0x8>

00000d18 <__mulsf3_pse>:
 d18:	95 9f       	mul	r25, r21
 d1a:	c1 f3       	breq	.-16     	; 0xd0c <__mulsf3+0x20>
 d1c:	95 0f       	add	r25, r21
 d1e:	50 e0       	ldi	r21, 0x00	; 0
 d20:	55 1f       	adc	r21, r21
 d22:	62 9f       	mul	r22, r18
 d24:	f0 01       	movw	r30, r0
 d26:	72 9f       	mul	r23, r18
 d28:	bb 27       	eor	r27, r27
 d2a:	f0 0d       	add	r31, r0
 d2c:	b1 1d       	adc	r27, r1
 d2e:	63 9f       	mul	r22, r19
 d30:	aa 27       	eor	r26, r26
 d32:	f0 0d       	add	r31, r0
 d34:	b1 1d       	adc	r27, r1
 d36:	aa 1f       	adc	r26, r26
 d38:	64 9f       	mul	r22, r20
 d3a:	66 27       	eor	r22, r22
 d3c:	b0 0d       	add	r27, r0
 d3e:	a1 1d       	adc	r26, r1
 d40:	66 1f       	adc	r22, r22
 d42:	82 9f       	mul	r24, r18
 d44:	22 27       	eor	r18, r18
 d46:	b0 0d       	add	r27, r0
 d48:	a1 1d       	adc	r26, r1
 d4a:	62 1f       	adc	r22, r18
 d4c:	73 9f       	mul	r23, r19
 d4e:	b0 0d       	add	r27, r0
 d50:	a1 1d       	adc	r26, r1
 d52:	62 1f       	adc	r22, r18
 d54:	83 9f       	mul	r24, r19
 d56:	a0 0d       	add	r26, r0
 d58:	61 1d       	adc	r22, r1
 d5a:	22 1f       	adc	r18, r18
 d5c:	74 9f       	mul	r23, r20
 d5e:	33 27       	eor	r19, r19
 d60:	a0 0d       	add	r26, r0
 d62:	61 1d       	adc	r22, r1
 d64:	23 1f       	adc	r18, r19
 d66:	84 9f       	mul	r24, r20
 d68:	60 0d       	add	r22, r0
 d6a:	21 1d       	adc	r18, r1
 d6c:	82 2f       	mov	r24, r18
 d6e:	76 2f       	mov	r23, r22
 d70:	6a 2f       	mov	r22, r26
 d72:	11 24       	eor	r1, r1
 d74:	9f 57       	subi	r25, 0x7F	; 127
 d76:	50 40       	sbci	r21, 0x00	; 0
 d78:	9a f0       	brmi	.+38     	; 0xda0 <__mulsf3_pse+0x88>
 d7a:	f1 f0       	breq	.+60     	; 0xdb8 <__mulsf3_pse+0xa0>
 d7c:	88 23       	and	r24, r24
 d7e:	4a f0       	brmi	.+18     	; 0xd92 <__mulsf3_pse+0x7a>
 d80:	ee 0f       	add	r30, r30
 d82:	ff 1f       	adc	r31, r31
 d84:	bb 1f       	adc	r27, r27
 d86:	66 1f       	adc	r22, r22
 d88:	77 1f       	adc	r23, r23
 d8a:	88 1f       	adc	r24, r24
 d8c:	91 50       	subi	r25, 0x01	; 1
 d8e:	50 40       	sbci	r21, 0x00	; 0
 d90:	a9 f7       	brne	.-22     	; 0xd7c <__mulsf3_pse+0x64>
 d92:	9e 3f       	cpi	r25, 0xFE	; 254
 d94:	51 05       	cpc	r21, r1
 d96:	80 f0       	brcs	.+32     	; 0xdb8 <__mulsf3_pse+0xa0>
 d98:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__fp_inf>
 d9c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 da0:	5f 3f       	cpi	r21, 0xFF	; 255
 da2:	e4 f3       	brlt	.-8      	; 0xd9c <__mulsf3_pse+0x84>
 da4:	98 3e       	cpi	r25, 0xE8	; 232
 da6:	d4 f3       	brlt	.-12     	; 0xd9c <__mulsf3_pse+0x84>
 da8:	86 95       	lsr	r24
 daa:	77 95       	ror	r23
 dac:	67 95       	ror	r22
 dae:	b7 95       	ror	r27
 db0:	f7 95       	ror	r31
 db2:	e7 95       	ror	r30
 db4:	9f 5f       	subi	r25, 0xFF	; 255
 db6:	c1 f7       	brne	.-16     	; 0xda8 <__mulsf3_pse+0x90>
 db8:	fe 2b       	or	r31, r30
 dba:	88 0f       	add	r24, r24
 dbc:	91 1d       	adc	r25, r1
 dbe:	96 95       	lsr	r25
 dc0:	87 95       	ror	r24
 dc2:	97 f9       	bld	r25, 7
 dc4:	08 95       	ret

00000dc6 <__ctype_isfalse>:
 dc6:	99 27       	eor	r25, r25
 dc8:	88 27       	eor	r24, r24

00000dca <__ctype_istrue>:
 dca:	08 95       	ret

00000dcc <__fp_inf>:
 dcc:	97 f9       	bld	r25, 7
 dce:	9f 67       	ori	r25, 0x7F	; 127
 dd0:	80 e8       	ldi	r24, 0x80	; 128
 dd2:	70 e0       	ldi	r23, 0x00	; 0
 dd4:	60 e0       	ldi	r22, 0x00	; 0
 dd6:	08 95       	ret

00000dd8 <__fp_nan>:
 dd8:	9f ef       	ldi	r25, 0xFF	; 255
 dda:	80 ec       	ldi	r24, 0xC0	; 192
 ddc:	08 95       	ret

00000dde <__fp_pscA>:
 dde:	00 24       	eor	r0, r0
 de0:	0a 94       	dec	r0
 de2:	16 16       	cp	r1, r22
 de4:	17 06       	cpc	r1, r23
 de6:	18 06       	cpc	r1, r24
 de8:	09 06       	cpc	r0, r25
 dea:	08 95       	ret

00000dec <__fp_pscB>:
 dec:	00 24       	eor	r0, r0
 dee:	0a 94       	dec	r0
 df0:	12 16       	cp	r1, r18
 df2:	13 06       	cpc	r1, r19
 df4:	14 06       	cpc	r1, r20
 df6:	05 06       	cpc	r0, r21
 df8:	08 95       	ret

00000dfa <__fp_round>:
 dfa:	09 2e       	mov	r0, r25
 dfc:	03 94       	inc	r0
 dfe:	00 0c       	add	r0, r0
 e00:	11 f4       	brne	.+4      	; 0xe06 <__fp_round+0xc>
 e02:	88 23       	and	r24, r24
 e04:	52 f0       	brmi	.+20     	; 0xe1a <__fp_round+0x20>
 e06:	bb 0f       	add	r27, r27
 e08:	40 f4       	brcc	.+16     	; 0xe1a <__fp_round+0x20>
 e0a:	bf 2b       	or	r27, r31
 e0c:	11 f4       	brne	.+4      	; 0xe12 <__fp_round+0x18>
 e0e:	60 ff       	sbrs	r22, 0
 e10:	04 c0       	rjmp	.+8      	; 0xe1a <__fp_round+0x20>
 e12:	6f 5f       	subi	r22, 0xFF	; 255
 e14:	7f 4f       	sbci	r23, 0xFF	; 255
 e16:	8f 4f       	sbci	r24, 0xFF	; 255
 e18:	9f 4f       	sbci	r25, 0xFF	; 255
 e1a:	08 95       	ret

00000e1c <__muluhisi3>:
 e1c:	0e 94 50 07 	call	0xea0	; 0xea0 <__umulhisi3>
 e20:	a5 9f       	mul	r26, r21
 e22:	90 0d       	add	r25, r0
 e24:	b4 9f       	mul	r27, r20
 e26:	90 0d       	add	r25, r0
 e28:	a4 9f       	mul	r26, r20
 e2a:	80 0d       	add	r24, r0
 e2c:	91 1d       	adc	r25, r1
 e2e:	11 24       	eor	r1, r1
 e30:	08 95       	ret

00000e32 <__prologue_saves__>:
 e32:	2f 92       	push	r2
 e34:	3f 92       	push	r3
 e36:	4f 92       	push	r4
 e38:	5f 92       	push	r5
 e3a:	6f 92       	push	r6
 e3c:	7f 92       	push	r7
 e3e:	8f 92       	push	r8
 e40:	9f 92       	push	r9
 e42:	af 92       	push	r10
 e44:	bf 92       	push	r11
 e46:	cf 92       	push	r12
 e48:	df 92       	push	r13
 e4a:	ef 92       	push	r14
 e4c:	ff 92       	push	r15
 e4e:	0f 93       	push	r16
 e50:	1f 93       	push	r17
 e52:	cf 93       	push	r28
 e54:	df 93       	push	r29
 e56:	cd b7       	in	r28, 0x3d	; 61
 e58:	de b7       	in	r29, 0x3e	; 62
 e5a:	ca 1b       	sub	r28, r26
 e5c:	db 0b       	sbc	r29, r27
 e5e:	0f b6       	in	r0, 0x3f	; 63
 e60:	f8 94       	cli
 e62:	de bf       	out	0x3e, r29	; 62
 e64:	0f be       	out	0x3f, r0	; 63
 e66:	cd bf       	out	0x3d, r28	; 61
 e68:	09 94       	ijmp

00000e6a <__epilogue_restores__>:
 e6a:	2a 88       	ldd	r2, Y+18	; 0x12
 e6c:	39 88       	ldd	r3, Y+17	; 0x11
 e6e:	48 88       	ldd	r4, Y+16	; 0x10
 e70:	5f 84       	ldd	r5, Y+15	; 0x0f
 e72:	6e 84       	ldd	r6, Y+14	; 0x0e
 e74:	7d 84       	ldd	r7, Y+13	; 0x0d
 e76:	8c 84       	ldd	r8, Y+12	; 0x0c
 e78:	9b 84       	ldd	r9, Y+11	; 0x0b
 e7a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e7c:	b9 84       	ldd	r11, Y+9	; 0x09
 e7e:	c8 84       	ldd	r12, Y+8	; 0x08
 e80:	df 80       	ldd	r13, Y+7	; 0x07
 e82:	ee 80       	ldd	r14, Y+6	; 0x06
 e84:	fd 80       	ldd	r15, Y+5	; 0x05
 e86:	0c 81       	ldd	r16, Y+4	; 0x04
 e88:	1b 81       	ldd	r17, Y+3	; 0x03
 e8a:	aa 81       	ldd	r26, Y+2	; 0x02
 e8c:	b9 81       	ldd	r27, Y+1	; 0x01
 e8e:	ce 0f       	add	r28, r30
 e90:	d1 1d       	adc	r29, r1
 e92:	0f b6       	in	r0, 0x3f	; 63
 e94:	f8 94       	cli
 e96:	de bf       	out	0x3e, r29	; 62
 e98:	0f be       	out	0x3f, r0	; 63
 e9a:	cd bf       	out	0x3d, r28	; 61
 e9c:	ed 01       	movw	r28, r26
 e9e:	08 95       	ret

00000ea0 <__umulhisi3>:
 ea0:	a2 9f       	mul	r26, r18
 ea2:	b0 01       	movw	r22, r0
 ea4:	b3 9f       	mul	r27, r19
 ea6:	c0 01       	movw	r24, r0
 ea8:	a3 9f       	mul	r26, r19
 eaa:	70 0d       	add	r23, r0
 eac:	81 1d       	adc	r24, r1
 eae:	11 24       	eor	r1, r1
 eb0:	91 1d       	adc	r25, r1
 eb2:	b2 9f       	mul	r27, r18
 eb4:	70 0d       	add	r23, r0
 eb6:	81 1d       	adc	r24, r1
 eb8:	11 24       	eor	r1, r1
 eba:	91 1d       	adc	r25, r1
 ebc:	08 95       	ret

00000ebe <_exit>:
 ebe:	f8 94       	cli

00000ec0 <__stop_program>:
 ec0:	ff cf       	rjmp	.-2      	; 0xec0 <__stop_program>
