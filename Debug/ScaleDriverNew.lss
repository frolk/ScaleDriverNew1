
ScaleDriverNew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000df2  00000e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c0  00800102  00800102  00000e88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d44  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062e  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000582  00000000  00000000  000023a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000413  00000000  00000000  00002f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_1>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_14>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_18>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_20>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4e 41       	sbci	r20, 0x1E	; 30
  6a:	4e 49       	sbci	r20, 0x9E	; 158

0000006b <pstr_inity>:
  6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
  70:	49 4e 46                                            INF

00000073 <pwr_m10>:
  73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
  83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
  8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
  9b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e2 ef       	ldi	r30, 0xF2	; 242
  b8:	fd e0       	ldi	r31, 0x0D	; 13
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a2 30       	cpi	r26, 0x02	; 2
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a2 e0       	ldi	r26, 0x02	; 2
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a2 3c       	cpi	r26, 0xC2	; 194
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  da:	0c 94 f7 06 	jmp	0xdee	; 0xdee <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <BL_GetMessage>:

uint8_t PWMChanged = 0;


void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ce e2       	ldi	r28, 0x2E	; 46
  ec:	d1 e0       	ldi	r29, 0x01	; 1
  ee:	06 e3       	ldi	r16, 0x36	; 54
  f0:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i=0; i<8; i++)
	{
		BluetoothMessage[i] = BL_GetChar();
  f2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BL_GetChar>
  f6:	89 93       	st	Y+, r24


void BL_GetMessage() // getting value from ring buffer to BlutoothMessage array
{
	
	for (int i=0; i<8; i++)
  f8:	c0 17       	cp	r28, r16
  fa:	d1 07       	cpc	r29, r17
  fc:	d1 f7       	brne	.-12     	; 0xf2 <BL_GetMessage+0x10>
	{
		BluetoothMessage[i] = BL_GetChar();
	}
	BL_FlushRxBuf();  // flush our buffer and start from the beginning
  fe:	0e 94 54 01 	call	0x2a8	; 0x2a8 <BL_FlushRxBuf>

}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <BL_DefComd>:


void BL_DefComd()
{
	
	BL_GetMessage(); //pulling up buffer's data one by one
 10c:	0e 94 71 00 	call	0xe2	; 0xe2 <BL_GetMessage>
	if ((BluetoothMessage[0] == '-')|(BluetoothMessage[0] == '+'))
 110:	80 91 2e 01 	lds	r24, 0x012E
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	8b 32       	cpi	r24, 0x2B	; 43
 118:	09 f0       	breq	.+2      	; 0x11c <BL_DefComd+0x10>
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	91 11       	cpse	r25, r1
 11e:	06 c0       	rjmp	.+12     	; 0x12c <BL_DefComd+0x20>
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	8d 32       	cpi	r24, 0x2D	; 45
 124:	09 f0       	breq	.+2      	; 0x128 <BL_DefComd+0x1c>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	99 23       	and	r25, r25
 12a:	d1 f0       	breq	.+52     	; 0x160 <BL_DefComd+0x54>
	{
		
		PWMvalue = atoi(BluetoothMessage+1); //convert our string into float integer
 12c:	8f e2       	ldi	r24, 0x2F	; 47
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 35 04 	call	0x86a	; 0x86a <atoi>
 134:	90 93 04 01 	sts	0x0104, r25
 138:	80 93 03 01 	sts	0x0103, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 13c:	4a e0       	ldi	r20, 0x0A	; 10
 13e:	64 e2       	ldi	r22, 0x24	; 36
 140:	71 e0       	ldi	r23, 0x01	; 1
 142:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__itoa_ncheck>
		//BL_FlushRxBuf();
		PWMvalueStr[10] = itoa(PWMvalue, PWMvalueStr, 10);
 146:	80 93 2e 01 	sts	0x012E, r24
		
		PWMChanged = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 02 01 	sts	0x0102, r24
		
		BL_SendStr("P");
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
		BL_SendStr(PWMvalueStr);
 158:	84 e2       	ldi	r24, 0x24	; 36
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
 160:	08 95       	ret

00000162 <__vector_18>:
uint8_t rxBufHead = 0;
uint8_t rxCount = 0;// Receive variables
uint8_t BLmesIsComplete;

ISR (USART_RX_vect)   // receive interrupt routine
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(rxCount < SIZE_BUF)
 172:	80 91 05 01 	lds	r24, 0x0105
 176:	80 32       	cpi	r24, 0x20	; 32
 178:	28 f5       	brcc	.+74     	; 0x1c4 <__vector_18+0x62>
	{
		BLrxBuf[rxBufTail] = UDR0;
 17a:	80 91 c6 00 	lds	r24, 0x00C6
 17e:	e0 91 07 01 	lds	r30, 0x0107
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e8 5c       	subi	r30, 0xC8	; 200
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 83       	st	Z, r24
		
		
				
		if(BLrxBuf[rxBufTail] == 0x26)// if '&'
 18a:	86 32       	cpi	r24, 0x26	; 38
 18c:	29 f4       	brne	.+10     	; 0x198 <__vector_18+0x36>
		//if(rxBufTail>1)
		{	
			PORTB |= (1<< PORTB5);
 18e:	2d 9a       	sbi	0x05, 5	; 5
			BLmesIsComplete = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 78 01 	sts	0x0178, r24
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <__vector_18+0x44>
		}
		
		else if (BLrxBuf[rxBufTail] == 'd')
 198:	84 36       	cpi	r24, 0x64	; 100
 19a:	21 f4       	brne	.+8      	; 0x1a4 <__vector_18+0x42>
		{
			DebugAsk = 1;	
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 08 01 	sts	0x0108, r24
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <__vector_18+0x44>
		}
				
		else
		{
			PORTB &= ~(1 << PORTB5);
 1a4:	2d 98       	cbi	0x05, 5	; 5
		}
		
		rxBufTail++;
 1a6:	80 91 07 01 	lds	r24, 0x0107
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 1ac:	80 32       	cpi	r24, 0x20	; 32
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <__vector_18+0x54>
		else
		{
			PORTB &= ~(1 << PORTB5);
		}
		
		rxBufTail++;
 1b0:	80 93 07 01 	sts	0x0107, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__vector_18+0x58>
		if(rxBufTail == SIZE_BUF) rxBufTail = 0;
 1b6:	10 92 07 01 	sts	0x0107, r1
		rxCount++;
 1ba:	80 91 05 01 	lds	r24, 0x0105
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 05 01 	sts	0x0105, r24
		
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_20>:

ISR (USART_TX_vect)   // transmit interrupt routine
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if(txCount > 0)
 1e4:	80 91 09 01 	lds	r24, 0x0109
 1e8:	88 23       	and	r24, r24
 1ea:	b9 f0       	breq	.+46     	; 0x21a <__vector_20+0x46>
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
 1ec:	e0 91 0a 01 	lds	r30, 0x010A
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	e8 5a       	subi	r30, 0xA8	; 168
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	80 81       	ld	r24, Z
 1f8:	80 93 c6 00 	sts	0x00C6, r24
		txCount--;
 1fc:	80 91 09 01 	lds	r24, 0x0109
 200:	81 50       	subi	r24, 0x01	; 1
 202:	80 93 09 01 	sts	0x0109, r24
		txBufHead++;
 206:	80 91 0a 01 	lds	r24, 0x010A
 20a:	8f 5f       	subi	r24, 0xFF	; 255
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 20c:	80 32       	cpi	r24, 0x20	; 32
 20e:	19 f0       	breq	.+6      	; 0x216 <__vector_20+0x42>
{
	if(txCount > 0)
	{
		UDR0 = BLtxBuf[txBufHead]; // take one byte from buffer and put it into transmit register
		txCount--;
		txBufHead++;
 210:	80 93 0a 01 	sts	0x010A, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <__vector_20+0x46>
		if(txBufHead == SIZE_BUF) txBufHead = 0; 
 216:	10 92 0a 01 	sts	0x010A, r1
		
	}
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <BL_Init>:

void BL_Init(uint16_t ubrr) // initialize UART
{
	
	//set baud rate = 9600bps
	UBRR0H = (uint8_t)(ubrr>>8);
 22a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)ubrr;
 22e:	80 93 c4 00 	sts	0x00C4, r24
	
	//set 1 stop bit, no parity bit and 8 bit character size
	UCSR0C = 0x06;  // (1<<UCSZ01)|(1<<UCSZ00)
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 c2 00 	sts	0x00C2, r24
	
	//enable transmission and reception 0x78
	UCSR0B |= (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 238:	e1 ec       	ldi	r30, 0xC1	; 193
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	88 6d       	ori	r24, 0xD8	; 216
 240:	80 83       	st	Z, r24
	sei();
 242:	78 94       	sei
 244:	08 95       	ret

00000246 <BL_PutChar>:
}

void BL_PutChar(uint8_t sym)// write next symbol into ring buffer
{
	if (((UCSR0A & (1<<UDRE0)) != 0) && (txCount == 0)) UDR0 = sym; // if udr is empty and it's first byte from
 246:	90 91 c0 00 	lds	r25, 0x00C0
 24a:	95 ff       	sbrs	r25, 5
 24c:	07 c0       	rjmp	.+14     	; 0x25c <BL_PutChar+0x16>
 24e:	90 91 09 01 	lds	r25, 0x0109
 252:	91 11       	cpse	r25, r1
 254:	03 c0       	rjmp	.+6      	; 0x25c <BL_PutChar+0x16>
 256:	80 93 c6 00 	sts	0x00C6, r24
 25a:	08 95       	ret
																	// ring buffer we write it directly into udr
    else
	{
		
		if (txCount < SIZE_BUF)
 25c:	90 91 09 01 	lds	r25, 0x0109
 260:	90 32       	cpi	r25, 0x20	; 32
 262:	90 f4       	brcc	.+36     	; 0x288 <BL_PutChar+0x42>
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
 264:	20 91 0b 01 	lds	r18, 0x010B
 268:	e2 2f       	mov	r30, r18
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e8 5a       	subi	r30, 0xA8	; 168
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	80 83       	st	Z, r24
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
 272:	9f 5f       	subi	r25, 0xFF	; 255
 274:	90 93 09 01 	sts	0x0109, r25
			txBufTail++; // increase our pointer
 278:	2f 5f       	subi	r18, 0xFF	; 255
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 27a:	20 32       	cpi	r18, 0x20	; 32
 27c:	19 f0       	breq	.+6      	; 0x284 <BL_PutChar+0x3e>
		if (txCount < SIZE_BUF)
		{
			
			BLtxBuf[txBufTail] = sym; // second and the next bytes we write into ring buffer with txBufTaail pointer
			txCount++;  // increase variable that tells us how much unread data locate in ring buffer
			txBufTail++; // increase our pointer
 27e:	20 93 0b 01 	sts	0x010B, r18
 282:	08 95       	ret
			if (txBufTail == SIZE_BUF) txBufTail = 0; // if pointer reached end of buffer - reset it
 284:	10 92 0b 01 	sts	0x010B, r1
 288:	08 95       	ret

0000028a <BL_SendStr>:
		}
	}
}

void BL_SendStr(uint8_t *data)// send string start from the first member with address pointed by *data
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	uint8_t sym;
	while(*data) // while data isn't '\0' or while data consist any data
 290:	88 81       	ld	r24, Y
 292:	88 23       	and	r24, r24
 294:	31 f0       	breq	.+12     	; 0x2a2 <BL_SendStr+0x18>
 296:	21 96       	adiw	r28, 0x01	; 1
	{
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
 298:	0e 94 23 01 	call	0x246	; 0x246 <BL_PutChar>
}

void BL_SendStr(uint8_t *data)// send string start from the first member with address pointed by *data
{
	uint8_t sym;
	while(*data) // while data isn't '\0' or while data consist any data
 29c:	89 91       	ld	r24, Y+
 29e:	81 11       	cpse	r24, r1
 2a0:	fb cf       	rjmp	.-10     	; 0x298 <BL_SendStr+0xe>
	{
		sym = *data++; // write consisting value of data into sym local variable
		BL_PutChar(sym); // call function of putting every value into the ring buffer 
	}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <BL_FlushRxBuf>:

void BL_FlushRxBuf(void)  // flush our ring buffer after getting all of the array's member in out CurrentValue variable
{
	rxBufTail = 0;
 2a8:	10 92 07 01 	sts	0x0107, r1
	rxBufHead = 0;
 2ac:	10 92 06 01 	sts	0x0106, r1
	rxCount = 0;
 2b0:	10 92 05 01 	sts	0x0105, r1
 2b4:	08 95       	ret

000002b6 <BL_GetChar>:
}

uint8_t BL_GetChar(void) // take one symbol from buffer using the Head pointer
{
	uint8_t sym;
	if(rxCount > 0)
 2b6:	80 91 05 01 	lds	r24, 0x0105
 2ba:	88 23       	and	r24, r24
 2bc:	a1 f0       	breq	.+40     	; 0x2e6 <BL_GetChar+0x30>
	{
		sym	= BLrxBuf[rxBufHead];
 2be:	90 91 06 01 	lds	r25, 0x0106
 2c2:	e9 2f       	mov	r30, r25
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e8 5c       	subi	r30, 0xC8	; 200
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	20 81       	ld	r18, Z
		rxCount --;
 2cc:	81 50       	subi	r24, 0x01	; 1
 2ce:	80 93 05 01 	sts	0x0105, r24
		rxBufHead++;
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 2d4:	90 32       	cpi	r25, 0x20	; 32
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <BL_GetChar+0x2a>
	uint8_t sym;
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
 2d8:	90 93 06 01 	sts	0x0106, r25
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
		return sym;
 2dc:	82 2f       	mov	r24, r18
 2de:	08 95       	ret
	if(rxCount > 0)
	{
		sym	= BLrxBuf[rxBufHead];
		rxCount --;
		rxBufHead++;
		if(rxBufHead == SIZE_BUF) rxBufHead = 0;
 2e0:	10 92 06 01 	sts	0x0106, r1
		return sym;
 2e4:	82 2f       	mov	r24, r18
	}
	return 0;
}
 2e6:	08 95       	ret

000002e8 <main>:
uint8_t DebugAskAnswer[16];


int main(void)
{
	SW_RX_Init(); 
 2e8:	0e 94 c0 02 	call	0x580	; 0x580 <SW_RX_Init>
	BL_Init(MYUBRR);
 2ec:	87 e6       	ldi	r24, 0x67	; 103
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 15 01 	call	0x22a	; 0x22a <BL_Init>
	PWM_Init();
 2f4:	0e 94 4c 02 	call	0x498	; 0x498 <PWM_Init>
		
		if(DebugAsk)
			{
				StrScaleValueDetect[5] = itoa(ScaleValueDetect,StrScaleValueDetect,10);
				StrPWMValue[5] = itoa(PWMvalue, StrPWMValue, 10);
				StrOCR[5] = itoa(OCR2A, StrOCR, 10);
 2f8:	c3 eb       	ldi	r28, 0xB3	; 179
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
	BL_Init(MYUBRR);
	PWM_Init();
		
    while (1) 
    {
		if(SWrxDataPending)
 2fc:	80 91 b4 01 	lds	r24, 0x01B4
 300:	81 11       	cpse	r24, r1
			{
				SW_RX_Fill_Buffer();
 302:	0e 94 da 02 	call	0x5b4	; 0x5b4 <SW_RX_Fill_Buffer>
			}
		if(SWmesIsComplete)
 306:	80 91 b5 01 	lds	r24, 0x01B5
 30a:	88 23       	and	r24, r24
 30c:	99 f1       	breq	.+102    	; 0x374 <main+0x8c>
			{

			SW_GetMessage();
 30e:	0e 94 20 03 	call	0x640	; 0x640 <SW_GetMessage>
			ScaleValue = atof(SWscaleValueForBL+1);
 312:	87 eb       	ldi	r24, 0xB7	; 183
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 31 04 	call	0x862	; 0x862 <atof>
 31a:	6b 01       	movw	r12, r22
 31c:	7c 01       	movw	r14, r24
 31e:	60 93 99 01 	sts	0x0199, r22
 322:	70 93 9a 01 	sts	0x019A, r23
 326:	80 93 9b 01 	sts	0x019B, r24
 32a:	90 93 9c 01 	sts	0x019C, r25
			
			//OCR2A = ScaleValue;
			if ((ScaleValue > 0) && !(ScaleValue == ScaleValueChange))
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	a9 01       	movw	r20, r18
 334:	0e 94 2c 04 	call	0x858	; 0x858 <__gesf2>
 338:	18 16       	cp	r1, r24
 33a:	d4 f4       	brge	.+52     	; 0x370 <main+0x88>
 33c:	20 91 79 01 	lds	r18, 0x0179
 340:	30 91 7a 01 	lds	r19, 0x017A
 344:	40 91 7b 01 	lds	r20, 0x017B
 348:	50 91 7c 01 	lds	r21, 0x017C
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	0e 94 67 03 	call	0x6ce	; 0x6ce <__cmpsf2>
 354:	88 23       	and	r24, r24
 356:	61 f0       	breq	.+24     	; 0x370 <main+0x88>
			{
				ScaleValueChange = ScaleValue;
 358:	c0 92 79 01 	sts	0x0179, r12
 35c:	d0 92 7a 01 	sts	0x017A, r13
 360:	e0 92 7b 01 	sts	0x017B, r14
 364:	f0 92 7c 01 	sts	0x017C, r15
				BL_SendStr (SWscaleValueForBL);
 368:	86 eb       	ldi	r24, 0xB6	; 182
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
			}
			SWmesIsComplete = 0;		
 370:	10 92 b5 01 	sts	0x01B5, r1
			
			}
				
			
						
		if (BLmesIsComplete) 
 374:	80 91 78 01 	lds	r24, 0x0178
 378:	88 23       	and	r24, r24
 37a:	21 f0       	breq	.+8      	; 0x384 <main+0x9c>
			{
			//BL_SendStr (BluetoothMessage);
						
			BL_DefComd(); // defining gotten message from bluetooth (smartphone)
 37c:	0e 94 86 00 	call	0x10c	; 0x10c <BL_DefComd>
			BLmesIsComplete = 0;  // reset flag "complete message from smartphone"
 380:	10 92 78 01 	sts	0x0178, r1
			}
		
		if(DebugAsk)
 384:	80 91 08 01 	lds	r24, 0x0108
 388:	88 23       	and	r24, r24
 38a:	69 f1       	breq	.+90     	; 0x3e6 <main+0xfe>
 38c:	4a e0       	ldi	r20, 0x0A	; 10
 38e:	6d e7       	ldi	r22, 0x7D	; 125
 390:	71 e0       	ldi	r23, 0x01	; 1
 392:	80 91 97 01 	lds	r24, 0x0197
 396:	90 91 98 01 	lds	r25, 0x0198
 39a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__itoa_ncheck>
			{
				StrScaleValueDetect[5] = itoa(ScaleValueDetect,StrScaleValueDetect,10);
 39e:	80 93 82 01 	sts	0x0182, r24
 3a2:	4a e0       	ldi	r20, 0x0A	; 10
 3a4:	6d e9       	ldi	r22, 0x9D	; 157
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	80 91 03 01 	lds	r24, 0x0103
 3ac:	90 91 04 01 	lds	r25, 0x0104
 3b0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__itoa_ncheck>
				StrPWMValue[5] = itoa(PWMvalue, StrPWMValue, 10);
 3b4:	80 93 a2 01 	sts	0x01A2, r24
				StrOCR[5] = itoa(OCR2A, StrOCR, 10);
 3b8:	88 81       	ld	r24, Y
 3ba:	4a e0       	ldi	r20, 0x0A	; 10
 3bc:	62 e9       	ldi	r22, 0x92	; 146
 3be:	71 e0       	ldi	r23, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__itoa_ncheck>
 3c6:	80 93 97 01 	sts	0x0197, r24
				BL_SendStr(StrScaleValueDetect);
 3ca:	8d e7       	ldi	r24, 0x7D	; 125
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
				BL_SendStr(StrPWMValue);
 3d2:	8d e9       	ldi	r24, 0x9D	; 157
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
				BL_SendStr(StrOCR);
 3da:	82 e9       	ldi	r24, 0x92	; 146
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 45 01 	call	0x28a	; 0x28a <BL_SendStr>
				DebugAsk = 0;
 3e2:	10 92 08 01 	sts	0x0108, r1
			}
				
		if (PWMvalue && PWMChanged && (ScaleValue > 20))
 3e6:	80 91 03 01 	lds	r24, 0x0103
 3ea:	90 91 04 01 	lds	r25, 0x0104
 3ee:	89 2b       	or	r24, r25
 3f0:	31 f1       	breq	.+76     	; 0x43e <main+0x156>
 3f2:	80 91 02 01 	lds	r24, 0x0102
 3f6:	88 23       	and	r24, r24
 3f8:	11 f1       	breq	.+68     	; 0x43e <main+0x156>
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 ea       	ldi	r20, 0xA0	; 160
 400:	51 e4       	ldi	r21, 0x41	; 65
 402:	60 91 99 01 	lds	r22, 0x0199
 406:	70 91 9a 01 	lds	r23, 0x019A
 40a:	80 91 9b 01 	lds	r24, 0x019B
 40e:	90 91 9c 01 	lds	r25, 0x019C
 412:	0e 94 2c 04 	call	0x858	; 0x858 <__gesf2>
 416:	18 16       	cp	r1, r24
 418:	94 f4       	brge	.+36     	; 0x43e <main+0x156>
				{
					PWM_PinValue();   // write gotten correction value from smartphone to OCR2A for change OC2A pin PWM
 41a:	0e 94 57 02 	call	0x4ae	; 0x4ae <PWM_PinValue>
					ScaleValueDetect = ScaleValue; 
 41e:	60 91 99 01 	lds	r22, 0x0199
 422:	70 91 9a 01 	lds	r23, 0x019A
 426:	80 91 9b 01 	lds	r24, 0x019B
 42a:	90 91 9c 01 	lds	r25, 0x019C
 42e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fixsfsi>
 432:	70 93 98 01 	sts	0x0198, r23
 436:	60 93 97 01 	sts	0x0197, r22
					PWMChanged = 0;
 43a:	10 92 02 01 	sts	0x0102, r1
				}	
				
		if((ScaleValue < (ScaleValueDetect - 2)) && (ScaleValue > 5))
 43e:	c0 90 99 01 	lds	r12, 0x0199
 442:	d0 90 9a 01 	lds	r13, 0x019A
 446:	e0 90 9b 01 	lds	r14, 0x019B
 44a:	f0 90 9c 01 	lds	r15, 0x019C
 44e:	80 91 97 01 	lds	r24, 0x0197
 452:	90 91 98 01 	lds	r25, 0x0198
 456:	bc 01       	movw	r22, r24
 458:	62 50       	subi	r22, 0x02	; 2
 45a:	71 09       	sbc	r23, r1
 45c:	07 2e       	mov	r0, r23
 45e:	00 0c       	add	r0, r0
 460:	88 0b       	sbc	r24, r24
 462:	99 0b       	sbc	r25, r25
 464:	0e 94 a4 03 	call	0x748	; 0x748 <__floatsisf>
 468:	a7 01       	movw	r20, r14
 46a:	96 01       	movw	r18, r12
 46c:	0e 94 2c 04 	call	0x858	; 0x858 <__gesf2>
 470:	18 16       	cp	r1, r24
 472:	0c f0       	brlt	.+2      	; 0x476 <main+0x18e>
 474:	43 cf       	rjmp	.-378    	; 0x2fc <main+0x14>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 ea       	ldi	r20, 0xA0	; 160
 47c:	50 e4       	ldi	r21, 0x40	; 64
 47e:	c7 01       	movw	r24, r14
 480:	b6 01       	movw	r22, r12
 482:	0e 94 2c 04 	call	0x858	; 0x858 <__gesf2>
 486:	18 16       	cp	r1, r24
 488:	0c f0       	brlt	.+2      	; 0x48c <main+0x1a4>
 48a:	38 cf       	rjmp	.-400    	; 0x2fc <main+0x14>
		{
			OCR2A = 0;
 48c:	18 82       	st	Y, r1
			ScaleValueDetect = 0;
 48e:	10 92 98 01 	sts	0x0198, r1
 492:	10 92 97 01 	sts	0x0197, r1
 496:	32 cf       	rjmp	.-412    	; 0x2fc <main+0x14>

00000498 <PWM_Init>:
#include "BLdefComd.h"


void PWM_Init()
{
	DDRB = (1 << PORTB3)|(1 << PORTB5);// set up pin portb3 like output 
 498:	88 e2       	ldi	r24, 0x28	; 40
 49a:	84 b9       	out	0x04, r24	; 4
	TCCR2A = (1 << WGM21)|(1 << WGM20)|(1<< COM2A1);
 49c:	83 e8       	ldi	r24, 0x83	; 131
 49e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1<<CS20);
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 0x00;
 4a8:	10 92 b3 00 	sts	0x00B3, r1
 4ac:	08 95       	ret

000004ae <PWM_PinValue>:
}


void PWM_PinValue()
{
	OCR2A = PWMvalue;		
 4ae:	80 91 03 01 	lds	r24, 0x0103
 4b2:	80 93 b3 00 	sts	0x00B3, r24
 4b6:	08 95       	ret

000004b8 <__vector_1>:
	SWrxBufTail = 0;
	
}

ISR (INT0_vect)
{
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	8f 93       	push	r24
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	SWnumBit = 0;
 4c8:	10 92 0c 01 	sts	0x010C, r1
	DISABLE_EXTERNAL0_INTERRUPT ();		// disable interrupt during the data bits
 4cc:	e8 98       	cbi	0x1d, 0	; 29
	
	DISABLE_TIMER_INTERRUPT();			//disable timer to change its registers
 4ce:	ee e6       	ldi	r30, 0x6E	; 110
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	8d 7f       	andi	r24, 0xFD	; 253
 4d6:	80 83       	st	Z, r24
	TCCR0B &= ~( 1 << CS01 );			//reset prescaler counter
 4d8:	85 b5       	in	r24, 0x25	; 37
 4da:	8d 7f       	andi	r24, 0xFD	; 253
 4dc:	85 bd       	out	0x25, r24	; 37
	
	TCNT0 = INTERRUPT_EXEC_CYCL;		// Clear counter register. Include time to run interrupt rutine
 4de:	89 e0       	ldi	r24, 0x09	; 9
 4e0:	86 bd       	out	0x26, r24	; 38
	
	TCCR0B |= ( 1 << CS01 );			// Start prescaler clock
 4e2:	85 b5       	in	r24, 0x25	; 37
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = TICKSFIRST;			// Count one and half period into the future
 4e8:	87 e6       	ldi	r24, 0x67	; 103
 4ea:	87 bd       	out	0x27, r24	; 39
	
	SW_RX_Bit_Count = 0;				// Clear received bit counter.
 4ec:	10 92 22 01 	sts	0x0122, r1
	
	
	ENABLE_TIMER_INTERRUPT();			// Enable timer0 interrupt on again
 4f0:	80 81       	ld	r24, Z
 4f2:	82 60       	ori	r24, 0x02	; 2
 4f4:	80 83       	st	Z, r24
	CLEAR_TIMER_INTERRUPT();			// Clear interrupt bits
 4f6:	a9 9a       	sbi	0x15, 1	; 21
}
 4f8:	ff 91       	pop	r31
 4fa:	ef 91       	pop	r30
 4fc:	8f 91       	pop	r24
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 508:	1f 92       	push	r1
 50a:	0f 92       	push	r0
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	0f 92       	push	r0
 510:	11 24       	eor	r1, r1
 512:	8f 93       	push	r24
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
	if(!SWnumBit)
 518:	80 91 0c 01 	lds	r24, 0x010C
 51c:	81 11       	cpse	r24, r1
 51e:	06 c0       	rjmp	.+12     	; 0x52c <__vector_14+0x24>
	{
		SWnumBit = 1;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	80 93 0c 01 	sts	0x010C, r24
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 526:	80 ed       	ldi	r24, 0xD0	; 208
 528:	87 bd       	out	0x27, r24	; 39
 52a:	22 c0       	rjmp	.+68     	; 0x570 <__vector_14+0x68>
	}
	else
	{
		OCR0A = TICKS2WAITONE;  // Count one period after the falling edge is trigged
 52c:	80 ed       	ldi	r24, 0xD0	; 208
 52e:	87 bd       	out	0x27, r24	; 39
		// Receiving lsb first
		if( SW_RX_Bit_Count < 8 )
 530:	80 91 22 01 	lds	r24, 0x0122
 534:	88 30       	cpi	r24, 0x08	; 8
 536:	90 f4       	brcc	.+36     	; 0x55c <__vector_14+0x54>
		{
			SW_RX_Bit_Count++;
 538:	80 91 22 01 	lds	r24, 0x0122
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	80 93 22 01 	sts	0x0122, r24
			SW_RX_Data = (SW_RX_Data>>1); // Shift due to receiving lsb first
 542:	80 91 23 01 	lds	r24, 0x0123
 546:	86 95       	lsr	r24
 548:	80 93 23 01 	sts	0x0123, r24
			if ( GET_RX_PIN() != 0 )
 54c:	4a 9b       	sbis	0x09, 2	; 9
 54e:	10 c0       	rjmp	.+32     	; 0x570 <__vector_14+0x68>
			{
				SW_RX_Data |= 0x80;		  // If a logical 1 is read, let the data mirror this
 550:	80 91 23 01 	lds	r24, 0x0123
 554:	80 68       	ori	r24, 0x80	; 128
 556:	80 93 23 01 	sts	0x0123, r24
 55a:	0a c0       	rjmp	.+20     	; 0x570 <__vector_14+0x68>
			}
		}
		else
		{
			SWrxDataPending = 1;		// Enter data pending when one byte is received
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	80 93 b4 01 	sts	0x01B4, r24
			DISABLE_TIMER_INTERRUPT();	// Disable this interrupt
 562:	ee e6       	ldi	r30, 0x6E	; 110
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	8d 7f       	andi	r24, 0xFD	; 253
 56a:	80 83       	st	Z, r24
			EIFR |= (1 << INTF0);	// Reset flag not to enter the ISR one extra time
 56c:	e0 9a       	sbi	0x1c, 0	; 28
			ENABLE_EXTERNAL0_INTERRUPT(); // Enable interrupt to receive more bytes.
 56e:	e8 9a       	sbi	0x1d, 0	; 29
		}
	 }
}
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	8f 91       	pop	r24
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <SW_RX_Init>:

void SW_RX_Init(void)
{
	//PORT
	PORTD |= ( 1<<SW_RX_PIN);	// RX_PIN is input, tri-stated
 580:	5a 9a       	sbi	0x0b, 2	; 11
	
	// Timer0
	DISABLE_TIMER_INTERRUPT();
 582:	ee e6       	ldi	r30, 0x6E	; 110
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	8d 7f       	andi	r24, 0xFD	; 253
 58a:	80 83       	st	Z, r24
	TCCR0A = 0x00;		// Reset control register
 58c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;		// Reset presclaler
 58e:	15 bc       	out	0x25, r1	; 37
	TCCR0A |= (1 << WGM01);  //Timer in CTC mode
 590:	84 b5       	in	r24, 0x24	; 36
 592:	82 60       	ori	r24, 0x02	; 2
 594:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);	 //divide by 8 prescaler
 596:	85 b5       	in	r24, 0x25	; 37
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	85 bd       	out	0x25, r24	; 37
	
	//External interrupt
	EIFR= 0x00;				//Init
 59c:	1c ba       	out	0x1c, r1	; 28
	EICRA |= ( 1<<ISC01 );	//Interrupt sense control: falling edge
 59e:	e9 e6       	ldi	r30, 0x69	; 105
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	82 60       	ori	r24, 0x02	; 2
 5a6:	80 83       	st	Z, r24
	ENABLE_EXTERNAL0_INTERRUPT();  // Turn external interrupt on
 5a8:	e8 9a       	sbi	0x1d, 0	; 29
	
	CLEAR_TIMER_INTERRUPT();
 5aa:	a9 9a       	sbi	0x15, 1	; 21
	//Internal State Variable
	SWrxDataPending = 0;
 5ac:	10 92 b4 01 	sts	0x01B4, r1
	sei();
 5b0:	78 94       	sei
 5b2:	08 95       	ret

000005b4 <SW_RX_Fill_Buffer>:
	
}

void SW_RX_Fill_Buffer(void)
{
		if(SWrxCount < SW_SIZE_BUF)
 5b4:	80 91 0d 01 	lds	r24, 0x010D
 5b8:	82 31       	cpi	r24, 0x12	; 18
 5ba:	28 f5       	brcc	.+74     	; 0x606 <SW_RX_Fill_Buffer+0x52>
		{
			SWrxBuf[SWrxBufTail] = SW_RX_Data;
 5bc:	e0 91 0f 01 	lds	r30, 0x010F
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 91 23 01 	lds	r24, 0x0123
 5c6:	e0 5f       	subi	r30, 0xF0	; 240
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	80 83       	st	Z, r24
			SWrxDataPending = 0;
 5cc:	10 92 b4 01 	sts	0x01B4, r1
			if (SWrxBuf[SWrxBufTail] == 0x0A)
 5d0:	e0 91 0f 01 	lds	r30, 0x010F
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	e0 5f       	subi	r30, 0xF0	; 240
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	80 81       	ld	r24, Z
 5dc:	8a 30       	cpi	r24, 0x0A	; 10
 5de:	19 f4       	brne	.+6      	; 0x5e6 <SW_RX_Fill_Buffer+0x32>
			{
				SWmesIsComplete = 1;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	80 93 b5 01 	sts	0x01B5, r24
			}
			SWrxBufTail++;
 5e6:	80 91 0f 01 	lds	r24, 0x010F
 5ea:	8f 5f       	subi	r24, 0xFF	; 255
 5ec:	80 93 0f 01 	sts	0x010F, r24
			if(SWrxBufTail == SW_SIZE_BUF) SWrxBufTail = 0;
 5f0:	80 91 0f 01 	lds	r24, 0x010F
 5f4:	82 31       	cpi	r24, 0x12	; 18
 5f6:	11 f4       	brne	.+4      	; 0x5fc <SW_RX_Fill_Buffer+0x48>
 5f8:	10 92 0f 01 	sts	0x010F, r1
			SWrxCount++;
 5fc:	80 91 0d 01 	lds	r24, 0x010D
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 0d 01 	sts	0x010D, r24
 606:	08 95       	ret

00000608 <SW_GetChar>:
}

uint8_t SW_GetChar(void)
{
	uint8_t SWsym;
	if (SWrxCount > 0)
 608:	80 91 0d 01 	lds	r24, 0x010D
 60c:	88 23       	and	r24, r24
 60e:	b9 f0       	breq	.+46     	; 0x63e <SW_GetChar+0x36>
	{
		SWsym = SWrxBuf[SWrxBufHead];
 610:	e0 91 0e 01 	lds	r30, 0x010E
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	e0 5f       	subi	r30, 0xF0	; 240
 618:	fe 4f       	sbci	r31, 0xFE	; 254
 61a:	80 81       	ld	r24, Z
		SWrxCount--;
 61c:	90 91 0d 01 	lds	r25, 0x010D
 620:	91 50       	subi	r25, 0x01	; 1
 622:	90 93 0d 01 	sts	0x010D, r25
		SWrxBufHead++;
 626:	90 91 0e 01 	lds	r25, 0x010E
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	90 93 0e 01 	sts	0x010E, r25
		if(SWrxBufHead == SW_SIZE_BUF) SWrxBufHead = 0;
 630:	90 91 0e 01 	lds	r25, 0x010E
 634:	92 31       	cpi	r25, 0x12	; 18
 636:	19 f4       	brne	.+6      	; 0x63e <SW_GetChar+0x36>
 638:	10 92 0e 01 	sts	0x010E, r1
 63c:	08 95       	ret
		return SWsym;
	}
}
 63e:	08 95       	ret

00000640 <SW_GetMessage>:

void SW_GetMessage(void)
{
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	11 e0       	ldi	r17, 0x01	; 1
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 656:	dd 24       	eor	r13, r13
 658:	d3 94       	inc	r13
	{
		uint8_t SWvalue = SW_GetChar();
		SWrxMessage[i] = SWvalue;
		SWscaleValueForBL[0] = 'v';
 65a:	0f 2e       	mov	r0, r31
 65c:	f6 eb       	ldi	r31, 0xB6	; 182
 65e:	ef 2e       	mov	r14, r31
 660:	f1 e0       	ldi	r31, 0x01	; 1
 662:	ff 2e       	mov	r15, r31
 664:	f0 2d       	mov	r31, r0
 666:	06 e7       	ldi	r16, 0x76	; 118
				SWscaleValueForBL[j] = SWvalue;
				j++;
			}
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
 668:	0f 2e       	mov	r0, r31
 66a:	fd e0       	ldi	r31, 0x0D	; 13
 66c:	cf 2e       	mov	r12, r31
 66e:	f0 2d       	mov	r31, r0
 670:	02 c0       	rjmp	.+4      	; 0x676 <SW_GetMessage+0x36>
 672:	21 96       	adiw	r28, 0x01	; 1
 674:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
	{
		uint8_t SWvalue = SW_GetChar();
 676:	0e 94 04 03 	call	0x608	; 0x608 <SW_GetChar>
		SWrxMessage[i] = SWvalue;
 67a:	fe 01       	movw	r30, r28
 67c:	ee 55       	subi	r30, 0x5E	; 94
 67e:	fe 4f       	sbci	r31, 0xFE	; 254
 680:	80 83       	st	Z, r24
		SWscaleValueForBL[0] = 'v';
 682:	f7 01       	movw	r30, r14
 684:	00 83       	st	Z, r16
 686:	9c 2f       	mov	r25, r28
 688:	2c 2f       	mov	r18, r28
 68a:	27 50       	subi	r18, 0x07	; 7
		if ( (i>6) && (i<14) && (!(SWrxMessage[i] == ' ')))
 68c:	27 30       	cpi	r18, 0x07	; 7
 68e:	60 f4       	brcc	.+24     	; 0x6a8 <SW_GetMessage+0x68>
 690:	fe 01       	movw	r30, r28
 692:	ee 55       	subi	r30, 0x5E	; 94
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	20 81       	ld	r18, Z
 698:	20 32       	cpi	r18, 0x20	; 32
 69a:	31 f0       	breq	.+12     	; 0x6a8 <SW_GetMessage+0x68>
			{
				SWscaleValueForBL[j] = SWvalue;
 69c:	ed 2d       	mov	r30, r13
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	ea 54       	subi	r30, 0x4A	; 74
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	80 83       	st	Z, r24
				j++;
 6a6:	d3 94       	inc	r13
			}
		if (i==14)
 6a8:	9e 30       	cpi	r25, 0x0E	; 14
 6aa:	31 f4       	brne	.+12     	; 0x6b8 <SW_GetMessage+0x78>
		{
			SWscaleValueForBL[j] = 0x0D;
 6ac:	ed 2d       	mov	r30, r13
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	ea 54       	subi	r30, 0x4A	; 74
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	c0 82       	st	Z, r12
 6b6:	dd cf       	rjmp	.-70     	; 0x672 <SW_GetMessage+0x32>

void SW_GetMessage(void)
{
	uint8_t j;
	uint8_t i;
	for (i=0, j=1; i<18; i++)
 6b8:	12 31       	cpi	r17, 0x12	; 18
 6ba:	d8 f2       	brcs	.-74     	; 0x672 <SW_GetMessage+0x32>
		if (i==14)
		{
			SWscaleValueForBL[j] = 0x0D;
		}
	}
}
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	08 95       	ret

000006ce <__cmpsf2>:
 6ce:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_cmp>
 6d2:	08 f4       	brcc	.+2      	; 0x6d6 <__cmpsf2+0x8>
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	08 95       	ret

000006d8 <__fixsfsi>:
 6d8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fixunssfsi>
 6dc:	68 94       	set
 6de:	b1 11       	cpse	r27, r1
 6e0:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_szero>
 6e4:	08 95       	ret

000006e6 <__fixunssfsi>:
 6e6:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_splitA>
 6ea:	88 f0       	brcs	.+34     	; 0x70e <__fixunssfsi+0x28>
 6ec:	9f 57       	subi	r25, 0x7F	; 127
 6ee:	98 f0       	brcs	.+38     	; 0x716 <__fixunssfsi+0x30>
 6f0:	b9 2f       	mov	r27, r25
 6f2:	99 27       	eor	r25, r25
 6f4:	b7 51       	subi	r27, 0x17	; 23
 6f6:	b0 f0       	brcs	.+44     	; 0x724 <__fixunssfsi+0x3e>
 6f8:	e1 f0       	breq	.+56     	; 0x732 <__fixunssfsi+0x4c>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	1a f0       	brmi	.+6      	; 0x70a <__fixunssfsi+0x24>
 704:	ba 95       	dec	r27
 706:	c9 f7       	brne	.-14     	; 0x6fa <__fixunssfsi+0x14>
 708:	14 c0       	rjmp	.+40     	; 0x732 <__fixunssfsi+0x4c>
 70a:	b1 30       	cpi	r27, 0x01	; 1
 70c:	91 f0       	breq	.+36     	; 0x732 <__fixunssfsi+0x4c>
 70e:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_zero>
 712:	b1 e0       	ldi	r27, 0x01	; 1
 714:	08 95       	ret
 716:	0c 94 25 04 	jmp	0x84a	; 0x84a <__fp_zero>
 71a:	67 2f       	mov	r22, r23
 71c:	78 2f       	mov	r23, r24
 71e:	88 27       	eor	r24, r24
 720:	b8 5f       	subi	r27, 0xF8	; 248
 722:	39 f0       	breq	.+14     	; 0x732 <__fixunssfsi+0x4c>
 724:	b9 3f       	cpi	r27, 0xF9	; 249
 726:	cc f3       	brlt	.-14     	; 0x71a <__fixunssfsi+0x34>
 728:	86 95       	lsr	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b3 95       	inc	r27
 730:	d9 f7       	brne	.-10     	; 0x728 <__fixunssfsi+0x42>
 732:	3e f4       	brtc	.+14     	; 0x742 <__fixunssfsi+0x5c>
 734:	90 95       	com	r25
 736:	80 95       	com	r24
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__floatunsisf>:
 744:	e8 94       	clt
 746:	09 c0       	rjmp	.+18     	; 0x75a <__floatsisf+0x12>

00000748 <__floatsisf>:
 748:	97 fb       	bst	r25, 7
 74a:	3e f4       	brtc	.+14     	; 0x75a <__floatsisf+0x12>
 74c:	90 95       	com	r25
 74e:	80 95       	com	r24
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	99 23       	and	r25, r25
 75c:	a9 f0       	breq	.+42     	; 0x788 <__floatsisf+0x40>
 75e:	f9 2f       	mov	r31, r25
 760:	96 e9       	ldi	r25, 0x96	; 150
 762:	bb 27       	eor	r27, r27
 764:	93 95       	inc	r25
 766:	f6 95       	lsr	r31
 768:	87 95       	ror	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f1 11       	cpse	r31, r1
 772:	f8 cf       	rjmp	.-16     	; 0x764 <__floatsisf+0x1c>
 774:	fa f4       	brpl	.+62     	; 0x7b4 <__floatsisf+0x6c>
 776:	bb 0f       	add	r27, r27
 778:	11 f4       	brne	.+4      	; 0x77e <__floatsisf+0x36>
 77a:	60 ff       	sbrs	r22, 0
 77c:	1b c0       	rjmp	.+54     	; 0x7b4 <__floatsisf+0x6c>
 77e:	6f 5f       	subi	r22, 0xFF	; 255
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	16 c0       	rjmp	.+44     	; 0x7b4 <__floatsisf+0x6c>
 788:	88 23       	and	r24, r24
 78a:	11 f0       	breq	.+4      	; 0x790 <__floatsisf+0x48>
 78c:	96 e9       	ldi	r25, 0x96	; 150
 78e:	11 c0       	rjmp	.+34     	; 0x7b2 <__floatsisf+0x6a>
 790:	77 23       	and	r23, r23
 792:	21 f0       	breq	.+8      	; 0x79c <__floatsisf+0x54>
 794:	9e e8       	ldi	r25, 0x8E	; 142
 796:	87 2f       	mov	r24, r23
 798:	76 2f       	mov	r23, r22
 79a:	05 c0       	rjmp	.+10     	; 0x7a6 <__floatsisf+0x5e>
 79c:	66 23       	and	r22, r22
 79e:	71 f0       	breq	.+28     	; 0x7bc <__floatsisf+0x74>
 7a0:	96 e8       	ldi	r25, 0x86	; 134
 7a2:	86 2f       	mov	r24, r22
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	2a f0       	brmi	.+10     	; 0x7b4 <__floatsisf+0x6c>
 7aa:	9a 95       	dec	r25
 7ac:	66 0f       	add	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 1f       	adc	r24, r24
 7b2:	da f7       	brpl	.-10     	; 0x7aa <__floatsisf+0x62>
 7b4:	88 0f       	add	r24, r24
 7b6:	96 95       	lsr	r25
 7b8:	87 95       	ror	r24
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret

000007be <__fp_cmp>:
 7be:	99 0f       	add	r25, r25
 7c0:	00 08       	sbc	r0, r0
 7c2:	55 0f       	add	r21, r21
 7c4:	aa 0b       	sbc	r26, r26
 7c6:	e0 e8       	ldi	r30, 0x80	; 128
 7c8:	fe ef       	ldi	r31, 0xFE	; 254
 7ca:	16 16       	cp	r1, r22
 7cc:	17 06       	cpc	r1, r23
 7ce:	e8 07       	cpc	r30, r24
 7d0:	f9 07       	cpc	r31, r25
 7d2:	c0 f0       	brcs	.+48     	; 0x804 <__fp_cmp+0x46>
 7d4:	12 16       	cp	r1, r18
 7d6:	13 06       	cpc	r1, r19
 7d8:	e4 07       	cpc	r30, r20
 7da:	f5 07       	cpc	r31, r21
 7dc:	98 f0       	brcs	.+38     	; 0x804 <__fp_cmp+0x46>
 7de:	62 1b       	sub	r22, r18
 7e0:	73 0b       	sbc	r23, r19
 7e2:	84 0b       	sbc	r24, r20
 7e4:	95 0b       	sbc	r25, r21
 7e6:	39 f4       	brne	.+14     	; 0x7f6 <__fp_cmp+0x38>
 7e8:	0a 26       	eor	r0, r26
 7ea:	61 f0       	breq	.+24     	; 0x804 <__fp_cmp+0x46>
 7ec:	23 2b       	or	r18, r19
 7ee:	24 2b       	or	r18, r20
 7f0:	25 2b       	or	r18, r21
 7f2:	21 f4       	brne	.+8      	; 0x7fc <__fp_cmp+0x3e>
 7f4:	08 95       	ret
 7f6:	0a 26       	eor	r0, r26
 7f8:	09 f4       	brne	.+2      	; 0x7fc <__fp_cmp+0x3e>
 7fa:	a1 40       	sbci	r26, 0x01	; 1
 7fc:	a6 95       	lsr	r26
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	81 1d       	adc	r24, r1
 802:	81 1d       	adc	r24, r1
 804:	08 95       	ret

00000806 <__fp_split3>:
 806:	57 fd       	sbrc	r21, 7
 808:	90 58       	subi	r25, 0x80	; 128
 80a:	44 0f       	add	r20, r20
 80c:	55 1f       	adc	r21, r21
 80e:	59 f0       	breq	.+22     	; 0x826 <__fp_splitA+0x10>
 810:	5f 3f       	cpi	r21, 0xFF	; 255
 812:	71 f0       	breq	.+28     	; 0x830 <__fp_splitA+0x1a>
 814:	47 95       	ror	r20

00000816 <__fp_splitA>:
 816:	88 0f       	add	r24, r24
 818:	97 fb       	bst	r25, 7
 81a:	99 1f       	adc	r25, r25
 81c:	61 f0       	breq	.+24     	; 0x836 <__fp_splitA+0x20>
 81e:	9f 3f       	cpi	r25, 0xFF	; 255
 820:	79 f0       	breq	.+30     	; 0x840 <__fp_splitA+0x2a>
 822:	87 95       	ror	r24
 824:	08 95       	ret
 826:	12 16       	cp	r1, r18
 828:	13 06       	cpc	r1, r19
 82a:	14 06       	cpc	r1, r20
 82c:	55 1f       	adc	r21, r21
 82e:	f2 cf       	rjmp	.-28     	; 0x814 <__fp_split3+0xe>
 830:	46 95       	lsr	r20
 832:	f1 df       	rcall	.-30     	; 0x816 <__fp_splitA>
 834:	08 c0       	rjmp	.+16     	; 0x846 <__fp_splitA+0x30>
 836:	16 16       	cp	r1, r22
 838:	17 06       	cpc	r1, r23
 83a:	18 06       	cpc	r1, r24
 83c:	99 1f       	adc	r25, r25
 83e:	f1 cf       	rjmp	.-30     	; 0x822 <__fp_splitA+0xc>
 840:	86 95       	lsr	r24
 842:	71 05       	cpc	r23, r1
 844:	61 05       	cpc	r22, r1
 846:	08 94       	sec
 848:	08 95       	ret

0000084a <__fp_zero>:
 84a:	e8 94       	clt

0000084c <__fp_szero>:
 84c:	bb 27       	eor	r27, r27
 84e:	66 27       	eor	r22, r22
 850:	77 27       	eor	r23, r23
 852:	cb 01       	movw	r24, r22
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret

00000858 <__gesf2>:
 858:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_cmp>
 85c:	08 f4       	brcc	.+2      	; 0x860 <__gesf2+0x8>
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	08 95       	ret

00000862 <atof>:
 862:	66 27       	eor	r22, r22
 864:	77 27       	eor	r23, r23
 866:	0c 94 80 04 	jmp	0x900	; 0x900 <strtod>

0000086a <atoi>:
 86a:	fc 01       	movw	r30, r24
 86c:	88 27       	eor	r24, r24
 86e:	99 27       	eor	r25, r25
 870:	e8 94       	clt
 872:	21 91       	ld	r18, Z+
 874:	20 32       	cpi	r18, 0x20	; 32
 876:	e9 f3       	breq	.-6      	; 0x872 <atoi+0x8>
 878:	29 30       	cpi	r18, 0x09	; 9
 87a:	10 f0       	brcs	.+4      	; 0x880 <atoi+0x16>
 87c:	2e 30       	cpi	r18, 0x0E	; 14
 87e:	c8 f3       	brcs	.-14     	; 0x872 <atoi+0x8>
 880:	2b 32       	cpi	r18, 0x2B	; 43
 882:	41 f0       	breq	.+16     	; 0x894 <atoi+0x2a>
 884:	2d 32       	cpi	r18, 0x2D	; 45
 886:	39 f4       	brne	.+14     	; 0x896 <atoi+0x2c>
 888:	68 94       	set
 88a:	04 c0       	rjmp	.+8      	; 0x894 <atoi+0x2a>
 88c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__mulhi_const_10>
 890:	82 0f       	add	r24, r18
 892:	91 1d       	adc	r25, r1
 894:	21 91       	ld	r18, Z+
 896:	20 53       	subi	r18, 0x30	; 48
 898:	2a 30       	cpi	r18, 0x0A	; 10
 89a:	c0 f3       	brcs	.-16     	; 0x88c <atoi+0x22>
 89c:	1e f4       	brtc	.+6      	; 0x8a4 <atoi+0x3a>
 89e:	90 95       	com	r25
 8a0:	81 95       	neg	r24
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	08 95       	ret

000008a6 <__itoa_ncheck>:
 8a6:	bb 27       	eor	r27, r27
 8a8:	4a 30       	cpi	r20, 0x0A	; 10
 8aa:	31 f4       	brne	.+12     	; 0x8b8 <__itoa_ncheck+0x12>
 8ac:	99 23       	and	r25, r25
 8ae:	22 f4       	brpl	.+8      	; 0x8b8 <__itoa_ncheck+0x12>
 8b0:	bd e2       	ldi	r27, 0x2D	; 45
 8b2:	90 95       	com	r25
 8b4:	81 95       	neg	r24
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__utoa_common>

000008bc <__mulhi_const_10>:
 8bc:	7a e0       	ldi	r23, 0x0A	; 10
 8be:	97 9f       	mul	r25, r23
 8c0:	90 2d       	mov	r25, r0
 8c2:	87 9f       	mul	r24, r23
 8c4:	80 2d       	mov	r24, r0
 8c6:	91 0d       	add	r25, r1
 8c8:	11 24       	eor	r1, r1
 8ca:	08 95       	ret

000008cc <__utoa_ncheck>:
 8cc:	bb 27       	eor	r27, r27

000008ce <__utoa_common>:
 8ce:	fb 01       	movw	r30, r22
 8d0:	55 27       	eor	r21, r21
 8d2:	aa 27       	eor	r26, r26
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	aa 1f       	adc	r26, r26
 8da:	a4 17       	cp	r26, r20
 8dc:	10 f0       	brcs	.+4      	; 0x8e2 <__utoa_common+0x14>
 8de:	a4 1b       	sub	r26, r20
 8e0:	83 95       	inc	r24
 8e2:	50 51       	subi	r21, 0x10	; 16
 8e4:	b9 f7       	brne	.-18     	; 0x8d4 <__utoa_common+0x6>
 8e6:	a0 5d       	subi	r26, 0xD0	; 208
 8e8:	aa 33       	cpi	r26, 0x3A	; 58
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <__utoa_common+0x20>
 8ec:	a9 5d       	subi	r26, 0xD9	; 217
 8ee:	a1 93       	st	Z+, r26
 8f0:	00 97       	sbiw	r24, 0x00	; 0
 8f2:	79 f7       	brne	.-34     	; 0x8d2 <__utoa_common+0x4>
 8f4:	b1 11       	cpse	r27, r1
 8f6:	b1 93       	st	Z+, r27
 8f8:	11 92       	st	Z+, r1
 8fa:	cb 01       	movw	r24, r22
 8fc:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <strrev>

00000900 <strtod>:
 900:	a0 e0       	ldi	r26, 0x00	; 0
 902:	b0 e0       	ldi	r27, 0x00	; 0
 904:	e6 e8       	ldi	r30, 0x86	; 134
 906:	f4 e0       	ldi	r31, 0x04	; 4
 908:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__prologue_saves__+0x8>
 90c:	ec 01       	movw	r28, r24
 90e:	7b 01       	movw	r14, r22
 910:	61 15       	cp	r22, r1
 912:	71 05       	cpc	r23, r1
 914:	19 f0       	breq	.+6      	; 0x91c <strtod+0x1c>
 916:	db 01       	movw	r26, r22
 918:	8d 93       	st	X+, r24
 91a:	9c 93       	st	X, r25
 91c:	8e 01       	movw	r16, r28
 91e:	0f 5f       	subi	r16, 0xFF	; 255
 920:	1f 4f       	sbci	r17, 0xFF	; 255
 922:	78 80       	ld	r7, Y
 924:	87 2d       	mov	r24, r7
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 dd 05 	call	0xbba	; 0xbba <isspace>
 92c:	89 2b       	or	r24, r25
 92e:	11 f0       	breq	.+4      	; 0x934 <strtod+0x34>
 930:	e8 01       	movw	r28, r16
 932:	f4 cf       	rjmp	.-24     	; 0x91c <strtod+0x1c>
 934:	bd e2       	ldi	r27, 0x2D	; 45
 936:	7b 12       	cpse	r7, r27
 938:	05 c0       	rjmp	.+10     	; 0x944 <strtod+0x44>
 93a:	0f 5f       	subi	r16, 0xFF	; 255
 93c:	1f 4f       	sbci	r17, 0xFF	; 255
 93e:	79 80       	ldd	r7, Y+1	; 0x01
 940:	c1 e0       	ldi	r28, 0x01	; 1
 942:	08 c0       	rjmp	.+16     	; 0x954 <strtod+0x54>
 944:	eb e2       	ldi	r30, 0x2B	; 43
 946:	7e 12       	cpse	r7, r30
 948:	04 c0       	rjmp	.+8      	; 0x952 <strtod+0x52>
 94a:	8e 01       	movw	r16, r28
 94c:	0e 5f       	subi	r16, 0xFE	; 254
 94e:	1f 4f       	sbci	r17, 0xFF	; 255
 950:	79 80       	ldd	r7, Y+1	; 0x01
 952:	c0 e0       	ldi	r28, 0x00	; 0
 954:	68 01       	movw	r12, r16
 956:	f1 e0       	ldi	r31, 0x01	; 1
 958:	cf 1a       	sub	r12, r31
 95a:	d1 08       	sbc	r13, r1
 95c:	43 e0       	ldi	r20, 0x03	; 3
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	60 e7       	ldi	r22, 0x70	; 112
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	c6 01       	movw	r24, r12
 966:	0e 94 e6 05 	call	0xbcc	; 0xbcc <strncasecmp_P>
 96a:	89 2b       	or	r24, r25
 96c:	f1 f4       	brne	.+60     	; 0x9aa <strtod+0xaa>
 96e:	68 01       	movw	r12, r16
 970:	22 e0       	ldi	r18, 0x02	; 2
 972:	c2 0e       	add	r12, r18
 974:	d1 1c       	adc	r13, r1
 976:	45 e0       	ldi	r20, 0x05	; 5
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	6b e6       	ldi	r22, 0x6B	; 107
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	c6 01       	movw	r24, r12
 980:	0e 94 e6 05 	call	0xbcc	; 0xbcc <strncasecmp_P>
 984:	89 2b       	or	r24, r25
 986:	21 f4       	brne	.+8      	; 0x990 <strtod+0x90>
 988:	68 01       	movw	r12, r16
 98a:	87 e0       	ldi	r24, 0x07	; 7
 98c:	c8 0e       	add	r12, r24
 98e:	d1 1c       	adc	r13, r1
 990:	e1 14       	cp	r14, r1
 992:	f1 04       	cpc	r15, r1
 994:	19 f0       	breq	.+6      	; 0x99c <strtod+0x9c>
 996:	d7 01       	movw	r26, r14
 998:	cd 92       	st	X+, r12
 99a:	dc 92       	st	X, r13
 99c:	c1 11       	cpse	r28, r1
 99e:	ff c0       	rjmp	.+510    	; 0xb9e <strtod+0x29e>
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	70 e0       	ldi	r23, 0x00	; 0
 9a4:	80 e8       	ldi	r24, 0x80	; 128
 9a6:	9f e7       	ldi	r25, 0x7F	; 127
 9a8:	03 c1       	rjmp	.+518    	; 0xbb0 <strtod+0x2b0>
 9aa:	43 e0       	ldi	r20, 0x03	; 3
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	68 e6       	ldi	r22, 0x68	; 104
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	c6 01       	movw	r24, r12
 9b4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <strncasecmp_P>
 9b8:	89 2b       	or	r24, r25
 9ba:	51 f4       	brne	.+20     	; 0x9d0 <strtod+0xd0>
 9bc:	e1 14       	cp	r14, r1
 9be:	f1 04       	cpc	r15, r1
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <strtod+0xc4>
 9c2:	f2 c0       	rjmp	.+484    	; 0xba8 <strtod+0x2a8>
 9c4:	0e 5f       	subi	r16, 0xFE	; 254
 9c6:	1f 4f       	sbci	r17, 0xFF	; 255
 9c8:	f7 01       	movw	r30, r14
 9ca:	11 83       	std	Z+1, r17	; 0x01
 9cc:	00 83       	st	Z, r16
 9ce:	ec c0       	rjmp	.+472    	; 0xba8 <strtod+0x2a8>
 9d0:	68 01       	movw	r12, r16
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	cb 01       	movw	r24, r22
 9d8:	00 e0       	ldi	r16, 0x00	; 0
 9da:	10 e0       	ldi	r17, 0x00	; 0
 9dc:	f6 01       	movw	r30, r12
 9de:	d0 ed       	ldi	r29, 0xD0	; 208
 9e0:	d7 0d       	add	r29, r7
 9e2:	da 30       	cpi	r29, 0x0A	; 10
 9e4:	58 f5       	brcc	.+86     	; 0xa3c <strtod+0x13c>
 9e6:	2c 2f       	mov	r18, r28
 9e8:	22 60       	ori	r18, 0x02	; 2
 9ea:	62 2e       	mov	r6, r18
 9ec:	2c 2f       	mov	r18, r28
 9ee:	28 70       	andi	r18, 0x08	; 8
 9f0:	c2 ff       	sbrs	r28, 2
 9f2:	05 c0       	rjmp	.+10     	; 0x9fe <strtod+0xfe>
 9f4:	21 11       	cpse	r18, r1
 9f6:	28 c0       	rjmp	.+80     	; 0xa48 <strtod+0x148>
 9f8:	0f 5f       	subi	r16, 0xFF	; 255
 9fa:	1f 4f       	sbci	r17, 0xFF	; 255
 9fc:	25 c0       	rjmp	.+74     	; 0xa48 <strtod+0x148>
 9fe:	22 23       	and	r18, r18
 a00:	11 f0       	breq	.+4      	; 0xa06 <strtod+0x106>
 a02:	01 50       	subi	r16, 0x01	; 1
 a04:	11 09       	sbc	r17, r1
 a06:	a5 e0       	ldi	r26, 0x05	; 5
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	9b 01       	movw	r18, r22
 a0c:	ac 01       	movw	r20, r24
 a0e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__muluhisi3>
 a12:	4b 01       	movw	r8, r22
 a14:	5c 01       	movw	r10, r24
 a16:	88 0c       	add	r8, r8
 a18:	99 1c       	adc	r9, r9
 a1a:	aa 1c       	adc	r10, r10
 a1c:	bb 1c       	adc	r11, r11
 a1e:	c5 01       	movw	r24, r10
 a20:	b4 01       	movw	r22, r8
 a22:	6d 0f       	add	r22, r29
 a24:	71 1d       	adc	r23, r1
 a26:	81 1d       	adc	r24, r1
 a28:	91 1d       	adc	r25, r1
 a2a:	68 39       	cpi	r22, 0x98	; 152
 a2c:	a9 e9       	ldi	r26, 0x99	; 153
 a2e:	7a 07       	cpc	r23, r26
 a30:	8a 07       	cpc	r24, r26
 a32:	a9 e1       	ldi	r26, 0x19	; 25
 a34:	9a 07       	cpc	r25, r26
 a36:	40 f0       	brcs	.+16     	; 0xa48 <strtod+0x148>
 a38:	c6 60       	ori	r28, 0x06	; 6
 a3a:	05 c0       	rjmp	.+10     	; 0xa46 <strtod+0x146>
 a3c:	de 3f       	cpi	r29, 0xFE	; 254
 a3e:	51 f4       	brne	.+20     	; 0xa54 <strtod+0x154>
 a40:	c3 fd       	sbrc	r28, 3
 a42:	44 c0       	rjmp	.+136    	; 0xacc <strtod+0x1cc>
 a44:	c8 60       	ori	r28, 0x08	; 8
 a46:	6c 2e       	mov	r6, r28
 a48:	bf ef       	ldi	r27, 0xFF	; 255
 a4a:	cb 1a       	sub	r12, r27
 a4c:	db 0a       	sbc	r13, r27
 a4e:	70 80       	ld	r7, Z
 a50:	c6 2d       	mov	r28, r6
 a52:	c4 cf       	rjmp	.-120    	; 0x9dc <strtod+0xdc>
 a54:	2d 2f       	mov	r18, r29
 a56:	2f 7d       	andi	r18, 0xDF	; 223
 a58:	25 31       	cpi	r18, 0x15	; 21
 a5a:	c1 f5       	brne	.+112    	; 0xacc <strtod+0x1cc>
 a5c:	40 81       	ld	r20, Z
 a5e:	4d 32       	cpi	r20, 0x2D	; 45
 a60:	11 f4       	brne	.+4      	; 0xa66 <strtod+0x166>
 a62:	c0 61       	ori	r28, 0x10	; 16
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <strtod+0x172>
 a66:	4b 32       	cpi	r20, 0x2B	; 43
 a68:	21 f0       	breq	.+8      	; 0xa72 <strtod+0x172>
 a6a:	31 96       	adiw	r30, 0x01	; 1
 a6c:	21 e0       	ldi	r18, 0x01	; 1
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <strtod+0x17e>
 a72:	32 96       	adiw	r30, 0x02	; 2
 a74:	d6 01       	movw	r26, r12
 a76:	11 96       	adiw	r26, 0x01	; 1
 a78:	4c 91       	ld	r20, X
 a7a:	22 e0       	ldi	r18, 0x02	; 2
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	a0 ed       	ldi	r26, 0xD0	; 208
 a80:	a4 0f       	add	r26, r20
 a82:	aa 30       	cpi	r26, 0x0A	; 10
 a84:	18 f0       	brcs	.+6      	; 0xa8c <strtod+0x18c>
 a86:	e2 1b       	sub	r30, r18
 a88:	f3 0b       	sbc	r31, r19
 a8a:	20 c0       	rjmp	.+64     	; 0xacc <strtod+0x1cc>
 a8c:	40 e0       	ldi	r20, 0x00	; 0
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	40 38       	cpi	r20, 0x80	; 128
 a92:	bc e0       	ldi	r27, 0x0C	; 12
 a94:	5b 07       	cpc	r21, r27
 a96:	5c f4       	brge	.+22     	; 0xaae <strtod+0x1ae>
 a98:	9a 01       	movw	r18, r20
 a9a:	22 0f       	add	r18, r18
 a9c:	33 1f       	adc	r19, r19
 a9e:	22 0f       	add	r18, r18
 aa0:	33 1f       	adc	r19, r19
 aa2:	42 0f       	add	r20, r18
 aa4:	53 1f       	adc	r21, r19
 aa6:	44 0f       	add	r20, r20
 aa8:	55 1f       	adc	r21, r21
 aaa:	4a 0f       	add	r20, r26
 aac:	51 1d       	adc	r21, r1
 aae:	31 96       	adiw	r30, 0x01	; 1
 ab0:	df 01       	movw	r26, r30
 ab2:	11 97       	sbiw	r26, 0x01	; 1
 ab4:	2c 91       	ld	r18, X
 ab6:	a0 ed       	ldi	r26, 0xD0	; 208
 ab8:	a2 0f       	add	r26, r18
 aba:	aa 30       	cpi	r26, 0x0A	; 10
 abc:	48 f3       	brcs	.-46     	; 0xa90 <strtod+0x190>
 abe:	c4 ff       	sbrs	r28, 4
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <strtod+0x1c8>
 ac2:	51 95       	neg	r21
 ac4:	41 95       	neg	r20
 ac6:	51 09       	sbc	r21, r1
 ac8:	04 0f       	add	r16, r20
 aca:	15 1f       	adc	r17, r21
 acc:	c1 ff       	sbrs	r28, 1
 ace:	07 c0       	rjmp	.+14     	; 0xade <strtod+0x1de>
 ad0:	e1 14       	cp	r14, r1
 ad2:	f1 04       	cpc	r15, r1
 ad4:	21 f0       	breq	.+8      	; 0xade <strtod+0x1de>
 ad6:	31 97       	sbiw	r30, 0x01	; 1
 ad8:	d7 01       	movw	r26, r14
 ada:	ed 93       	st	X+, r30
 adc:	fc 93       	st	X, r31
 ade:	0e 94 a2 03 	call	0x744	; 0x744 <__floatunsisf>
 ae2:	c3 70       	andi	r28, 0x03	; 3
 ae4:	c3 30       	cpi	r28, 0x03	; 3
 ae6:	19 f0       	breq	.+6      	; 0xaee <strtod+0x1ee>
 ae8:	6b 01       	movw	r12, r22
 aea:	7c 01       	movw	r14, r24
 aec:	06 c0       	rjmp	.+12     	; 0xafa <strtod+0x1fa>
 aee:	6b 01       	movw	r12, r22
 af0:	7c 01       	movw	r14, r24
 af2:	f7 fa       	bst	r15, 7
 af4:	f0 94       	com	r15
 af6:	f7 f8       	bld	r15, 7
 af8:	f0 94       	com	r15
 afa:	20 e0       	ldi	r18, 0x00	; 0
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	a9 01       	movw	r20, r18
 b00:	c7 01       	movw	r24, r14
 b02:	b6 01       	movw	r22, r12
 b04:	0e 94 67 03 	call	0x6ce	; 0x6ce <__cmpsf2>
 b08:	88 23       	and	r24, r24
 b0a:	09 f4       	brne	.+2      	; 0xb0e <strtod+0x20e>
 b0c:	45 c0       	rjmp	.+138    	; 0xb98 <strtod+0x298>
 b0e:	17 ff       	sbrs	r17, 7
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <strtod+0x21e>
 b12:	11 95       	neg	r17
 b14:	01 95       	neg	r16
 b16:	11 09       	sbc	r17, r1
 b18:	c7 e8       	ldi	r28, 0x87	; 135
 b1a:	d0 e0       	ldi	r29, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <strtod+0x222>
 b1e:	cf e9       	ldi	r28, 0x9F	; 159
 b20:	d0 e0       	ldi	r29, 0x00	; 0
 b22:	5e 01       	movw	r10, r28
 b24:	b8 e1       	ldi	r27, 0x18	; 24
 b26:	ab 1a       	sub	r10, r27
 b28:	b1 08       	sbc	r11, r1
 b2a:	46 01       	movw	r8, r12
 b2c:	be 2d       	mov	r27, r14
 b2e:	af 2d       	mov	r26, r15
 b30:	90 e2       	ldi	r25, 0x20	; 32
 b32:	e9 2e       	mov	r14, r25
 b34:	f1 2c       	mov	r15, r1
 b36:	0e 15       	cp	r16, r14
 b38:	1f 05       	cpc	r17, r15
 b3a:	84 f0       	brlt	.+32     	; 0xb5c <strtod+0x25c>
 b3c:	fe 01       	movw	r30, r28
 b3e:	25 91       	lpm	r18, Z+
 b40:	35 91       	lpm	r19, Z+
 b42:	45 91       	lpm	r20, Z+
 b44:	54 91       	lpm	r21, Z
 b46:	b4 01       	movw	r22, r8
 b48:	8b 2f       	mov	r24, r27
 b4a:	9a 2f       	mov	r25, r26
 b4c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__mulsf3>
 b50:	4b 01       	movw	r8, r22
 b52:	b8 2f       	mov	r27, r24
 b54:	a9 2f       	mov	r26, r25
 b56:	0e 19       	sub	r16, r14
 b58:	1f 09       	sbc	r17, r15
 b5a:	ed cf       	rjmp	.-38     	; 0xb36 <strtod+0x236>
 b5c:	24 97       	sbiw	r28, 0x04	; 4
 b5e:	f5 94       	asr	r15
 b60:	e7 94       	ror	r14
 b62:	ca 15       	cp	r28, r10
 b64:	db 05       	cpc	r29, r11
 b66:	39 f7       	brne	.-50     	; 0xb36 <strtod+0x236>
 b68:	64 01       	movw	r12, r8
 b6a:	eb 2e       	mov	r14, r27
 b6c:	fa 2e       	mov	r15, r26
 b6e:	8e 2d       	mov	r24, r14
 b70:	88 0f       	add	r24, r24
 b72:	8f 2d       	mov	r24, r15
 b74:	88 1f       	adc	r24, r24
 b76:	8f 3f       	cpi	r24, 0xFF	; 255
 b78:	49 f0       	breq	.+18     	; 0xb8c <strtod+0x28c>
 b7a:	20 e0       	ldi	r18, 0x00	; 0
 b7c:	30 e0       	ldi	r19, 0x00	; 0
 b7e:	a9 01       	movw	r20, r18
 b80:	c7 01       	movw	r24, r14
 b82:	b6 01       	movw	r22, r12
 b84:	0e 94 67 03 	call	0x6ce	; 0x6ce <__cmpsf2>
 b88:	81 11       	cpse	r24, r1
 b8a:	06 c0       	rjmp	.+12     	; 0xb98 <strtod+0x298>
 b8c:	82 e2       	ldi	r24, 0x22	; 34
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	90 93 c1 01 	sts	0x01C1, r25
 b94:	80 93 c0 01 	sts	0x01C0, r24
 b98:	c7 01       	movw	r24, r14
 b9a:	b6 01       	movw	r22, r12
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <strtod+0x2b0>
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	70 e0       	ldi	r23, 0x00	; 0
 ba2:	80 e8       	ldi	r24, 0x80	; 128
 ba4:	9f ef       	ldi	r25, 0xFF	; 255
 ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <strtod+0x2b0>
 ba8:	60 e0       	ldi	r22, 0x00	; 0
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	80 ec       	ldi	r24, 0xC0	; 192
 bae:	9f e7       	ldi	r25, 0x7F	; 127
 bb0:	cd b7       	in	r28, 0x3d	; 61
 bb2:	de b7       	in	r29, 0x3e	; 62
 bb4:	ee e0       	ldi	r30, 0x0E	; 14
 bb6:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__epilogue_restores__+0x8>

00000bba <isspace>:
 bba:	91 11       	cpse	r25, r1
 bbc:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__ctype_isfalse>
 bc0:	80 32       	cpi	r24, 0x20	; 32
 bc2:	19 f0       	breq	.+6      	; 0xbca <isspace+0x10>
 bc4:	89 50       	subi	r24, 0x09	; 9
 bc6:	85 50       	subi	r24, 0x05	; 5
 bc8:	c8 f7       	brcc	.-14     	; 0xbbc <isspace+0x2>
 bca:	08 95       	ret

00000bcc <strncasecmp_P>:
 bcc:	fb 01       	movw	r30, r22
 bce:	dc 01       	movw	r26, r24
 bd0:	41 50       	subi	r20, 0x01	; 1
 bd2:	50 40       	sbci	r21, 0x00	; 0
 bd4:	88 f0       	brcs	.+34     	; 0xbf8 <strncasecmp_P+0x2c>
 bd6:	8d 91       	ld	r24, X+
 bd8:	81 34       	cpi	r24, 0x41	; 65
 bda:	1c f0       	brlt	.+6      	; 0xbe2 <strncasecmp_P+0x16>
 bdc:	8b 35       	cpi	r24, 0x5B	; 91
 bde:	0c f4       	brge	.+2      	; 0xbe2 <strncasecmp_P+0x16>
 be0:	80 5e       	subi	r24, 0xE0	; 224
 be2:	65 91       	lpm	r22, Z+
 be4:	61 34       	cpi	r22, 0x41	; 65
 be6:	1c f0       	brlt	.+6      	; 0xbee <strncasecmp_P+0x22>
 be8:	6b 35       	cpi	r22, 0x5B	; 91
 bea:	0c f4       	brge	.+2      	; 0xbee <strncasecmp_P+0x22>
 bec:	60 5e       	subi	r22, 0xE0	; 224
 bee:	86 1b       	sub	r24, r22
 bf0:	61 11       	cpse	r22, r1
 bf2:	71 f3       	breq	.-36     	; 0xbd0 <strncasecmp_P+0x4>
 bf4:	99 0b       	sbc	r25, r25
 bf6:	08 95       	ret
 bf8:	88 1b       	sub	r24, r24
 bfa:	fc cf       	rjmp	.-8      	; 0xbf4 <strncasecmp_P+0x28>

00000bfc <strrev>:
 bfc:	dc 01       	movw	r26, r24
 bfe:	fc 01       	movw	r30, r24
 c00:	67 2f       	mov	r22, r23
 c02:	71 91       	ld	r23, Z+
 c04:	77 23       	and	r23, r23
 c06:	e1 f7       	brne	.-8      	; 0xc00 <strrev+0x4>
 c08:	32 97       	sbiw	r30, 0x02	; 2
 c0a:	04 c0       	rjmp	.+8      	; 0xc14 <strrev+0x18>
 c0c:	7c 91       	ld	r23, X
 c0e:	6d 93       	st	X+, r22
 c10:	70 83       	st	Z, r23
 c12:	62 91       	ld	r22, -Z
 c14:	ae 17       	cp	r26, r30
 c16:	bf 07       	cpc	r27, r31
 c18:	c8 f3       	brcs	.-14     	; 0xc0c <strrev+0x10>
 c1a:	08 95       	ret

00000c1c <__mulsf3>:
 c1c:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3x>
 c20:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_round>
 c24:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_pscA>
 c28:	38 f0       	brcs	.+14     	; 0xc38 <__mulsf3+0x1c>
 c2a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_pscB>
 c2e:	20 f0       	brcs	.+8      	; 0xc38 <__mulsf3+0x1c>
 c30:	95 23       	and	r25, r21
 c32:	11 f0       	breq	.+4      	; 0xc38 <__mulsf3+0x1c>
 c34:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 c38:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_nan>
 c3c:	11 24       	eor	r1, r1
 c3e:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_szero>

00000c42 <__mulsf3x>:
 c42:	0e 94 03 04 	call	0x806	; 0x806 <__fp_split3>
 c46:	70 f3       	brcs	.-36     	; 0xc24 <__mulsf3+0x8>

00000c48 <__mulsf3_pse>:
 c48:	95 9f       	mul	r25, r21
 c4a:	c1 f3       	breq	.-16     	; 0xc3c <__mulsf3+0x20>
 c4c:	95 0f       	add	r25, r21
 c4e:	50 e0       	ldi	r21, 0x00	; 0
 c50:	55 1f       	adc	r21, r21
 c52:	62 9f       	mul	r22, r18
 c54:	f0 01       	movw	r30, r0
 c56:	72 9f       	mul	r23, r18
 c58:	bb 27       	eor	r27, r27
 c5a:	f0 0d       	add	r31, r0
 c5c:	b1 1d       	adc	r27, r1
 c5e:	63 9f       	mul	r22, r19
 c60:	aa 27       	eor	r26, r26
 c62:	f0 0d       	add	r31, r0
 c64:	b1 1d       	adc	r27, r1
 c66:	aa 1f       	adc	r26, r26
 c68:	64 9f       	mul	r22, r20
 c6a:	66 27       	eor	r22, r22
 c6c:	b0 0d       	add	r27, r0
 c6e:	a1 1d       	adc	r26, r1
 c70:	66 1f       	adc	r22, r22
 c72:	82 9f       	mul	r24, r18
 c74:	22 27       	eor	r18, r18
 c76:	b0 0d       	add	r27, r0
 c78:	a1 1d       	adc	r26, r1
 c7a:	62 1f       	adc	r22, r18
 c7c:	73 9f       	mul	r23, r19
 c7e:	b0 0d       	add	r27, r0
 c80:	a1 1d       	adc	r26, r1
 c82:	62 1f       	adc	r22, r18
 c84:	83 9f       	mul	r24, r19
 c86:	a0 0d       	add	r26, r0
 c88:	61 1d       	adc	r22, r1
 c8a:	22 1f       	adc	r18, r18
 c8c:	74 9f       	mul	r23, r20
 c8e:	33 27       	eor	r19, r19
 c90:	a0 0d       	add	r26, r0
 c92:	61 1d       	adc	r22, r1
 c94:	23 1f       	adc	r18, r19
 c96:	84 9f       	mul	r24, r20
 c98:	60 0d       	add	r22, r0
 c9a:	21 1d       	adc	r18, r1
 c9c:	82 2f       	mov	r24, r18
 c9e:	76 2f       	mov	r23, r22
 ca0:	6a 2f       	mov	r22, r26
 ca2:	11 24       	eor	r1, r1
 ca4:	9f 57       	subi	r25, 0x7F	; 127
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	9a f0       	brmi	.+38     	; 0xcd0 <__mulsf3_pse+0x88>
 caa:	f1 f0       	breq	.+60     	; 0xce8 <__mulsf3_pse+0xa0>
 cac:	88 23       	and	r24, r24
 cae:	4a f0       	brmi	.+18     	; 0xcc2 <__mulsf3_pse+0x7a>
 cb0:	ee 0f       	add	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	bb 1f       	adc	r27, r27
 cb6:	66 1f       	adc	r22, r22
 cb8:	77 1f       	adc	r23, r23
 cba:	88 1f       	adc	r24, r24
 cbc:	91 50       	subi	r25, 0x01	; 1
 cbe:	50 40       	sbci	r21, 0x00	; 0
 cc0:	a9 f7       	brne	.-22     	; 0xcac <__mulsf3_pse+0x64>
 cc2:	9e 3f       	cpi	r25, 0xFE	; 254
 cc4:	51 05       	cpc	r21, r1
 cc6:	80 f0       	brcs	.+32     	; 0xce8 <__mulsf3_pse+0xa0>
 cc8:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 ccc:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_szero>
 cd0:	5f 3f       	cpi	r21, 0xFF	; 255
 cd2:	e4 f3       	brlt	.-8      	; 0xccc <__mulsf3_pse+0x84>
 cd4:	98 3e       	cpi	r25, 0xE8	; 232
 cd6:	d4 f3       	brlt	.-12     	; 0xccc <__mulsf3_pse+0x84>
 cd8:	86 95       	lsr	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	b7 95       	ror	r27
 ce0:	f7 95       	ror	r31
 ce2:	e7 95       	ror	r30
 ce4:	9f 5f       	subi	r25, 0xFF	; 255
 ce6:	c1 f7       	brne	.-16     	; 0xcd8 <__mulsf3_pse+0x90>
 ce8:	fe 2b       	or	r31, r30
 cea:	88 0f       	add	r24, r24
 cec:	91 1d       	adc	r25, r1
 cee:	96 95       	lsr	r25
 cf0:	87 95       	ror	r24
 cf2:	97 f9       	bld	r25, 7
 cf4:	08 95       	ret

00000cf6 <__ctype_isfalse>:
 cf6:	99 27       	eor	r25, r25
 cf8:	88 27       	eor	r24, r24

00000cfa <__ctype_istrue>:
 cfa:	08 95       	ret

00000cfc <__fp_inf>:
 cfc:	97 f9       	bld	r25, 7
 cfe:	9f 67       	ori	r25, 0x7F	; 127
 d00:	80 e8       	ldi	r24, 0x80	; 128
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	60 e0       	ldi	r22, 0x00	; 0
 d06:	08 95       	ret

00000d08 <__fp_nan>:
 d08:	9f ef       	ldi	r25, 0xFF	; 255
 d0a:	80 ec       	ldi	r24, 0xC0	; 192
 d0c:	08 95       	ret

00000d0e <__fp_pscA>:
 d0e:	00 24       	eor	r0, r0
 d10:	0a 94       	dec	r0
 d12:	16 16       	cp	r1, r22
 d14:	17 06       	cpc	r1, r23
 d16:	18 06       	cpc	r1, r24
 d18:	09 06       	cpc	r0, r25
 d1a:	08 95       	ret

00000d1c <__fp_pscB>:
 d1c:	00 24       	eor	r0, r0
 d1e:	0a 94       	dec	r0
 d20:	12 16       	cp	r1, r18
 d22:	13 06       	cpc	r1, r19
 d24:	14 06       	cpc	r1, r20
 d26:	05 06       	cpc	r0, r21
 d28:	08 95       	ret

00000d2a <__fp_round>:
 d2a:	09 2e       	mov	r0, r25
 d2c:	03 94       	inc	r0
 d2e:	00 0c       	add	r0, r0
 d30:	11 f4       	brne	.+4      	; 0xd36 <__fp_round+0xc>
 d32:	88 23       	and	r24, r24
 d34:	52 f0       	brmi	.+20     	; 0xd4a <__fp_round+0x20>
 d36:	bb 0f       	add	r27, r27
 d38:	40 f4       	brcc	.+16     	; 0xd4a <__fp_round+0x20>
 d3a:	bf 2b       	or	r27, r31
 d3c:	11 f4       	brne	.+4      	; 0xd42 <__fp_round+0x18>
 d3e:	60 ff       	sbrs	r22, 0
 d40:	04 c0       	rjmp	.+8      	; 0xd4a <__fp_round+0x20>
 d42:	6f 5f       	subi	r22, 0xFF	; 255
 d44:	7f 4f       	sbci	r23, 0xFF	; 255
 d46:	8f 4f       	sbci	r24, 0xFF	; 255
 d48:	9f 4f       	sbci	r25, 0xFF	; 255
 d4a:	08 95       	ret

00000d4c <__muluhisi3>:
 d4c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__umulhisi3>
 d50:	a5 9f       	mul	r26, r21
 d52:	90 0d       	add	r25, r0
 d54:	b4 9f       	mul	r27, r20
 d56:	90 0d       	add	r25, r0
 d58:	a4 9f       	mul	r26, r20
 d5a:	80 0d       	add	r24, r0
 d5c:	91 1d       	adc	r25, r1
 d5e:	11 24       	eor	r1, r1
 d60:	08 95       	ret

00000d62 <__prologue_saves__>:
 d62:	2f 92       	push	r2
 d64:	3f 92       	push	r3
 d66:	4f 92       	push	r4
 d68:	5f 92       	push	r5
 d6a:	6f 92       	push	r6
 d6c:	7f 92       	push	r7
 d6e:	8f 92       	push	r8
 d70:	9f 92       	push	r9
 d72:	af 92       	push	r10
 d74:	bf 92       	push	r11
 d76:	cf 92       	push	r12
 d78:	df 92       	push	r13
 d7a:	ef 92       	push	r14
 d7c:	ff 92       	push	r15
 d7e:	0f 93       	push	r16
 d80:	1f 93       	push	r17
 d82:	cf 93       	push	r28
 d84:	df 93       	push	r29
 d86:	cd b7       	in	r28, 0x3d	; 61
 d88:	de b7       	in	r29, 0x3e	; 62
 d8a:	ca 1b       	sub	r28, r26
 d8c:	db 0b       	sbc	r29, r27
 d8e:	0f b6       	in	r0, 0x3f	; 63
 d90:	f8 94       	cli
 d92:	de bf       	out	0x3e, r29	; 62
 d94:	0f be       	out	0x3f, r0	; 63
 d96:	cd bf       	out	0x3d, r28	; 61
 d98:	09 94       	ijmp

00000d9a <__epilogue_restores__>:
 d9a:	2a 88       	ldd	r2, Y+18	; 0x12
 d9c:	39 88       	ldd	r3, Y+17	; 0x11
 d9e:	48 88       	ldd	r4, Y+16	; 0x10
 da0:	5f 84       	ldd	r5, Y+15	; 0x0f
 da2:	6e 84       	ldd	r6, Y+14	; 0x0e
 da4:	7d 84       	ldd	r7, Y+13	; 0x0d
 da6:	8c 84       	ldd	r8, Y+12	; 0x0c
 da8:	9b 84       	ldd	r9, Y+11	; 0x0b
 daa:	aa 84       	ldd	r10, Y+10	; 0x0a
 dac:	b9 84       	ldd	r11, Y+9	; 0x09
 dae:	c8 84       	ldd	r12, Y+8	; 0x08
 db0:	df 80       	ldd	r13, Y+7	; 0x07
 db2:	ee 80       	ldd	r14, Y+6	; 0x06
 db4:	fd 80       	ldd	r15, Y+5	; 0x05
 db6:	0c 81       	ldd	r16, Y+4	; 0x04
 db8:	1b 81       	ldd	r17, Y+3	; 0x03
 dba:	aa 81       	ldd	r26, Y+2	; 0x02
 dbc:	b9 81       	ldd	r27, Y+1	; 0x01
 dbe:	ce 0f       	add	r28, r30
 dc0:	d1 1d       	adc	r29, r1
 dc2:	0f b6       	in	r0, 0x3f	; 63
 dc4:	f8 94       	cli
 dc6:	de bf       	out	0x3e, r29	; 62
 dc8:	0f be       	out	0x3f, r0	; 63
 dca:	cd bf       	out	0x3d, r28	; 61
 dcc:	ed 01       	movw	r28, r26
 dce:	08 95       	ret

00000dd0 <__umulhisi3>:
 dd0:	a2 9f       	mul	r26, r18
 dd2:	b0 01       	movw	r22, r0
 dd4:	b3 9f       	mul	r27, r19
 dd6:	c0 01       	movw	r24, r0
 dd8:	a3 9f       	mul	r26, r19
 dda:	70 0d       	add	r23, r0
 ddc:	81 1d       	adc	r24, r1
 dde:	11 24       	eor	r1, r1
 de0:	91 1d       	adc	r25, r1
 de2:	b2 9f       	mul	r27, r18
 de4:	70 0d       	add	r23, r0
 de6:	81 1d       	adc	r24, r1
 de8:	11 24       	eor	r1, r1
 dea:	91 1d       	adc	r25, r1
 dec:	08 95       	ret

00000dee <_exit>:
 dee:	f8 94       	cli

00000df0 <__stop_program>:
 df0:	ff cf       	rjmp	.-2      	; 0xdf0 <__stop_program>
